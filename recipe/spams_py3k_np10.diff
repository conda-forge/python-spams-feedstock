diff --git setup.py setup.py
index f7fc386..820648d 100644
--- setup.py
+++ setup.py
@@ -1,38 +1,37 @@
 import os
+import sys
 #os.environ['DISTUTILS_DEBUG'] = "1"
 from distutils.core import setup, Extension
+from distutils.sysconfig import get_python_inc
 import distutils.util
 import numpy
+from numpy.distutils.system_info import blas_info
 
 # includes numpy : package numpy.distutils , numpy.get_include()
 # python setup.py build --inplace
 # python setup.py install --prefix=dist, 
-incs = ['.'] + map(lambda x: os.path.join('spams',x),[ 'linalg', 'prox', 'decomp', 'dictLearn']) + [numpy.get_include()] + ['/usr/include/python2.7/']
+incs = ['.'] + [os.path.join('spams', x) for x in [ 'linalg', 'prox', 'decomp', 'dictLearn']] + [numpy.get_include(), get_python_inc()] + blas_info().get_include_dirs()
 
 osname = distutils.util.get_platform()
-cc_flags = ['-fPIC', '-fopenmp']
-link_flags = ['-fopenmp', '-s' ]
-libs = ['stdc++', 'blas', 'lapack' ]
-libdirs = []
 
-if osname.startswith("macosx"):
-    cc_flags = ['-fPIC', '-fopenmp','-m32']
-    link_flags = ['-m32', '-framework', 'Python']
+cc_flags = ['-fPIC', '-fopenmp', '-Wunused-variable', '-m64']
+for _ in numpy.__config__.blas_opt_info.get("extra_compile_args", []):
+    if _ not in cc_flags:
+        cc_flags.append(_)
+for _ in numpy.__config__.lapack_opt_info.get("extra_compile_args", []):
+    if _ not in cc_flags:
+        cc_flags.append(_)
 
-if osname.startswith("win32"):
-    cc_flags = ['-fPIC', '-fopenmp','-DWIN32']
-    link_flags = ['-fopenmp', '-mwindows']
-    path = os.environ['PATH']
-    os.environ['PATH'] = 'C:/MinGW/bin;' + path
-    libs = ['stdc++', 'Rblas', 'Rlapack' ]
-    libdirs = ['C:/Program Files/R/R-2.15.1/bin/i386']
-
-if osname.startswith("win-amd64"):
-    cc_flags = ['-openmp', '-EHsc', '-DWIN32', '-DCYGWIN', '-DWINDOWS', '-I','C:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/include']
-    link_flags = []
-    libs = [ 'Rblas', 'Rlapack' ]
-    libdirs = ['C:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/lib/amd64','C:/Program Files/R/R-2.15.1/bin/x64']
+link_flags = ['-fopenmp']
+for _ in numpy.__config__.blas_opt_info.get("extra_link_args", []):
+    if _ not in link_flags:
+        link_flags.append(_)
+for _ in numpy.__config__.lapack_opt_info.get("extra_link_args", []):
+    if _ not in link_flags:
+        link_flags.append(_)
 
+libs = ['stdc++', 'blas', 'lapack', 'gomp']
+libdirs = numpy.distutils.system_info.blas_info().get_lib_dirs()
 
 ##path = os.environ['PATH']; print "XX OS %s, path %s" %(osname,path)
 
@@ -76,13 +75,13 @@ def mkhtml(d = None,base = 'sphinx'):
        ext_modules = [spams_wrap,],
        py_modules = ['spams', 'spams_wrap', 'myscipy_rand'],
 #       scripts = ['test_spams.py'],
-       data_files = [
-        ('test',['test_spams.py', 'test_decomp.py', 'test_dictLearn.py', 'test_linalg.py', 'test_prox.py', 'test_utils.py']),
-        ('doc',['doc_spams.pdf', 'python-interface.pdf']), 
-        ('doc/sphinx/_sources',mkhtml('_sources')),
-        ('doc/sphinx/_static',mkhtml('_static')),
-        ('doc/sphinx',mkhtml()),
-        ('doc/html',mkhtml(base = 'html')),
-        ('extdata',['boat.png', 'lena.png'])
-        ],
+#       data_files = [
+#        ('test',['test_spams.py', 'test_decomp.py', 'test_dictLearn.py', 'test_linalg.py', 'test_prox.py', 'test_utils.py']),
+#        ('doc',['doc_spams.pdf', 'python-interface.pdf']), 
+#        ('doc/sphinx/_sources',mkhtml('_sources')),
+#        ('doc/sphinx/_static',mkhtml('_static')),
+#        ('doc/sphinx',mkhtml()),
+#        ('doc/html',mkhtml(base = 'html')),
+#        ('extdata',['boat.png', 'lena.png'])
+#        ],
 )
diff --git spams_wrap-windows.cpp spams_wrap-windows.cpp
index 981ac1c..320021a 100644
--- spams_wrap-windows.cpp
+++ spams_wrap-windows.cpp
@@ -1,14 +1,18 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 1.3.40
- * 
- * This file is not intended to be easily readable and contains a number of 
+ * Version 3.0.8
+ *
+ * This file is not intended to be easily readable and contains a number of
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG 
- * interface file instead. 
+ * changes to this file unless you know what you are doing--modify the SWIG
+ * interface file instead.
  * ----------------------------------------------------------------------------- */
 
+
+#ifndef SWIGPYTHON
 #define SWIGPYTHON
+#endif
+
 #define SWIG_PYTHON_DIRECTOR_NO_VTABLE
 
 
@@ -66,28 +70,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__)) 
+#     define SWIGUNUSED __attribute__ ((__unused__))
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__)) 
+#   define SWIGUNUSED __attribute__ ((__unused__))
 # else
-#   define SWIGUNUSED 
+#   define SWIGUNUSED
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif 
+# endif
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
 # endif
 #endif
 
@@ -130,7 +134,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif 
+# endif
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
@@ -143,10 +147,29 @@ template <typename T> T SwigValueInit() {
 # define _SCL_SECURE_NO_DEPRECATE
 #endif
 
+/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
+#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
+# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
+#endif
 
+/* Intel's compiler complains if a variable which was never initialised is
+ * cast to void, which is a common idiom which we use to indicate that we
+ * are aware a variable isn't used.  So we just silence that warning.
+ * See: https://github.com/swig/swig/issues/192 for more discussion.
+ */
+#ifdef __INTEL_COMPILER
+# pragma warning disable 592
+#endif
 
-/* Python.h has to appear first */
-#include <Python.h>
+
+#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
+/* Use debug wrappers with the Python release dll */
+# undef _DEBUG
+# include <Python.h>
+# define _DEBUG
+#else
+# include <Python.h>
+#endif
 
 /* -----------------------------------------------------------------------------
  * swigrun.swg
@@ -172,7 +195,7 @@ template <typename T> T SwigValueInit() {
   You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
   creating a static or dynamic library from the SWIG runtime code.
   In 99.9% of the cases, SWIG just needs to declare them as 'static'.
-  
+
   But only do this if strictly necessary, ie, if you have problems
   with your compiler or suchlike.
 */
@@ -198,16 +221,16 @@ template <typename T> T SwigValueInit() {
 #define SWIG_POINTER_OWN           0x1
 
 
-/* 
+/*
    Flags/methods for returning states.
-   
-   The SWIG conversion methods, as ConvertPtr, return and integer 
+
+   The SWIG conversion methods, as ConvertPtr, return an integer
    that tells if the conversion was successful or not. And if not,
    an error code can be returned (see swigerrors.swg for the codes).
-   
+
    Use the following macros/flags to set or process the returning
    states.
-   
+
    In old versions of SWIG, code such as the following was usually written:
 
      if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
@@ -240,23 +263,23 @@ template <typename T> T SwigValueInit() {
     } else {
       // fail code
     }
-    
+
    I.e., now SWIG_ConvertPtr can return new objects and you can
    identify the case and take care of the deallocation. Of course that
    also requires SWIG_ConvertPtr to return new result values, such as
 
-      int SWIG_ConvertPtr(obj, ptr,...) {         
-        if (<obj is ok>) {			       
-          if (<need new object>) {		       
-            *ptr = <ptr to new allocated object>; 
-            return SWIG_NEWOBJ;		       
-          } else {				       
-            *ptr = <ptr to old object>;	       
-            return SWIG_OLDOBJ;		       
-          } 				       
-        } else {				       
-          return SWIG_BADOBJ;		       
-        }					       
+      int SWIG_ConvertPtr(obj, ptr,...) {
+        if (<obj is ok>) {
+          if (<need new object>) {
+            *ptr = <ptr to new allocated object>;
+            return SWIG_NEWOBJ;
+          } else {
+            *ptr = <ptr to old object>;
+            return SWIG_OLDOBJ;
+          }
+        } else {
+          return SWIG_BADOBJ;
+        }
       }
 
    Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
@@ -270,17 +293,17 @@ template <typename T> T SwigValueInit() {
        int fooi(int);
 
    and you call
- 
+
       food(1)   // cast rank '1'  (1 -> 1.0)
       fooi(1)   // cast rank '0'
 
    just use the SWIG_AddCast()/SWIG_CheckState()
 */
 
-#define SWIG_OK                    (0) 
+#define SWIG_OK                    (0)
 #define SWIG_ERROR                 (-1)
 #define SWIG_IsOK(r)               (r >= 0)
-#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  
+#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)
 
 /* The CastRankLimit says how many bits are used for the cast rank */
 #define SWIG_CASTRANKLIMIT         (1 << 8)
@@ -311,14 +334,14 @@ template <typename T> T SwigValueInit() {
 #  endif
 #  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
 #  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
-SWIGINTERNINLINE int SWIG_AddCast(int r) { 
+SWIGINTERNINLINE int SWIG_AddCast(int r) {
   return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
 }
-SWIGINTERNINLINE int SWIG_CheckState(int r) { 
-  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
+SWIGINTERNINLINE int SWIG_CheckState(int r) {
+  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
 }
 #else /* no cast-rank mode */
-#  define SWIG_AddCast
+#  define SWIG_AddCast(r) (r)
 #  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
 #endif
 
@@ -362,7 +385,7 @@ typedef struct swig_module_info {
   void                    *clientdata;		/* Language specific module data */
 } swig_module_info;
 
-/* 
+/*
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.
 
@@ -382,18 +405,18 @@ SWIG_TypeNameComp(const char *f1, const char *l1,
 
 /*
   Check type equivalence in a name list like <name1>|<name2>|...
-  Return 0 if not equal, 1 if equal
+  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
 */
 SWIGRUNTIME int
-SWIG_TypeEquiv(const char *nb, const char *tb) {
-  int equiv = 0;
+SWIG_TypeCmp(const char *nb, const char *tb) {
+  int equiv = 1;
   const char* te = tb + strlen(tb);
   const char* ne = nb;
-  while (!equiv && *ne) {
+  while (equiv != 0 && *ne) {
     for (nb = ne; *ne; ++ne) {
       if (*ne == '|') break;
     }
-    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
+    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
     if (*ne) ++ne;
   }
   return equiv;
@@ -401,24 +424,13 @@ SWIG_TypeEquiv(const char *nb, const char *tb) {
 
 /*
   Check type equivalence in a name list like <name1>|<name2>|...
-  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
+  Return 0 if not equal, 1 if equal
 */
 SWIGRUNTIME int
-SWIG_TypeCompare(const char *nb, const char *tb) {
-  int equiv = 0;
-  const char* te = tb + strlen(tb);
-  const char* ne = nb;
-  while (!equiv && *ne) {
-    for (nb = ne; *ne; ++ne) {
-      if (*ne == '|') break;
-    }
-    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
-    if (*ne) ++ne;
-  }
-  return equiv;
+SWIG_TypeEquiv(const char *nb, const char *tb) {
+  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
 }
 
-
 /*
   Check the typename
 */
@@ -446,7 +458,7 @@ SWIG_TypeCheck(const char *c, swig_type_info *ty) {
   return 0;
 }
 
-/* 
+/*
   Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
 */
 SWIGRUNTIME swig_cast_info *
@@ -481,7 +493,7 @@ SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
   return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
 }
 
-/* 
+/*
    Dynamic pointer casting. Down an inheritance hierarchy
 */
 SWIGRUNTIME swig_type_info *
@@ -525,7 +537,7 @@ SWIG_TypePrettyName(const swig_type_info *type) {
     return type->name;
 }
 
-/* 
+/*
    Set the clientdata field for a type
 */
 SWIGRUNTIME void
@@ -533,14 +545,14 @@ SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
   swig_cast_info *cast = ti->cast;
   /* if (ti->clientdata == clientdata) return; */
   ti->clientdata = clientdata;
-  
+
   while (cast) {
     if (!cast->converter) {
       swig_type_info *tc = cast->type;
       if (!tc->clientdata) {
 	SWIG_TypeClientData(tc, clientdata);
       }
-    }    
+    }
     cast = cast->next;
   }
 }
@@ -549,31 +561,31 @@ SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
   SWIG_TypeClientData(ti, clientdata);
   ti->owndata = 1;
 }
-  
+
 /*
   Search for a swig_type_info structure only by mangled name
   Search is a O(log #types)
-  
-  We start searching at module start, and finish searching when start == end.  
+
+  We start searching at module start, and finish searching when start == end.
   Note: if start == end at the beginning of the function, we go all the way around
   the circular list.
 */
 SWIGRUNTIME swig_type_info *
-SWIG_MangledTypeQueryModule(swig_module_info *start, 
-                            swig_module_info *end, 
+SWIG_MangledTypeQueryModule(swig_module_info *start,
+                            swig_module_info *end,
 		            const char *name) {
   swig_module_info *iter = start;
   do {
     if (iter->size) {
-      register size_t l = 0;
-      register size_t r = iter->size - 1;
+      size_t l = 0;
+      size_t r = iter->size - 1;
       do {
 	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
-	register size_t i = (l + r) >> 1; 
+	size_t i = (l + r) >> 1;
 	const char *iname = iter->types[i]->name;
 	if (iname) {
-	  register int compare = strcmp(name, iname);
-	  if (compare == 0) {	    
+	  int compare = strcmp(name, iname);
+	  if (compare == 0) {
 	    return iter->types[i];
 	  } else if (compare < 0) {
 	    if (i) {
@@ -598,14 +610,14 @@ SWIG_MangledTypeQueryModule(swig_module_info *start,
   Search for a swig_type_info structure for either a mangled name or a human readable name.
   It first searches the mangled names of the types, which is a O(log #types)
   If a type is not found it then searches the human readable names, which is O(#types).
-  
-  We start searching at module start, and finish searching when start == end.  
+
+  We start searching at module start, and finish searching when start == end.
   Note: if start == end at the beginning of the function, we go all the way around
   the circular list.
 */
 SWIGRUNTIME swig_type_info *
-SWIG_TypeQueryModule(swig_module_info *start, 
-                     swig_module_info *end, 
+SWIG_TypeQueryModule(swig_module_info *start,
+                     swig_module_info *end,
 		     const char *name) {
   /* STEP 1: Search the name field using binary search */
   swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
@@ -616,7 +628,7 @@ SWIG_TypeQueryModule(swig_module_info *start,
        of the str field (the human readable name) */
     swig_module_info *iter = start;
     do {
-      register size_t i = 0;
+      size_t i = 0;
       for (; i < iter->size; ++i) {
 	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
 	  return iter->types[i];
@@ -624,56 +636,56 @@ SWIG_TypeQueryModule(swig_module_info *start,
       iter = iter->next;
     } while (iter != end);
   }
-  
+
   /* neither found a match */
   return 0;
 }
 
-/* 
+/*
    Pack binary data into a string
 */
 SWIGRUNTIME char *
 SWIG_PackData(char *c, void *ptr, size_t sz) {
   static const char hex[17] = "0123456789abcdef";
-  register const unsigned char *u = (unsigned char *) ptr;
-  register const unsigned char *eu =  u + sz;
+  const unsigned char *u = (unsigned char *) ptr;
+  const unsigned char *eu =  u + sz;
   for (; u != eu; ++u) {
-    register unsigned char uu = *u;
+    unsigned char uu = *u;
     *(c++) = hex[(uu & 0xf0) >> 4];
     *(c++) = hex[uu & 0xf];
   }
   return c;
 }
 
-/* 
+/*
    Unpack binary data from a string
 */
 SWIGRUNTIME const char *
 SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
-  register unsigned char *u = (unsigned char *) ptr;
-  register const unsigned char *eu = u + sz;
+  unsigned char *u = (unsigned char *) ptr;
+  const unsigned char *eu = u + sz;
   for (; u != eu; ++u) {
-    register char d = *(c++);
-    register unsigned char uu;
+    char d = *(c++);
+    unsigned char uu;
     if ((d >= '0') && (d <= '9'))
       uu = ((d - '0') << 4);
     else if ((d >= 'a') && (d <= 'f'))
       uu = ((d - ('a'-10)) << 4);
-    else 
+    else
       return (char *) 0;
     d = *(c++);
     if ((d >= '0') && (d <= '9'))
       uu |= (d - '0');
     else if ((d >= 'a') && (d <= 'f'))
       uu |= (d - ('a'-10));
-    else 
+    else
       return (char *) 0;
     *u = uu;
   }
   return c;
 }
 
-/* 
+/*
    Pack 'void *' into a string buffer.
 */
 SWIGRUNTIME char *
@@ -733,18 +745,18 @@ SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
 #endif
 
 /*  Errors in SWIG */
-#define  SWIG_UnknownError    	   -1 
-#define  SWIG_IOError        	   -2 
-#define  SWIG_RuntimeError   	   -3 
-#define  SWIG_IndexError     	   -4 
-#define  SWIG_TypeError      	   -5 
-#define  SWIG_DivisionByZero 	   -6 
-#define  SWIG_OverflowError  	   -7 
-#define  SWIG_SyntaxError    	   -8 
-#define  SWIG_ValueError     	   -9 
+#define  SWIG_UnknownError    	   -1
+#define  SWIG_IOError        	   -2
+#define  SWIG_RuntimeError   	   -3
+#define  SWIG_IndexError     	   -4
+#define  SWIG_TypeError      	   -5
+#define  SWIG_DivisionByZero 	   -6
+#define  SWIG_OverflowError  	   -7
+#define  SWIG_SyntaxError    	   -8
+#define  SWIG_ValueError     	   -9
 #define  SWIG_SystemError    	   -10
 #define  SWIG_AttributeError 	   -11
-#define  SWIG_MemoryError    	   -12 
+#define  SWIG_MemoryError    	   -12
 #define  SWIG_NullReferenceError   -13
 
 
@@ -756,7 +768,16 @@ SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
 #define PyInt_Check(x) PyLong_Check(x)
 #define PyInt_AsLong(x) PyLong_AsLong(x)
 #define PyInt_FromLong(x) PyLong_FromLong(x)
+#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
+#define PyString_Check(name) PyBytes_Check(name)
+#define PyString_FromString(x) PyUnicode_FromString(x)
 #define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
+#define PyString_AsString(str) PyBytes_AsString(str)
+#define PyString_Size(str) PyBytes_Size(str)	
+#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
+#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
+#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
+#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)
 
 #endif
 
@@ -896,6 +917,67 @@ PyObject *PyBool_FromLong(long ok)
 typedef int Py_ssize_t;
 # define PY_SSIZE_T_MAX INT_MAX
 # define PY_SSIZE_T_MIN INT_MIN
+typedef inquiry lenfunc;
+typedef intargfunc ssizeargfunc;
+typedef intintargfunc ssizessizeargfunc;
+typedef intobjargproc ssizeobjargproc;
+typedef intintobjargproc ssizessizeobjargproc;
+typedef getreadbufferproc readbufferproc;
+typedef getwritebufferproc writebufferproc;
+typedef getsegcountproc segcountproc;
+typedef getcharbufferproc charbufferproc;
+static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
+{
+  long result = 0;
+  PyObject *i = PyNumber_Int(x);
+  if (i) {
+    result = PyInt_AsLong(i);
+    Py_DECREF(i);
+  }
+  return result;
+}
+#endif
+
+#if PY_VERSION_HEX < 0x02050000
+#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
+#endif
+
+#if PY_VERSION_HEX < 0x02040000
+#define Py_VISIT(op)				\
+  do { 						\
+    if (op) {					\
+      int vret = visit((op), arg);		\
+      if (vret)					\
+        return vret;				\
+    }						\
+  } while (0)
+#endif
+
+#if PY_VERSION_HEX < 0x02030000
+typedef struct {
+  PyTypeObject type;
+  PyNumberMethods as_number;
+  PyMappingMethods as_mapping;
+  PySequenceMethods as_sequence;
+  PyBufferProcs as_buffer;
+  PyObject *name, *slots;
+} PyHeapTypeObject;
+#endif
+
+#if PY_VERSION_HEX < 0x02030000
+typedef destructor freefunc;
+#endif
+
+#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
+     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
+     (PY_MAJOR_VERSION > 3))
+# define SWIGPY_USE_CAPSULE
+# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
+#endif
+
+#if PY_VERSION_HEX < 0x03020000
+#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
+#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
 #endif
 
 /* -----------------------------------------------------------------------------
@@ -1042,9 +1124,6 @@ SWIG_Python_AddErrorMsg(const char* mesg)
 
 #ifdef __cplusplus
 extern "C" {
-#if 0
-} /* cc-mode */
-#endif
 #endif
 
 /* -----------------------------------------------------------------------------
@@ -1070,27 +1149,24 @@ typedef struct swig_const_info {
  * Wrapper of PyInstanceMethod_New() used in Python 3
  * It is exported to the generated module, used for -fastproxy
  * ----------------------------------------------------------------------------- */
-SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
-{
 #if PY_VERSION_HEX >= 0x03000000
+SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
+{
   return PyInstanceMethod_New(func);
+}
 #else
+SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
+{
   return NULL;
-#endif
 }
+#endif
 
 #ifdef __cplusplus
-#if 0
-{ /* cc-mode */
-#endif
 }
 #endif
 
 
 /* -----------------------------------------------------------------------------
- * See the LICENSE file for information on copyright, usage and redistribution
- * of SWIG, and the README file for authors - http://www.swig.org/release.html.
- *
  * pyrun.swg
  *
  * This file contains the runtime support for Python modules
@@ -1105,7 +1181,15 @@ SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
 #define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
 #define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
 #define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
-#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
+
+#ifdef SWIGPYTHON_BUILTIN
+#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
+#else
+#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
+#endif
+
+#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
+
 #define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
 #define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
 #define swig_owntype                                    int
@@ -1120,7 +1204,7 @@ SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
 
 /* for C or C++ function pointers */
 #define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
-#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)
+#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)
 
 /* for C++ member pointers, ie, member methods */
 #define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
@@ -1129,7 +1213,7 @@ SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
 
 /* Runtime API */
 
-#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
+#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
 #define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
 #define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)
 
@@ -1155,7 +1239,7 @@ SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
 SWIGINTERN void 
 SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
   SWIG_PYTHON_THREAD_BEGIN_BLOCK;
-  PyErr_SetString(errtype, (char *) msg);
+  PyErr_SetString(errtype, msg);
   SWIG_PYTHON_THREAD_END_BLOCK;
 }
 
@@ -1163,12 +1247,41 @@ SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
 
 /* Set a constant value */
 
+#if defined(SWIGPYTHON_BUILTIN)
+
+SWIGINTERN void
+SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
+  PyObject *s = PyString_InternFromString(key);
+  PyList_Append(seq, s);
+  Py_DECREF(s);
+}
+
+SWIGINTERN void
+SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
+#if PY_VERSION_HEX < 0x02030000
+  PyDict_SetItemString(d, (char *)name, obj);
+#else
+  PyDict_SetItemString(d, name, obj);
+#endif
+  Py_DECREF(obj);
+  if (public_interface)
+    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
+}
+
+#else
+
 SWIGINTERN void
 SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
-  PyDict_SetItemString(d, (char*) name, obj);
+#if PY_VERSION_HEX < 0x02030000
+  PyDict_SetItemString(d, (char *)name, obj);
+#else
+  PyDict_SetItemString(d, name, obj);
+#endif
   Py_DECREF(obj);                            
 }
 
+#endif
+
 /* Append a value to the result obj */
 
 SWIGINTERN PyObject*
@@ -1216,7 +1329,7 @@ SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
 
 /* Unpack the argument tuple */
 
-SWIGINTERN int
+SWIGINTERN Py_ssize_t
 SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
 {
   if (!args) {
@@ -1229,10 +1342,18 @@ SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssi
     }
   }  
   if (!PyTuple_Check(args)) {
+    if (min <= 1 && max >= 1) {
+      Py_ssize_t i;
+      objs[0] = args;
+      for (i = 1; i < max; ++i) {
+	objs[i] = 0;
+      }
+      return 2;
+    }
     PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
     return 0;
   } else {
-    register Py_ssize_t l = PyTuple_GET_SIZE(args);
+    Py_ssize_t l = PyTuple_GET_SIZE(args);
     if (l < min) {
       PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
 		   name, (min == max ? "" : "at least "), (int)min, (int)l);
@@ -1242,7 +1363,7 @@ SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssi
 		   name, (min == max ? "" : "at most "), (int)max, (int)l);
       return 0;
     } else {
-      register int i;
+      Py_ssize_t i;
       for (i = 0; i < l; ++i) {
 	objs[i] = PyTuple_GET_ITEM(args, i);
       }
@@ -1281,11 +1402,11 @@ SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssi
 
 #define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)
 
+#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
+#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)
+
 #ifdef __cplusplus
 extern "C" {
-#if 0
-} /* cc-mode */
-#endif
 #endif
 
 /*  How to access Py_None */
@@ -1336,6 +1457,7 @@ typedef struct {
   PyObject *destroy;
   int delargs;
   int implicitconv;
+  PyTypeObject *pytype;
 } SwigPyClientData;
 
 SWIGRUNTIMEINLINE int 
@@ -1402,13 +1524,13 @@ SwigPyClientData_New(PyObject* obj)
       data->delargs = 0;
     }
     data->implicitconv = 0;
+    data->pytype = 0;
     return data;
   }
 }
 
 SWIGRUNTIME void 
-SwigPyClientData_Del(SwigPyClientData* data)
-{
+SwigPyClientData_Del(SwigPyClientData *data) {
   Py_XDECREF(data->newraw);
   Py_XDECREF(data->newargs);
   Py_XDECREF(data->destroy);
@@ -1422,8 +1544,28 @@ typedef struct {
   swig_type_info *ty;
   int own;
   PyObject *next;
+#ifdef SWIGPYTHON_BUILTIN
+  PyObject *dict;
+#endif
 } SwigPyObject;
 
+
+#ifdef SWIGPYTHON_BUILTIN
+
+SWIGRUNTIME PyObject *
+SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
+{
+  SwigPyObject *sobj = (SwigPyObject *)v;
+
+  if (!sobj->dict)
+    sobj->dict = PyDict_New();
+
+  Py_INCREF(sobj->dict);
+  return sobj->dict;
+}
+
+#endif
+
 SWIGRUNTIME PyObject *
 SwigPyObject_long(SwigPyObject *v)
 {
@@ -1472,54 +1614,26 @@ SwigPyObject_repr(SwigPyObject *v, PyObject *args)
 #endif
 {
   const char *name = SWIG_TypePrettyName(v->ty);
-  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
+  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
   if (v->next) {
-#ifdef METH_NOARGS
+# ifdef METH_NOARGS
     PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
-#else
+# else
     PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
-#endif
-#if PY_VERSION_HEX >= 0x03000000
+# endif
+# if PY_VERSION_HEX >= 0x03000000
     PyObject *joined = PyUnicode_Concat(repr, nrep);
     Py_DecRef(repr);
     Py_DecRef(nrep);
     repr = joined;
-#else
+# else
     PyString_ConcatAndDel(&repr,nrep);
-#endif
+# endif
   }
   return repr;  
 }
 
 SWIGRUNTIME int
-SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
-{
-  char *str;
-#ifdef METH_NOARGS
-  PyObject *repr = SwigPyObject_repr(v);
-#else
-  PyObject *repr = SwigPyObject_repr(v, NULL);
-#endif
-  if (repr) {
-    str = SWIG_Python_str_AsChar(repr); 
-    fputs(str, fp);
-    SWIG_Python_str_DelForPy3(str);
-    Py_DECREF(repr);
-    return 0; 
-  } else {
-    return 1; 
-  }
-}
-
-SWIGRUNTIME PyObject *
-SwigPyObject_str(SwigPyObject *v)
-{
-  char result[SWIG_BUFFER_SIZE];
-  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
-    SWIG_Python_str_FromChar(result) : 0;
-}
-
-SWIGRUNTIME int
 SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
 {
   void *i = v->ptr;
@@ -1536,27 +1650,43 @@ SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
     Py_INCREF(Py_NotImplemented);
     return Py_NotImplemented;
   }
-  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
-    res = Py_True;
-  else
-    res = Py_False;
-  Py_INCREF(res);
+  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
   return res;  
 }
 
 
-SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);
+SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);
 
+#ifdef SWIGPYTHON_BUILTIN
+static swig_type_info *SwigPyObject_stype = 0;
+SWIGRUNTIME PyTypeObject*
+SwigPyObject_type(void) {
+    SwigPyClientData *cd;
+    assert(SwigPyObject_stype);
+    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
+    assert(cd);
+    assert(cd->pytype);
+    return cd->pytype;
+}
+#else
 SWIGRUNTIME PyTypeObject*
 SwigPyObject_type(void) {
-  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
+  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
   return type;
 }
+#endif
 
 SWIGRUNTIMEINLINE int
 SwigPyObject_Check(PyObject *op) {
+#ifdef SWIGPYTHON_BUILTIN
+  PyTypeObject *target_tp = SwigPyObject_type();
+  if (PyType_IsSubtype(op->ob_type, target_tp))
+    return 1;
+  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
+#else
   return (Py_TYPE(op) == SwigPyObject_type())
     || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
+#endif
 }
 
 SWIGRUNTIME PyObject *
@@ -1574,16 +1704,32 @@ SwigPyObject_dealloc(PyObject *v)
     if (destroy) {
       /* destroy is always a VARARGS method */
       PyObject *res;
+
+      /* PyObject_CallFunction() has the potential to silently drop
+         the active active exception.  In cases of unnamed temporary
+         variable or where we just finished iterating over a generator
+         StopIteration will be active right now, and this needs to
+         remain true upon return from SwigPyObject_dealloc.  So save
+         and restore. */
+      
+      PyObject *val = NULL, *type = NULL, *tb = NULL;
+      PyErr_Fetch(&val, &type, &tb);
+
       if (data->delargs) {
-	/* we need to create a temporary object to carry the destroy operation */
-	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
-	res = SWIG_Python_CallFunctor(destroy, tmp);
-	Py_DECREF(tmp);
+        /* we need to create a temporary object to carry the destroy operation */
+        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
+        res = SWIG_Python_CallFunctor(destroy, tmp);
+        Py_DECREF(tmp);
       } else {
-	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
-	PyObject *mself = PyCFunction_GET_SELF(destroy);
-	res = ((*meth)(mself, v));
+        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
+        PyObject *mself = PyCFunction_GET_SELF(destroy);
+        res = ((*meth)(mself, v));
       }
+      if (!res)
+        PyErr_WriteUnraisable(destroy);
+
+      PyErr_Restore(val, type, tb);
+
       Py_XDECREF(res);
     } 
 #if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
@@ -1607,6 +1753,7 @@ SwigPyObject_append(PyObject* v, PyObject* next)
   next = tmp;
 #endif
   if (!SwigPyObject_Check(next)) {
+    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
     return NULL;
   }
   sobj->next = next;
@@ -1660,8 +1807,10 @@ SwigPyObject_own(PyObject *v, PyObject *args)
   PyObject *val = 0;
 #if (PY_VERSION_HEX < 0x02020000)
   if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
-#else
+#elif (PY_VERSION_HEX < 0x02050000)
   if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
+#else
+  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
 #endif
     {
       return NULL;
@@ -1693,7 +1842,7 @@ SwigPyObject_own(PyObject *v, PyObject *args)
 static PyMethodDef
 swigobject_methods[] = {
   {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
-  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
+  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
   {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
   {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
   {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
@@ -1704,7 +1853,7 @@ swigobject_methods[] = {
 static PyMethodDef
 swigobject_methods[] = {
   {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
-  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
+  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
   {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
   {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
   {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
@@ -1722,9 +1871,9 @@ SwigPyObject_getattr(SwigPyObject *sobj,char *name)
 #endif
 
 SWIGRUNTIME PyTypeObject*
-_PySwigObject_type(void) {
+SwigPyObject_TypeOnce(void) {
   static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
-  
+
   static PyNumberMethods SwigPyObject_as_number = {
     (binaryfunc)0, /*nb_add*/
     (binaryfunc)0, /*nb_subtract*/
@@ -1760,7 +1909,9 @@ _PySwigObject_type(void) {
     (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
     (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
 #endif
-#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
+#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
+#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
 #elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
@@ -1771,85 +1922,98 @@ _PySwigObject_type(void) {
 #endif
   };
 
-  static PyTypeObject swigpyobject_type;  
+  static PyTypeObject swigpyobject_type;
   static int type_init = 0;
   if (!type_init) {
-    const PyTypeObject tmp
-      = {
-	/* PyObject header changed in Python 3 */
+    const PyTypeObject tmp = {
+      /* PyObject header changed in Python 3 */
 #if PY_VERSION_HEX >= 0x03000000
-	PyVarObject_HEAD_INIT(&PyType_Type, 0)
-#else    
-	PyObject_HEAD_INIT(NULL)
-	0,				    /* ob_size */
-#endif
-	(char *)"SwigPyObject",		    /* tp_name */
-	sizeof(SwigPyObject),		    /* tp_basicsize */
-	0,			            /* tp_itemsize */
-	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
-	(printfunc)SwigPyObject_print,	    /* tp_print */
+      PyVarObject_HEAD_INIT(NULL, 0)
+#else
+      PyObject_HEAD_INIT(NULL)
+      0,                                    /* ob_size */
+#endif
+      (char *)"SwigPyObject",               /* tp_name */
+      sizeof(SwigPyObject),                 /* tp_basicsize */
+      0,                                    /* tp_itemsize */
+      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
+      0,				    /* tp_print */
 #if PY_VERSION_HEX < 0x02020000
-	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
+      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
 #else
-	(getattrfunc)0,			    /* tp_getattr */ 
+      (getattrfunc)0,                       /* tp_getattr */
 #endif
-	(setattrfunc)0,			    /* tp_setattr */ 
+      (setattrfunc)0,                       /* tp_setattr */
 #if PY_VERSION_HEX >= 0x03000000
     0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
 #else
-	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
-#endif
-	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
-	&SwigPyObject_as_number,	    /* tp_as_number */
-	0,				    /* tp_as_sequence */
-	0,				    /* tp_as_mapping */
-	(hashfunc)0,			    /* tp_hash */
-	(ternaryfunc)0,			    /* tp_call */
-	(reprfunc)SwigPyObject_str,	    /* tp_str */
-	PyObject_GenericGetAttr,            /* tp_getattro */
-	0,				    /* tp_setattro */
-	0,		                    /* tp_as_buffer */
-	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
-	swigobject_doc, 	            /* tp_doc */        
-	0,                                  /* tp_traverse */
-	0,                                  /* tp_clear */
-	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
-	0,                                  /* tp_weaklistoffset */
+      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
+#endif
+      (reprfunc)SwigPyObject_repr,          /* tp_repr */
+      &SwigPyObject_as_number,              /* tp_as_number */
+      0,                                    /* tp_as_sequence */
+      0,                                    /* tp_as_mapping */
+      (hashfunc)0,                          /* tp_hash */
+      (ternaryfunc)0,                       /* tp_call */
+      0,				    /* tp_str */
+      PyObject_GenericGetAttr,              /* tp_getattro */
+      0,                                    /* tp_setattro */
+      0,                                    /* tp_as_buffer */
+      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
+      swigobject_doc,                       /* tp_doc */
+      0,                                    /* tp_traverse */
+      0,                                    /* tp_clear */
+      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
+      0,                                    /* tp_weaklistoffset */
 #if PY_VERSION_HEX >= 0x02020000
-	0,                                  /* tp_iter */
-	0,                                  /* tp_iternext */
-	swigobject_methods,		    /* tp_methods */ 
-	0,			            /* tp_members */
-	0,				    /* tp_getset */	    	
-	0,			            /* tp_base */	        
-	0,				    /* tp_dict */	    	
-	0,				    /* tp_descr_get */  	
-	0,				    /* tp_descr_set */  	
-	0,				    /* tp_dictoffset */ 	
-	0,				    /* tp_init */	    	
-	0,				    /* tp_alloc */	    	
-	0,			            /* tp_new */	    	
-	0,	                            /* tp_free */	   
-	0,                                  /* tp_is_gc */  
-	0,				    /* tp_bases */   
-	0,				    /* tp_mro */
-	0,				    /* tp_cache */   
-	0,				    /* tp_subclasses */
-	0,				    /* tp_weaklist */
+      0,                                    /* tp_iter */
+      0,                                    /* tp_iternext */
+      swigobject_methods,                   /* tp_methods */
+      0,                                    /* tp_members */
+      0,                                    /* tp_getset */
+      0,                                    /* tp_base */
+      0,                                    /* tp_dict */
+      0,                                    /* tp_descr_get */
+      0,                                    /* tp_descr_set */
+      0,                                    /* tp_dictoffset */
+      0,                                    /* tp_init */
+      0,                                    /* tp_alloc */
+      0,                                    /* tp_new */
+      0,                                    /* tp_free */
+      0,                                    /* tp_is_gc */
+      0,                                    /* tp_bases */
+      0,                                    /* tp_mro */
+      0,                                    /* tp_cache */
+      0,                                    /* tp_subclasses */
+      0,                                    /* tp_weaklist */
 #endif
 #if PY_VERSION_HEX >= 0x02030000
-	0,                                  /* tp_del */
+      0,                                    /* tp_del */
+#endif
+#if PY_VERSION_HEX >= 0x02060000
+      0,                                    /* tp_version_tag */
+#endif
+#if PY_VERSION_HEX >= 0x03040000
+      0,                                    /* tp_finalize */
 #endif
 #ifdef COUNT_ALLOCS
-	0,0,0,0                             /* tp_alloc -> tp_next */
+      0,                                    /* tp_allocs */
+      0,                                    /* tp_frees */
+      0,                                    /* tp_maxalloc */
+#if PY_VERSION_HEX >= 0x02050000
+      0,                                    /* tp_prev */
 #endif
-      };
+      0                                     /* tp_next */
+#endif
+    };
     swigpyobject_type = tmp;
-    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
-#if PY_VERSION_HEX < 0x03000000
+    type_init = 1;
+#if PY_VERSION_HEX < 0x02020000
     swigpyobject_type.ob_type = &PyType_Type;
+#else
+    if (PyType_Ready(&swigpyobject_type) < 0)
+      return NULL;
 #endif
-    type_init = 1;
   }
   return &swigpyobject_type;
 }
@@ -1923,17 +2087,17 @@ SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
   return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
 }
 
-SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);
+SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);
 
 SWIGRUNTIME PyTypeObject*
 SwigPyPacked_type(void) {
-  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
+  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
   return type;
 }
 
 SWIGRUNTIMEINLINE int
 SwigPyPacked_Check(PyObject *op) {
-  return ((op)->ob_type == _PySwigPacked_type()) 
+  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
     || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
 }
 
@@ -1948,83 +2112,96 @@ SwigPyPacked_dealloc(PyObject *v)
 }
 
 SWIGRUNTIME PyTypeObject*
-_PySwigPacked_type(void) {
+SwigPyPacked_TypeOnce(void) {
   static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
   static PyTypeObject swigpypacked_type;
-  static int type_init = 0;  
+  static int type_init = 0;
   if (!type_init) {
-    const PyTypeObject tmp
-      = {
-    /* PyObject header changed in Python 3 */
+    const PyTypeObject tmp = {
+      /* PyObject header changed in Python 3 */
 #if PY_VERSION_HEX>=0x03000000
-    PyVarObject_HEAD_INIT(&PyType_Type, 0)
+      PyVarObject_HEAD_INIT(NULL, 0)
 #else
-	PyObject_HEAD_INIT(NULL)
-    0,				    /* ob_size */	
-#endif
-	(char *)"SwigPyPacked",		    /* tp_name */	
-	sizeof(SwigPyPacked),		    /* tp_basicsize */	
-	0,				    /* tp_itemsize */	
-	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
-	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
-	(getattrfunc)0,			    /* tp_getattr */ 	
-	(setattrfunc)0,			    /* tp_setattr */ 	
+      PyObject_HEAD_INIT(NULL)
+      0,                                    /* ob_size */
+#endif
+      (char *)"SwigPyPacked",               /* tp_name */
+      sizeof(SwigPyPacked),                 /* tp_basicsize */
+      0,                                    /* tp_itemsize */
+      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
+      (printfunc)SwigPyPacked_print,        /* tp_print */
+      (getattrfunc)0,                       /* tp_getattr */
+      (setattrfunc)0,                       /* tp_setattr */
 #if PY_VERSION_HEX>=0x03000000
-    0, /* tp_reserved in 3.0.1 */
+      0, /* tp_reserved in 3.0.1 */
 #else
-    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
-#endif
-	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
-	0,	                            /* tp_as_number */
-	0,				    /* tp_as_sequence */
-	0,				    /* tp_as_mapping */
-	(hashfunc)0,			    /* tp_hash */
-	(ternaryfunc)0,			    /* tp_call */
-	(reprfunc)SwigPyPacked_str,	    /* tp_str */
-	PyObject_GenericGetAttr,            /* tp_getattro */
-	0,				    /* tp_setattro */
-	0,		                    /* tp_as_buffer */
-	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
-	swigpacked_doc, 	            /* tp_doc */
-	0,                                  /* tp_traverse */
-	0,                                  /* tp_clear */
-	0,                                  /* tp_richcompare */
-	0,                                  /* tp_weaklistoffset */
+      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
+#endif
+      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
+      0,                                    /* tp_as_number */
+      0,                                    /* tp_as_sequence */
+      0,                                    /* tp_as_mapping */
+      (hashfunc)0,                          /* tp_hash */
+      (ternaryfunc)0,                       /* tp_call */
+      (reprfunc)SwigPyPacked_str,           /* tp_str */
+      PyObject_GenericGetAttr,              /* tp_getattro */
+      0,                                    /* tp_setattro */
+      0,                                    /* tp_as_buffer */
+      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
+      swigpacked_doc,                       /* tp_doc */
+      0,                                    /* tp_traverse */
+      0,                                    /* tp_clear */
+      0,                                    /* tp_richcompare */
+      0,                                    /* tp_weaklistoffset */
 #if PY_VERSION_HEX >= 0x02020000
-	0,                                  /* tp_iter */
-	0,                                  /* tp_iternext */
-	0,		                    /* tp_methods */ 
-	0,			            /* tp_members */
-	0,				    /* tp_getset */	    	
-	0,			            /* tp_base */	        
-	0,				    /* tp_dict */	    	
-	0,				    /* tp_descr_get */  	
-	0,				    /* tp_descr_set */  	
-	0,				    /* tp_dictoffset */ 	
-	0,				    /* tp_init */	    	
-	0,				    /* tp_alloc */	    	
-	0,			            /* tp_new */	    	
-	0, 	                            /* tp_free */	   
-        0,                                  /* tp_is_gc */  
-	0,				    /* tp_bases */   
-	0,				    /* tp_mro */
-	0,				    /* tp_cache */   
- 	0,				    /* tp_subclasses */
-	0,				    /* tp_weaklist */
+      0,                                    /* tp_iter */
+      0,                                    /* tp_iternext */
+      0,                                    /* tp_methods */
+      0,                                    /* tp_members */
+      0,                                    /* tp_getset */
+      0,                                    /* tp_base */
+      0,                                    /* tp_dict */
+      0,                                    /* tp_descr_get */
+      0,                                    /* tp_descr_set */
+      0,                                    /* tp_dictoffset */
+      0,                                    /* tp_init */
+      0,                                    /* tp_alloc */
+      0,                                    /* tp_new */
+      0,                                    /* tp_free */
+      0,                                    /* tp_is_gc */
+      0,                                    /* tp_bases */
+      0,                                    /* tp_mro */
+      0,                                    /* tp_cache */
+      0,                                    /* tp_subclasses */
+      0,                                    /* tp_weaklist */
 #endif
 #if PY_VERSION_HEX >= 0x02030000
-	0,                                  /* tp_del */
+      0,                                    /* tp_del */
+#endif
+#if PY_VERSION_HEX >= 0x02060000
+      0,                                    /* tp_version_tag */
+#endif
+#if PY_VERSION_HEX >= 0x03040000
+      0,                                    /* tp_finalize */
 #endif
 #ifdef COUNT_ALLOCS
-	0,0,0,0                             /* tp_alloc -> tp_next */
+      0,                                    /* tp_allocs */
+      0,                                    /* tp_frees */
+      0,                                    /* tp_maxalloc */
+#if PY_VERSION_HEX >= 0x02050000
+      0,                                    /* tp_prev */
 #endif
-      };
+      0                                     /* tp_next */
+#endif
+    };
     swigpypacked_type = tmp;
-    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
-#if PY_VERSION_HEX < 0x03000000
+    type_init = 1;
+#if PY_VERSION_HEX < 0x02020000
     swigpypacked_type.ob_type = &PyType_Type;
+#else
+    if (PyType_Ready(&swigpypacked_type) < 0)
+      return NULL;
 #endif
-    type_init = 1;
   }
   return &swigpypacked_type;
 }
@@ -2071,10 +2248,13 @@ _SWIG_This(void)
     return SWIG_Python_str_FromChar("this");
 }
 
+static PyObject *swig_this = NULL;
+
 SWIGRUNTIME PyObject *
 SWIG_This(void)
 {
-  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
+  if (swig_this == NULL)
+    swig_this = _SWIG_This();
   return swig_this;
 }
 
@@ -2088,50 +2268,65 @@ SWIG_This(void)
 SWIGRUNTIME SwigPyObject *
 SWIG_Python_GetSwigThis(PyObject *pyobj) 
 {
-  if (SwigPyObject_Check(pyobj)) {
+  PyObject *obj;
+
+  if (SwigPyObject_Check(pyobj))
     return (SwigPyObject *) pyobj;
-  } else {
-    PyObject *obj = 0;
+
+#ifdef SWIGPYTHON_BUILTIN
+  (void)obj;
+# ifdef PyWeakref_CheckProxy
+  if (PyWeakref_CheckProxy(pyobj)) {
+    pyobj = PyWeakref_GET_OBJECT(pyobj);
+    if (pyobj && SwigPyObject_Check(pyobj))
+      return (SwigPyObject*) pyobj;
+  }
+# endif
+  return NULL;
+#else
+
+  obj = 0;
+
 #if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
-    if (PyInstance_Check(pyobj)) {
-      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
+  if (PyInstance_Check(pyobj)) {
+    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
+  } else {
+    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
+    if (dictptr != NULL) {
+      PyObject *dict = *dictptr;
+      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
     } else {
-      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
-      if (dictptr != NULL) {
-	PyObject *dict = *dictptr;
-	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
-      } else {
 #ifdef PyWeakref_CheckProxy
-	if (PyWeakref_CheckProxy(pyobj)) {
-	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
-	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
-	}
+      if (PyWeakref_CheckProxy(pyobj)) {
+	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
+	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
+      }
 #endif
-	obj = PyObject_GetAttr(pyobj,SWIG_This());
-	if (obj) {
-	  Py_DECREF(obj);
-	} else {
-	  if (PyErr_Occurred()) PyErr_Clear();
-	  return 0;
-	}
+      obj = PyObject_GetAttr(pyobj,SWIG_This());
+      if (obj) {
+	Py_DECREF(obj);
+      } else {
+	if (PyErr_Occurred()) PyErr_Clear();
+	return 0;
       }
     }
+  }
 #else
-    obj = PyObject_GetAttr(pyobj,SWIG_This());
-    if (obj) {
-      Py_DECREF(obj);
-    } else {
-      if (PyErr_Occurred()) PyErr_Clear();
-      return 0;
-    }
+  obj = PyObject_GetAttr(pyobj,SWIG_This());
+  if (obj) {
+    Py_DECREF(obj);
+  } else {
+    if (PyErr_Occurred()) PyErr_Clear();
+    return 0;
+  }
 #endif
-    if (obj && !SwigPyObject_Check(obj)) {
-      /* a PyObject is called 'this', try to get the 'real this'
-	 SwigPyObject from it */ 
-      return SWIG_Python_GetSwigThis(obj);
-    }
-    return (SwigPyObject *)obj;
+  if (obj && !SwigPyObject_Check(obj)) {
+    /* a PyObject is called 'this', try to get the 'real this'
+       SwigPyObject from it */ 
+    return SWIG_Python_GetSwigThis(obj);
   }
+  return (SwigPyObject *)obj;
+#endif
 }
 
 /* Acquire a pointer value */
@@ -2153,91 +2348,105 @@ SWIG_Python_AcquirePtr(PyObject *obj, int own) {
 
 SWIGRUNTIME int
 SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
-  if (!obj) return SWIG_ERROR;
-  if (obj == Py_None) {
-    if (ptr) *ptr = 0;
+  int res;
+  SwigPyObject *sobj;
+  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;
+
+  if (!obj)
+    return SWIG_ERROR;
+  if (obj == Py_None && !implicit_conv) {
+    if (ptr)
+      *ptr = 0;
     return SWIG_OK;
-  } else {
-    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
+  }
+
+  res = SWIG_ERROR;
+
+  sobj = SWIG_Python_GetSwigThis(obj);
+  if (own)
+    *own = 0;
+  while (sobj) {
+    void *vptr = sobj->ptr;
+    if (ty) {
+      swig_type_info *to = sobj->ty;
+      if (to == ty) {
+        /* no type cast needed */
+        if (ptr) *ptr = vptr;
+        break;
+      } else {
+        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
+        if (!tc) {
+          sobj = (SwigPyObject *)sobj->next;
+        } else {
+          if (ptr) {
+            int newmemory = 0;
+            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
+            if (newmemory == SWIG_CAST_NEW_MEMORY) {
+              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
+              if (own)
+                *own = *own | SWIG_CAST_NEW_MEMORY;
+            }
+          }
+          break;
+        }
+      }
+    } else {
+      if (ptr) *ptr = vptr;
+      break;
+    }
+  }
+  if (sobj) {
     if (own)
-      *own = 0;
-    while (sobj) {
-      void *vptr = sobj->ptr;
-      if (ty) {
-	swig_type_info *to = sobj->ty;
-	if (to == ty) {
-	  /* no type cast needed */
-	  if (ptr) *ptr = vptr;
-	  break;
-	} else {
-	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
-	  if (!tc) {
-	    sobj = (SwigPyObject *)sobj->next;
-	  } else {
-	    if (ptr) {
-              int newmemory = 0;
-              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
-              if (newmemory == SWIG_CAST_NEW_MEMORY) {
-                assert(own);
-                if (own)
-                  *own = *own | SWIG_CAST_NEW_MEMORY;
+      *own = *own | sobj->own;
+    if (flags & SWIG_POINTER_DISOWN) {
+      sobj->own = 0;
+    }
+    res = SWIG_OK;
+  } else {
+    if (implicit_conv) {
+      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
+      if (data && !data->implicitconv) {
+        PyObject *klass = data->klass;
+        if (klass) {
+          PyObject *impconv;
+          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
+          impconv = SWIG_Python_CallFunctor(klass, obj);
+          data->implicitconv = 0;
+          if (PyErr_Occurred()) {
+            PyErr_Clear();
+            impconv = 0;
+          }
+          if (impconv) {
+            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
+            if (iobj) {
+              void *vptr;
+              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
+              if (SWIG_IsOK(res)) {
+                if (ptr) {
+                  *ptr = vptr;
+                  /* transfer the ownership to 'ptr' */
+                  iobj->own = 0;
+                  res = SWIG_AddCast(res);
+                  res = SWIG_AddNewMask(res);
+                } else {
+                  res = SWIG_AddCast(res);		    
+                }
               }
             }
-	    break;
-	  }
-	}
-      } else {
-	if (ptr) *ptr = vptr;
-	break;
+            Py_DECREF(impconv);
+          }
+        }
       }
     }
-    if (sobj) {
-      if (own)
-        *own = *own | sobj->own;
-      if (flags & SWIG_POINTER_DISOWN) {
-	sobj->own = 0;
-      }
-      return SWIG_OK;
-    } else {
-      int res = SWIG_ERROR;
-      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
-	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
-	if (data && !data->implicitconv) {
-	  PyObject *klass = data->klass;
-	  if (klass) {
-	    PyObject *impconv;
-	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
-	    impconv = SWIG_Python_CallFunctor(klass, obj);
-	    data->implicitconv = 0;
-	    if (PyErr_Occurred()) {
-	      PyErr_Clear();
-	      impconv = 0;
-	    }
-	    if (impconv) {
-	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
-	      if (iobj) {
-		void *vptr;
-		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
-		if (SWIG_IsOK(res)) {
-		  if (ptr) {
-		    *ptr = vptr;
-		    /* transfer the ownership to 'ptr' */
-		    iobj->own = 0;
-		    res = SWIG_AddCast(res);
-		    res = SWIG_AddNewMask(res);
-		  } else {
-		    res = SWIG_AddCast(res);		    
-		  }
-		}
-	      }
-	      Py_DECREF(impconv);
-	    }
-	  }
-	}
-      }
-      return res;
+    if (!SWIG_IsOK(res) && obj == Py_None) {
+      if (ptr)
+        *ptr = 0;
+      if (PyErr_Occurred())
+        PyErr_Clear();
+      res = SWIG_OK;
     }
   }
+  return res;
 }
 
 /* Convert a function ptr value */
@@ -2323,24 +2532,30 @@ SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
     }
   } else {
 #if PY_VERSION_HEX >= 0x03000000
-    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
-    PyObject_SetAttr(inst, SWIG_This(), swig_this);
-    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
+    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
+    if (inst) {
+      PyObject_SetAttr(inst, SWIG_This(), swig_this);
+      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
+    }
 #else
     PyObject *dict = PyDict_New();
-    PyDict_SetItem(dict, SWIG_This(), swig_this);
-    inst = PyInstance_NewRaw(data->newargs, dict);
-    Py_DECREF(dict);
+    if (dict) {
+      PyDict_SetItem(dict, SWIG_This(), swig_this);
+      inst = PyInstance_NewRaw(data->newargs, dict);
+      Py_DECREF(dict);
+    }
 #endif
   }
   return inst;
 #else
 #if (PY_VERSION_HEX >= 0x02010000)
-  PyObject *inst;
+  PyObject *inst = 0;
   PyObject *dict = PyDict_New();
-  PyDict_SetItem(dict, SWIG_This(), swig_this);
-  inst = PyInstance_NewRaw(data->newargs, dict);
-  Py_DECREF(dict);
+  if (dict) {
+    PyDict_SetItem(dict, SWIG_This(), swig_this);
+    inst = PyInstance_NewRaw(data->newargs, dict);
+    Py_DECREF(dict);
+  }
   return (PyObject *) inst;
 #else
   PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
@@ -2391,7 +2606,7 @@ SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
 SWIGINTERN PyObject *
 SWIG_Python_InitShadowInstance(PyObject *args) {
   PyObject *obj[2];
-  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
+  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
     return NULL;
   } else {
     SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
@@ -2407,22 +2622,55 @@ SWIG_Python_InitShadowInstance(PyObject *args) {
 /* Create a new pointer object */
 
 SWIGRUNTIME PyObject *
-SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
-  if (!ptr) {
+SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
+  SwigPyClientData *clientdata;
+  PyObject * robj;
+  int own;
+
+  if (!ptr)
     return SWIG_Py_Void();
-  } else {
-    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
-    PyObject *robj = SwigPyObject_New(ptr, type, own);
-    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
-    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
-      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
-      if (inst) {
-	Py_DECREF(robj);
-	robj = inst;
+
+  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
+  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
+  if (clientdata && clientdata->pytype) {
+    SwigPyObject *newobj;
+    if (flags & SWIG_BUILTIN_TP_INIT) {
+      newobj = (SwigPyObject*) self;
+      if (newobj->ptr) {
+        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
+        while (newobj->next)
+	  newobj = (SwigPyObject *) newobj->next;
+        newobj->next = next_self;
+        newobj = (SwigPyObject *)next_self;
+#ifdef SWIGPYTHON_BUILTIN
+        newobj->dict = 0;
+#endif
       }
+    } else {
+      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
+#ifdef SWIGPYTHON_BUILTIN
+      newobj->dict = 0;
+#endif
+    }
+    if (newobj) {
+      newobj->ptr = ptr;
+      newobj->ty = type;
+      newobj->own = own;
+      newobj->next = 0;
+      return (PyObject*) newobj;
     }
-    return robj;
+    return SWIG_Py_Void();
   }
+
+  assert(!(flags & SWIG_BUILTIN_TP_INIT));
+
+  robj = SwigPyObject_New(ptr, type, own);
+  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
+    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
+    Py_DECREF(robj);
+    robj = inst;
+  }
+  return robj;
 }
 
 /* Create a new packed object */
@@ -2441,15 +2689,19 @@ void *SWIG_ReturnGlobalTypeList(void *);
 #endif
 
 SWIGRUNTIME swig_module_info *
-SWIG_Python_GetModule(void) {
+SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
   static void *type_pointer = (void *)0;
   /* first check if module already created */
   if (!type_pointer) {
 #ifdef SWIG_LINK_RUNTIME
     type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
 #else
+# ifdef SWIGPY_USE_CAPSULE
+    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
+# else
     type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
 				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
+# endif
     if (PyErr_Occurred()) {
       PyErr_Clear();
       type_pointer = (void *)0;
@@ -2467,13 +2719,11 @@ PyModule_AddObject(PyObject *m, char *name, PyObject *o)
 {
   PyObject *dict;
   if (!PyModule_Check(m)) {
-    PyErr_SetString(PyExc_TypeError,
-		    "PyModule_AddObject() needs module as first arg");
+    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
     return SWIG_ERROR;
   }
   if (!o) {
-    PyErr_SetString(PyExc_TypeError,
-		    "PyModule_AddObject() needs non-NULL value");
+    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
     return SWIG_ERROR;
   }
   
@@ -2492,9 +2742,17 @@ PyModule_AddObject(PyObject *m, char *name, PyObject *o)
 #endif
 
 SWIGRUNTIME void
+#ifdef SWIGPY_USE_CAPSULE
+SWIG_Python_DestroyModule(PyObject *obj)
+#else
 SWIG_Python_DestroyModule(void *vptr)
+#endif
 {
+#ifdef SWIGPY_USE_CAPSULE
+  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
+#else
   swig_module_info *swig_module = (swig_module_info *) vptr;
+#endif
   swig_type_info **types = swig_module->types;
   size_t i;
   for (i =0; i < swig_module->size; ++i) {
@@ -2505,25 +2763,33 @@ SWIG_Python_DestroyModule(void *vptr)
     }
   }
   Py_DECREF(SWIG_This());
+  swig_this = NULL;
 }
 
 SWIGRUNTIME void
 SWIG_Python_SetModule(swig_module_info *swig_module) {
-  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */
-
 #if PY_VERSION_HEX >= 0x03000000
  /* Add a dummy module object into sys.modules */
   PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
 #else
-  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
-				   swig_empty_runtime_method_table);
+  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
+  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
 #endif
+#ifdef SWIGPY_USE_CAPSULE
+  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
+  if (pointer && module) {
+    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
+  } else {
+    Py_XDECREF(pointer);
+  }
+#else
   PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
   if (pointer && module) {
     PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
   } else {
     Py_XDECREF(pointer);
   }
+#endif
 }
 
 /* The python cached type query */
@@ -2541,12 +2807,20 @@ SWIG_Python_TypeQuery(const char *type)
   PyObject *obj = PyDict_GetItem(cache, key);
   swig_type_info *descriptor;
   if (obj) {
+#ifdef SWIGPY_USE_CAPSULE
+    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
+#else
     descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
+#endif
   } else {
-    swig_module_info *swig_module = SWIG_Python_GetModule();
+    swig_module_info *swig_module = SWIG_GetModule(0);
     descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
     if (descriptor) {
+#ifdef SWIGPY_USE_CAPSULE
+      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
+#else
       obj = PyCObject_FromVoidPtr(descriptor, NULL);
+#endif
       PyDict_SetItem(cache, key, obj);
       Py_DECREF(obj);
     }
@@ -2607,7 +2881,7 @@ SwigPyObject_GetDesc(PyObject *self)
 {
   SwigPyObject *v = (SwigPyObject *)self;
   swig_type_info *ty = v ? v->ty : 0;
-  return ty ? ty->str : (char*)"";
+  return ty ? ty->str : "";
 }
 
 SWIGRUNTIME void
@@ -2650,7 +2924,7 @@ SWIG_Python_TypeError(const char *type, PyObject *obj)
 
 /* Convert a pointer value, signal an exception on a type mismatch */
 SWIGRUNTIME void *
-SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
+SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
   void *result;
   if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
     PyErr_Clear();
@@ -2664,11 +2938,61 @@ SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags)
   return result;
 }
 
+#ifdef SWIGPYTHON_BUILTIN
+SWIGRUNTIME int
+SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
+  PyTypeObject *tp = obj->ob_type;
+  PyObject *descr;
+  PyObject *encoded_name;
+  descrsetfunc f;
+  int res = -1;
+
+# ifdef Py_USING_UNICODE
+  if (PyString_Check(name)) {
+    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
+    if (!name)
+      return -1;
+  } else if (!PyUnicode_Check(name))
+# else
+  if (!PyString_Check(name))
+# endif
+  {
+    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
+    return -1;
+  } else {
+    Py_INCREF(name);
+  }
+
+  if (!tp->tp_dict) {
+    if (PyType_Ready(tp) < 0)
+      goto done;
+  }
+
+  descr = _PyType_Lookup(tp, name);
+  f = NULL;
+  if (descr != NULL)
+    f = descr->ob_type->tp_descr_set;
+  if (!f) {
+    if (PyString_Check(name)) {
+      encoded_name = name;
+      Py_INCREF(name);
+    } else {
+      encoded_name = PyUnicode_AsUTF8String(name);
+    }
+    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
+    Py_DECREF(encoded_name);
+  } else {
+    res = f(descr, obj, value);
+  }
+  
+  done:
+  Py_DECREF(name);
+  return res;
+}
+#endif
+
 
 #ifdef __cplusplus
-#if 0
-{ /* cc-mode */
-#endif
 }
 #endif
 
@@ -2718,7 +3042,7 @@ static swig_module_info swig_module = {swig_types, 8, 0, 0, 0, 0};
 #endif
 #define SWIG_name    "_spams_wrap"
 
-#define SWIGVERSION 0x010340 
+#define SWIGVERSION 0x030008 
 #define SWIG_VERSION SWIGVERSION
 
 
@@ -2741,27 +3065,35 @@ namespace swig {
 
     SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
     {
+      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
       Py_XINCREF(_obj);      
+      SWIG_PYTHON_THREAD_END_BLOCK;
     }
     
     SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
     {
       if (initial_ref) {
+        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
         Py_XINCREF(_obj);
+        SWIG_PYTHON_THREAD_END_BLOCK;
       }
     }
     
     SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
     {
+      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
       Py_XINCREF(item._obj);
       Py_XDECREF(_obj);
       _obj = item._obj;
+      SWIG_PYTHON_THREAD_END_BLOCK;
       return *this;      
     }
     
     ~SwigPtr_PyObject() 
     {
+      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
       Py_XDECREF(_obj);
+      SWIG_PYTHON_THREAD_END_BLOCK;
     }
     
     operator PyObject *() const
@@ -2815,12 +3147,16 @@ extern "C" {
 
 
 #ifndef SWIG_FILE_WITH_INIT
-#  define NO_IMPORT_ARRAY
+#define NO_IMPORT_ARRAY
 #endif
 #include "stdio.h"
+#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
 #include <numpy/arrayobject.h>
 
 
+#include <complex> 
+
+
 #include <limits.h>
 #if !defined(SWIG_NO_LLONG_MAX)
 # if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
@@ -2838,9 +3174,11 @@ SWIG_AsVal_double (PyObject *obj, double *val)
   if (PyFloat_Check(obj)) {
     if (val) *val = PyFloat_AsDouble(obj);
     return SWIG_OK;
+#if PY_VERSION_HEX < 0x03000000
   } else if (PyInt_Check(obj)) {
     if (val) *val = PyInt_AsLong(obj);
     return SWIG_OK;
+#endif
   } else if (PyLong_Check(obj)) {
     double v = PyLong_AsDouble(obj);
     if (!PyErr_Occurred()) {
@@ -2914,16 +3252,20 @@ SWIG_CanCastAsInteger(double *d, double min, double max) {
 SWIGINTERN int
 SWIG_AsVal_long (PyObject *obj, long* val)
 {
+#if PY_VERSION_HEX < 0x03000000
   if (PyInt_Check(obj)) {
     if (val) *val = PyInt_AsLong(obj);
     return SWIG_OK;
-  } else if (PyLong_Check(obj)) {
+  } else
+#endif
+  if (PyLong_Check(obj)) {
     long v = PyLong_AsLong(obj);
     if (!PyErr_Occurred()) {
       if (val) *val = v;
       return SWIG_OK;
     } else {
       PyErr_Clear();
+      return SWIG_OverflowError;
     }
   }
 #ifdef SWIG_PYTHON_CAST_MODE
@@ -3019,18 +3361,17 @@ SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
 #else
 	if (*alloc == SWIG_NEWOBJ) 
 #endif
-	  {
-	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
-	    *alloc = SWIG_NEWOBJ;
-	  }
-	else {
+	{
+	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
+	  *alloc = SWIG_NEWOBJ;
+	} else {
 	  *cptr = cstr;
 	  *alloc = SWIG_OLDOBJ;
 	}
       } else {
-        #if PY_VERSION_HEX>=0x03000000
-        assert(0); /* Should never reach here in Python 3 */
-        #endif
+	#if PY_VERSION_HEX>=0x03000000
+	assert(0); /* Should never reach here in Python 3 */
+	#endif
 	*cptr = SWIG_Python_str_AsChar(obj);
       }
     }
@@ -3040,6 +3381,30 @@ SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
 #endif
     return SWIG_OK;
   } else {
+#if defined(SWIG_PYTHON_2_UNICODE)
+#if PY_VERSION_HEX<0x03000000
+    if (PyUnicode_Check(obj)) {
+      char *cstr; Py_ssize_t len;
+      if (!alloc && cptr) {
+        return SWIG_RuntimeError;
+      }
+      obj = PyUnicode_AsUTF8String(obj);
+      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
+        if (cptr) {
+          if (alloc) *alloc = SWIG_NEWOBJ;
+          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
+        }
+        if (psize) *psize = len + 1;
+
+        Py_XDECREF(obj);
+        return SWIG_OK;
+      } else {
+        Py_XDECREF(obj);
+      }
+    }
+#endif
+#endif
+
     swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
     if (pchar_descriptor) {
       void* vptr = 0;
@@ -3065,12 +3430,16 @@ SWIG_FromCharPtrAndSize(const char* carray, size_t size)
     if (size > INT_MAX) {
       swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
       return pchar_descriptor ? 
-	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
+	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
     } else {
 #if PY_VERSION_HEX >= 0x03000000
-      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
+#if PY_VERSION_HEX >= 0x03010000
+      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
+#else
+      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
+#endif
 #else
-      return PyString_FromStringAndSize(carray, static_cast< int >(size));
+      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
 #endif
     }
   } else {
@@ -3086,85 +3455,57 @@ SWIG_FromCharPtr(const char *cptr)
 }
 
 
-  #define SWIG_From_long   PyInt_FromLong 
-
-
-SWIGINTERNINLINE PyObject *
-SWIG_From_int  (int value)
-{    
-  return SWIG_From_long  (value);
+SWIGINTERNINLINE PyObject*
+  SWIG_From_int  (int value)
+{
+  return PyInt_FromLong((long) value);
 }
 
 
-/* Support older NumPy data type names
-*/
-#if NDARRAY_VERSION < 0x01000000
-#define NPY_BOOL          PyArray_BOOL
-#define NPY_BYTE          PyArray_BYTE
-#define NPY_UBYTE         PyArray_UBYTE
-#define NPY_SHORT         PyArray_SHORT
-#define NPY_USHORT        PyArray_USHORT
-#define NPY_INT           PyArray_INT
-#define NPY_UINT          PyArray_UINT
-#define NPY_LONG          PyArray_LONG
-#define NPY_ULONG         PyArray_ULONG
-#define NPY_LONGLONG      PyArray_LONGLONG
-#define NPY_ULONGLONG     PyArray_ULONGLONG
-#define NPY_FLOAT         PyArray_FLOAT
-#define NPY_DOUBLE        PyArray_DOUBLE
-#define NPY_LONGDOUBLE    PyArray_LONGDOUBLE
-#define NPY_CFLOAT        PyArray_CFLOAT
-#define NPY_CDOUBLE       PyArray_CDOUBLE
-#define NPY_CLONGDOUBLE   PyArray_CLONGDOUBLE
-#define NPY_OBJECT        PyArray_OBJECT
-#define NPY_STRING        PyArray_STRING
-#define NPY_UNICODE       PyArray_UNICODE
-#define NPY_VOID          PyArray_VOID
-#define NPY_NTYPES        PyArray_NTYPES
-#define NPY_NOTYPE        PyArray_NOTYPE
-#define NPY_CHAR          PyArray_CHAR
-#define NPY_USERDEF       PyArray_USERDEF
-#define npy_intp          intp
-
-#define NPY_MAX_BYTE      MAX_BYTE
-#define NPY_MIN_BYTE      MIN_BYTE
-#define NPY_MAX_UBYTE     MAX_UBYTE
-#define NPY_MAX_SHORT     MAX_SHORT
-#define NPY_MIN_SHORT     MIN_SHORT
-#define NPY_MAX_USHORT    MAX_USHORT
-#define NPY_MAX_INT       MAX_INT
-#define NPY_MIN_INT       MIN_INT
-#define NPY_MAX_UINT      MAX_UINT
-#define NPY_MAX_LONG      MAX_LONG
-#define NPY_MIN_LONG      MIN_LONG
-#define NPY_MAX_ULONG     MAX_ULONG
-#define NPY_MAX_LONGLONG  MAX_LONGLONG
-#define NPY_MIN_LONGLONG  MIN_LONGLONG
-#define NPY_MAX_ULONGLONG MAX_ULONGLONG
-#define NPY_MAX_INTP      MAX_INTP
-#define NPY_MIN_INTP      MIN_INTP
-
-#define NPY_FARRAY        FARRAY
-#define NPY_F_CONTIGUOUS  F_CONTIGUOUS
+#if NPY_API_VERSION < 0x00000007
+#define NPY_ARRAY_DEFAULT NPY_DEFAULT
+#define NPY_ARRAY_FARRAY  NPY_FARRAY
+#define NPY_FORTRANORDER  NPY_FORTRAN
 #endif
 
 
 /* Macros to extract array attributes.
  */
-#define is_array(a)            ((a) && PyArray_Check((PyArrayObject *)a))
-#define array_type(a)          (int)(PyArray_TYPE(a))
-#define array_numdims(a)       (((PyArrayObject *)a)->nd)
-#define array_dimensions(a)    (((PyArrayObject *)a)->dimensions)
-#define array_size(a,i)        (((PyArrayObject *)a)->dimensions[i])
-#define array_data(a)          (((PyArrayObject *)a)->data)
-#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS(a))
-#define array_is_native(a)     (PyArray_ISNOTSWAPPED(a))
-#define array_is_fortran(a)    (PyArray_ISFORTRAN(a))
+#if NPY_API_VERSION < 0x00000007
+#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
+#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
+#define array_numdims(a)       (((PyArrayObject*)a)->nd)
+#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
+#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
+#define array_strides(a)       (((PyArrayObject*)a)->strides)
+#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
+#define array_data(a)          (((PyArrayObject*)a)->data)
+#define array_descr(a)         (((PyArrayObject*)a)->descr)
+#define array_flags(a)         (((PyArrayObject*)a)->flags)
+#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
+#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
+#else
+#define is_array(a)            ((a) && PyArray_Check(a))
+#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
+#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
+#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
+#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
+#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
+#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
+#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
+#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
+#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
+#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
+#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
+#endif
+#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
+#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
 
 
   /* Given a PyObject, return a string describing its type.
    */
-  const char* pytype_string(PyObject* py_obj) {
+  const char* pytype_string(PyObject* py_obj)
+  {
     if (py_obj == NULL          ) return "C NULL value";
     if (py_obj == Py_None       ) return "Python None" ;
     if (PyCallable_Check(py_obj)) return "callable"    ;
@@ -3174,42 +3515,73 @@ SWIG_From_int  (int value)
     if (PyDict_Check(    py_obj)) return "dict"        ;
     if (PyList_Check(    py_obj)) return "list"        ;
     if (PyTuple_Check(   py_obj)) return "tuple"       ;
+#if PY_MAJOR_VERSION < 3
     if (PyFile_Check(    py_obj)) return "file"        ;
     if (PyModule_Check(  py_obj)) return "module"      ;
     if (PyInstance_Check(py_obj)) return "instance"    ;
+#endif
 
-    return "unkown type";
+    return "unknown type";
   }
 
   /* Given a NumPy typecode, return a string describing the type.
    */
-  const char* typecode_string(int typecode) {
-    static const char* type_names[25] = {"bool", "byte", "unsigned byte",
-                                   "short", "unsigned short", "int",
-                                   "unsigned int", "long", "unsigned long",
-                                   "long long", "unsigned long long",
-                                   "float", "double", "long double",
-                                   "complex float", "complex double",
-                                   "complex long double", "object",
-                                   "string", "unicode", "void", "ntypes",
-                                   "notype", "char", "unknown"};
+  const char* typecode_string(int typecode)
+  {
+    static const char* type_names[25] = {"bool",
+                                         "byte",
+                                         "unsigned byte",
+                                         "short",
+                                         "unsigned short",
+                                         "int",
+                                         "unsigned int",
+                                         "long",
+                                         "unsigned long",
+                                         "long long",
+                                         "unsigned long long",
+                                         "float",
+                                         "double",
+                                         "long double",
+                                         "complex float",
+                                         "complex double",
+                                         "complex long double",
+                                         "object",
+                                         "string",
+                                         "unicode",
+                                         "void",
+                                         "ntypes",
+                                         "notype",
+                                         "char",
+                                         "unknown"};
     return typecode < 24 ? type_names[typecode] : type_names[24];
   }
 
-  /* Make sure input has correct numpy type.  Allow character and byte
-   * to match.  Also allow int and long to match.  This is deprecated.
-   * You should use PyArray_EquivTypenums() instead.
+  /* Make sure input has correct numpy type.  This now just calls
+     PyArray_EquivTypenums().
    */
-  int type_match(int actual_type, int desired_type) {
+  int type_match(int actual_type,
+                 int desired_type)
+  {
     return PyArray_EquivTypenums(actual_type, desired_type);
   }
 
+#ifdef SWIGPY_USE_CAPSULE
+  void free_cap(PyObject * cap)
+  {
+    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
+    if (array != NULL) free(array);
+  }
+#endif
+
+
+
 
   /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
    * legal.  If not, set the python error string appropriately and
    * return NULL.
    */
-  PyArrayObject* obj_to_array_no_conversion(PyObject* input, int typecode)
+  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
+                                            int        typecode)
   {
     PyArrayObject* ary = NULL;
     if (is_array(input) && (typecode == NPY_NOTYPE ||
@@ -3228,11 +3600,12 @@ SWIG_From_int  (int value)
     }
     else
     {
-      const char * desired_type = typecode_string(typecode);
-      const char * actual_type  = pytype_string(input);
+      const char* desired_type = typecode_string(typecode);
+      const char* actual_type  = pytype_string(input);
       PyErr_Format(PyExc_TypeError,
                    "Array of type '%s' required.  A '%s' was given",
-                   desired_type, actual_type);
+                   desired_type,
+                   actual_type);
       ary = NULL;
     }
     return ary;
@@ -3243,11 +3616,12 @@ SWIG_From_int  (int value)
    * correct type.  On failure, the python error string will be set and
    * the routine returns NULL.
    */
-  PyArrayObject* obj_to_array_allow_conversion(PyObject* input, int typecode,
-                                               int* is_new_object)
+  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
+                                               int       typecode,
+                                               int*      is_new_object)
   {
     PyArrayObject* ary = NULL;
-    PyObject* py_obj;
+    PyObject*      py_obj;
     if (is_array(input) && (typecode == NPY_NOTYPE ||
                             PyArray_EquivTypenums(array_type(input),typecode)))
     {
@@ -3256,7 +3630,7 @@ SWIG_From_int  (int value)
     }
     else
     {
-      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_DEFAULT);
+      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
       /* If NULL, PyArray_FromObject will have set python error value.*/
       ary = (PyArrayObject*) py_obj;
       *is_new_object = 1;
@@ -3269,8 +3643,10 @@ SWIG_From_int  (int value)
    * not contiguous, create a new PyArrayObject using the original data,
    * flag it as a new object and return the pointer.
    */
-  PyArrayObject* make_contiguous(PyArrayObject* ary, int* is_new_object,
-                                 int min_dims, int max_dims)
+  PyArrayObject* make_contiguous(PyArrayObject* ary,
+                                 int*           is_new_object,
+                                 int            min_dims,
+                                 int            max_dims)
   {
     PyArrayObject* result;
     if (array_is_contiguous(ary))
@@ -3281,9 +3657,9 @@ SWIG_From_int  (int value)
     else
     {
       result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
-                                                             array_type(ary),
-                                                             min_dims,
-                                                             max_dims);
+                                                              array_type(ary),
+                                                              min_dims,
+                                                              max_dims);
       *is_new_object = 1;
     }
     return result;
@@ -3295,8 +3671,8 @@ SWIG_From_int  (int value)
    * PyArrayObject using the original data, flag it as a new object
    * and return the pointer.
    */
-  PyArrayObject* make_fortran(PyArrayObject* ary, int* is_new_object,
-                              int min_dims, int max_dims)
+  PyArrayObject* make_fortran(PyArrayObject* ary,
+                              int*           is_new_object)
   {
     PyArrayObject* result;
     if (array_is_fortran(ary))
@@ -3306,8 +3682,14 @@ SWIG_From_int  (int value)
     }
     else
     {
-      Py_INCREF(ary->descr);
-      result = (PyArrayObject*) PyArray_FromArray(ary, ary->descr, NPY_FORTRAN);
+      Py_INCREF(array_descr(ary));
+      result = (PyArrayObject*) PyArray_FromArray(ary,
+                                                  array_descr(ary),
+#if NPY_API_VERSION < 0x00000007
+                                                  NPY_FORTRANORDER);
+#else
+                                                  NPY_ARRAY_F_CONTIGUOUS);
+#endif
       *is_new_object = 1;
     }
     return result;
@@ -3319,13 +3701,14 @@ SWIG_From_int  (int value)
    * will be set.
    */
   PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
-                                                          int typecode,
-                                                          int* is_new_object)
+                                                          int       typecode,
+                                                          int*      is_new_object)
   {
     int is_new1 = 0;
     int is_new2 = 0;
     PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
+    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
+                                                        typecode,
                                                         &is_new1);
     if (ary1)
     {
@@ -3346,17 +3729,18 @@ SWIG_From_int  (int value)
    * will be set.
    */
   PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
-                                                       int typecode,
-                                                       int* is_new_object)
+                                                       int       typecode,
+                                                       int*      is_new_object)
   {
     int is_new1 = 0;
     int is_new2 = 0;
     PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
+    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
+                                                        typecode,
                                                         &is_new1);
     if (ary1)
     {
-      ary2 = make_fortran(ary1, &is_new2, 0, 0);
+      ary2 = make_fortran(ary1, &is_new2);
       if (is_new1 && is_new2)
       {
         Py_DECREF(ary1);
@@ -3367,108 +3751,34 @@ SWIG_From_int  (int value)
     return ary1;
   }
 
-  /* The following code was added by Ilmar M. Wilbers for forcing a copy of the
-   * object even when it is a NumPy array. This is meant for use with the
-   * IN_ARRAY typemaps, and allows the user to perform changes on an array
-   * without these chenges being reflected in the calling code.
-   */
-
-  /* Convert the given PyObject to a NumPy array with the given
-   * typecode as a copy. On success, return a valid PyArrayObject* with the
-   * correct type.  On failure, the python error string will be set and
-   * the routine returns NULL.
-   */
-  PyArrayObject* obj_to_array_force_conversion(PyObject* input, int typecode,
-                                               int* is_new_object)
-  {
-    PyArrayObject* ary = NULL;
-    PyObject* py_obj;
-    if (is_array(input) && (typecode == NPY_NOTYPE ||
-                            PyArray_EquivTypenums(array_type(input),typecode)))
-    {
-      py_obj = PyArray_Copy((PyArrayObject*) input);
-      ary = (PyArrayObject*) py_obj;
-      *is_new_object = 1;
-    }
-    else
-    {
-      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_DEFAULT);
-      /* If NULL, PyArray_FromObject will have set python error value.*/
-      ary = (PyArrayObject*) py_obj;
-      *is_new_object = 1;
-    }
-    return ary;
-  }
-
- /* Convert a given PyObject to a contiguous PyArrayObject of the
-   * specified type.  If the input object is not a contiguous
-   * PyArrayObject, a new one will be created and the new object flag
-   * will be set.
-   */
-  PyArrayObject* obj_to_array_contiguous_force_conversion(PyObject* input,
-                                                          int typecode,
-                                                          int* is_new_object)
-  {
-    int is_new1 = 0;
-    int is_new2 = 0;
-    PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_force_conversion(input, typecode,
-                                                        &is_new1);
-    if (ary1)
-    {
-      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
-      if ( is_new1 && is_new2)
-      {
-        Py_DECREF(ary1);
-      }
-      ary1 = ary2;
-    }
-    *is_new_object = is_new1 || is_new2;
-    return ary1;
-  }
 
-  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
-   * specified type.  If the input object is not a Fortran-ordered
-   * PyArrayObject, a new one will be created and the new object flag
-   * will be set.
+  /* Test whether a python object is contiguous.  If array is
+   * contiguous, return 1.  Otherwise, set the python error string and
+   * return 0.
    */
-  PyArrayObject* obj_to_array_fortran_force_conversion(PyObject* input,
-                                                       int typecode,
-                                                       int* is_new_object)
+  int require_contiguous(PyArrayObject* ary)
   {
-    int is_new1 = 0;
-    int is_new2 = 0;
-    PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_force_conversion(input, typecode,
-                                                        &is_new1);
-    if (ary1)
+    int contiguous = 1;
+    if (!array_is_contiguous(ary))
     {
-      ary2 = make_fortran(ary1, &is_new2, 0, 0);
-      if (is_new1 && is_new2)
-      {
-        Py_DECREF(ary1);
-      }
-      ary1 = ary2;
+      PyErr_SetString(PyExc_TypeError,
+                      "Array must be contiguous.  A non-contiguous array was given");
+      contiguous = 0;
     }
-    *is_new_object = is_new1 || is_new2;
-    return ary1;
+    return contiguous;
   }
-  /* End modifications by Ilmar M. Wilbers
-   */
-
 
-
-  /* Test whether a python object is contiguous.  If array is
+  /* Test whether a python object is (C_ or F_) contiguous.  If array is
    * contiguous, return 1.  Otherwise, set the python error string and
    * return 0.
    */
-  int require_contiguous(PyArrayObject* ary)
+  int require_c_or_f_contiguous(PyArrayObject* ary)
   {
     int contiguous = 1;
-    if (!array_is_contiguous(ary))
+    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
     {
       PyErr_SetString(PyExc_TypeError,
-                      "Array must be contiguous.  A non-contiguous array was given");
+                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
       contiguous = 0;
     }
     return contiguous;
@@ -3495,14 +3805,16 @@ SWIG_From_int  (int value)
    * dimensions.  If the array has the specified number of dimensions,
    * return 1.  Otherwise, set the python error string and return 0.
    */
-  int require_dimensions(PyArrayObject* ary, int exact_dimensions)
+  int require_dimensions(PyArrayObject* ary,
+                         int            exact_dimensions)
   {
     int success = 1;
     if (array_numdims(ary) != exact_dimensions)
     {
       PyErr_Format(PyExc_TypeError,
                    "Array must have %d dimensions.  Given array has %d dimensions",
-                   exact_dimensions, array_numdims(ary));
+                   exact_dimensions,
+                   array_numdims(ary));
       success = 0;
     }
     return success;
@@ -3513,7 +3825,9 @@ SWIG_From_int  (int value)
    * of dimensions, return 1.  Otherwise, set the python error string
    * and return 0.
    */
-  int require_dimensions_n(PyArrayObject* ary, int* exact_dimensions, int n)
+  int require_dimensions_n(PyArrayObject* ary,
+                           int*           exact_dimensions,
+                           int            n)
   {
     int success = 0;
     int i;
@@ -3537,7 +3851,8 @@ SWIG_From_int  (int value)
       strcat(dims_str,s);
       PyErr_Format(PyExc_TypeError,
                    "Array must have %s dimensions.  Given array has %d dimensions",
-                   dims_str, array_numdims(ary));
+                   dims_str,
+                   array_numdims(ary));
     }
     return success;
   }
@@ -3546,7 +3861,9 @@ SWIG_From_int  (int value)
    * array has the specified shape, return 1.  Otherwise, set the python
    * error string and return 0.
    */
-  int require_size(PyArrayObject* ary, npy_intp* size, int n)
+  int require_size(PyArrayObject* ary,
+                   npy_intp*      size,
+                   int            n)
   {
     int i;
     int success = 1;
@@ -3586,36 +3903,42 @@ SWIG_From_int  (int value)
       actual_dims[len-1] = ']';
       PyErr_Format(PyExc_TypeError,
                    "Array must have shape of %s.  Given array has shape of %s",
-                   desired_dims, actual_dims);
+                   desired_dims,
+                   actual_dims);
     }
     return success;
   }
 
-  /* Require the given PyArrayObject to to be FORTRAN ordered.  If the
-   * the PyArrayObject is already FORTRAN ordered, do nothing.  Else,
-   * set the FORTRAN ordering flag and recompute the strides.
+  /* Require the given PyArrayObject to to be Fortran ordered.  If the
+   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
+   * set the Fortran ordering flag and recompute the strides.
    */
   int require_fortran(PyArrayObject* ary)
   {
     int success = 1;
     int nd = array_numdims(ary);
     int i;
+    npy_intp * strides = array_strides(ary);
     if (array_is_fortran(ary)) return success;
-    /* Set the FORTRAN ordered flag */
-    ary->flags = NPY_FARRAY;
+    /* Set the Fortran ordered flag */
+    array_enableflags(ary,NPY_ARRAY_FARRAY);
     /* Recompute the strides */
-    ary->strides[0] = ary->strides[nd-1];
+    strides[0] = strides[nd-1];
     for (i=1; i < nd; ++i)
-      ary->strides[i] = ary->strides[i-1] * array_size(ary,i-1);
+      strides[i] = strides[i-1] * array_size(ary,i-1);
     return success;
   }
 
- 
+
+
 
 SWIGINTERN int
 SWIG_AsVal_bool (PyObject *obj, bool *val)
 {
-  int r = PyObject_IsTrue(obj);
+  int r;
+  if (!PyBool_Check(obj))
+    return SWIG_ERROR;
+  r = PyObject_IsTrue(obj);
   if (r == -1)
     return SWIG_ERROR;
   if (val) *val = r ? true : false;
@@ -3824,7 +4147,7 @@ SWIGINTERN PyObject *_wrap_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args)
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:mult",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -3841,7 +4164,7 @@ SWIGINTERN PyObject *_wrap_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args)
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -3858,7 +4181,7 @@ SWIGINTERN PyObject *_wrap_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args)
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -3957,7 +4280,7 @@ SWIGINTERN PyObject *_wrap_AAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray1 = obj0;
     if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
         PyObject_HasAttrString(sparray1, "indices") &&
@@ -4017,7 +4340,7 @@ SWIGINTERN PyObject *_wrap_AAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
     
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4093,7 +4416,7 @@ SWIGINTERN PyObject *_wrap_XAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray1 = obj0;
     if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
         PyObject_HasAttrString(sparray1, "indices") &&
@@ -4153,7 +4476,7 @@ SWIGINTERN PyObject *_wrap_XAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
     
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4170,7 +4493,7 @@ SWIGINTERN PyObject *_wrap_XAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4285,7 +4608,7 @@ SWIGINTERN PyObject *_wrap_conjugateGradient(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOO:conjugateGradient",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4363,7 +4686,7 @@ SWIGINTERN PyObject *_wrap_invSym(PyObject *SWIGUNUSEDPARM(self), PyObject *args
   
   if (!PyArg_ParseTuple(args,(char *)"O:invSym",&obj0)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4401,7 +4724,7 @@ SWIGINTERN PyObject *_wrap_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *a
   
   if (!PyArg_ParseTuple(args,(char *)"O:normalize",&obj0)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4431,6 +4754,83 @@ SWIGINTERN PyObject *_wrap_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *a
 }
 
 
+SWIGINTERN PyObject *L1COEFFS_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1COEFFS",SWIG_From_int(static_cast< int >(L1COEFFS)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L2ERROR_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L2ERROR",SWIG_From_int(static_cast< int >(L2ERROR)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *PENALTY_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "PENALTY",SWIG_From_int(static_cast< int >(PENALTY)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *SPARSITY_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "SPARSITY",SWIG_From_int(static_cast< int >(SPARSITY)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L2ERROR2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L2ERROR2",SWIG_From_int(static_cast< int >(L2ERROR2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *PENALTY2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "PENALTY2",SWIG_From_int(static_cast< int >(PENALTY2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *FISTAMODE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "FISTAMODE",SWIG_From_int(static_cast< int >(FISTAMODE)));
+  return SWIG_Py_Void();
+}
+
+
 SWIGINTERN PyObject *_wrap_sparseProject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   PyObject *resultobj = 0;
   Matrix< double > *arg1 = (Matrix< double > *) 0 ;
@@ -4470,7 +4870,7 @@ SWIGINTERN PyObject *_wrap_sparseProject(PyObject *SWIGUNUSEDPARM(self), PyObjec
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:sparseProject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4487,7 +4887,7 @@ SWIGINTERN PyObject *_wrap_sparseProject(PyObject *SWIGUNUSEDPARM(self), PyObjec
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4627,7 +5027,7 @@ SWIGINTERN PyObject *_wrap_lassoD(PyObject *SWIGUNUSEDPARM(self), PyObject *args
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:lassoD",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4644,7 +5044,7 @@ SWIGINTERN PyObject *_wrap_lassoD(PyObject *SWIGUNUSEDPARM(self), PyObject *args
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4864,7 +5264,7 @@ SWIGINTERN PyObject *_wrap_lassoQq(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:lassoQq",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4881,7 +5281,7 @@ SWIGINTERN PyObject *_wrap_lassoQq(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4898,7 +5298,7 @@ SWIGINTERN PyObject *_wrap_lassoQq(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5103,7 +5503,7 @@ SWIGINTERN PyObject *_wrap_lassoMask(PyObject *SWIGUNUSEDPARM(self), PyObject *a
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:lassoMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5120,7 +5520,7 @@ SWIGINTERN PyObject *_wrap_lassoMask(PyObject *SWIGUNUSEDPARM(self), PyObject *a
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5137,7 +5537,7 @@ SWIGINTERN PyObject *_wrap_lassoMask(PyObject *SWIGUNUSEDPARM(self), PyObject *a
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_BOOL);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5301,7 +5701,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted(PyObject *SWIGUNUSEDPARM(self), PyObjec
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:lassoWeighted",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5318,7 +5718,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted(PyObject *SWIGUNUSEDPARM(self), PyObjec
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5335,7 +5735,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted(PyObject *SWIGUNUSEDPARM(self), PyObjec
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5501,7 +5901,7 @@ SWIGINTERN PyObject *_wrap_omp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:omp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5518,7 +5918,7 @@ SWIGINTERN PyObject *_wrap_omp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5726,7 +6126,7 @@ SWIGINTERN PyObject *_wrap_ompMask(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:ompMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5743,7 +6143,7 @@ SWIGINTERN PyObject *_wrap_ompMask(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5760,7 +6160,7 @@ SWIGINTERN PyObject *_wrap_ompMask(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_BOOL);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5952,7 +6352,7 @@ SWIGINTERN PyObject *_wrap_somp(PyObject *SWIGUNUSEDPARM(self), PyObject *args)
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOO:somp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5969,7 +6369,7 @@ SWIGINTERN PyObject *_wrap_somp(PyObject *SWIGUNUSEDPARM(self), PyObject *args)
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6114,7 +6514,7 @@ SWIGINTERN PyObject *_wrap_cd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6131,7 +6531,7 @@ SWIGINTERN PyObject *_wrap_cd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6166,7 +6566,7 @@ SWIGINTERN PyObject *_wrap_cd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray3 = obj2;
     if ( !( PyObject_HasAttrString(sparray3, "indptr") &&
         PyObject_HasAttrString(sparray3, "indices") &&
@@ -6361,7 +6761,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:l1L2BCD",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6378,7 +6778,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6395,7 +6795,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6481,6 +6881,50 @@ SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *SWIGUNUSEDPARM(self), PyObject *arg
 }
 
 
+SWIGINTERN PyObject *L2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L2",SWIG_From_int(static_cast< int >(L2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L1L2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1L2",SWIG_From_int(static_cast< int >(L1L2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L1L2FL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1L2FL",SWIG_From_int(static_cast< int >(L1L2FL)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L1L2MU_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1L2MU",SWIG_From_int(static_cast< int >(L1L2MU)));
+  return SWIG_Py_Void();
+}
+
+
 SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   PyObject *resultobj = 0;
   Data< double > *arg1 = (Data< double > *) 0 ;
@@ -6660,7 +7104,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
   {
     if ( PyObject_HasAttrString(obj0, "indptr")) {
       PyObject* sparray =obj0;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj0;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -6719,7 +7163,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6747,7 +7191,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
   } 
   arg6 = static_cast< bool >(val6);
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array7 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6764,7 +7208,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array8 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6786,7 +7230,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
   } 
   arg9 = static_cast< int >(val9);
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array10 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6826,7 +7270,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray12 = obj8;
     if ( !( PyObject_HasAttrString(sparray12, "indptr") &&
         PyObject_HasAttrString(sparray12, "indices") &&
@@ -6904,7 +7348,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *SWIGUNUSEDPARM(self), PyObject *
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray13 = obj9;
     if ( !( PyObject_HasAttrString(sparray13, "indptr") &&
         PyObject_HasAttrString(sparray13, "indices") &&
@@ -7306,7 +7750,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysis(PyObject *SWIGUNUSEDPARM(self), Py
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:archetypalAnalysis",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7533,7 +7977,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit(PyObject *SWIGUNUSEDPARM(self)
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:archetypalAnalysisInit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7550,7 +7994,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit(PyObject *SWIGUNUSEDPARM(self)
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7747,7 +8191,7 @@ SWIGINTERN PyObject *_wrap_decompSimplex(PyObject *SWIGUNUSEDPARM(self), PyObjec
   
   if (!PyArg_ParseTuple(args,(char *)"OOOO:decompSimplex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7764,7 +8208,7 @@ SWIGINTERN PyObject *_wrap_decompSimplex(PyObject *SWIGUNUSEDPARM(self), PyObjec
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8020,7 +8464,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *a
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaFlat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8057,7 +8501,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *a
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -8116,7 +8560,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *a
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8134,7 +8578,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *a
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8151,7 +8595,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *a
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8593,7 +9037,7 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *SWIGUNUSEDPARM(self), PyObject *a
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39,&obj40,&obj41,&obj42)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8630,7 +9074,7 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *SWIGUNUSEDPARM(self), PyObject *a
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -8689,7 +9133,7 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *SWIGUNUSEDPARM(self), PyObject *a
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8707,7 +9151,7 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *SWIGUNUSEDPARM(self), PyObject *a
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8724,7 +9168,7 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *SWIGUNUSEDPARM(self), PyObject *a
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8764,7 +9208,7 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *SWIGUNUSEDPARM(self), PyObject *a
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray6 = obj5;
     if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
         PyObject_HasAttrString(sparray6, "indices") &&
@@ -9269,7 +9713,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39,&obj40,&obj41)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9306,7 +9750,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -9365,7 +9809,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9383,7 +9827,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9400,7 +9844,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9440,7 +9884,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray6 = obj5;
     if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
         PyObject_HasAttrString(sparray6, "indices") &&
@@ -9518,7 +9962,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray7 = obj6;
     if ( !( PyObject_HasAttrString(sparray7, "indptr") &&
         PyObject_HasAttrString(sparray7, "indices") &&
@@ -9907,7 +10351,7 @@ SWIGINTERN PyObject *_wrap_proximalFlat(PyObject *SWIGUNUSEDPARM(self), PyObject
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:proximalFlat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9924,7 +10368,7 @@ SWIGINTERN PyObject *_wrap_proximalFlat(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10135,7 +10579,7 @@ SWIGINTERN PyObject *_wrap_proximalTree(PyObject *SWIGUNUSEDPARM(self), PyObject
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOO:proximalTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10152,7 +10596,7 @@ SWIGINTERN PyObject *_wrap_proximalTree(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10192,7 +10636,7 @@ SWIGINTERN PyObject *_wrap_proximalTree(PyObject *SWIGUNUSEDPARM(self), PyObject
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray4 = obj3;
     if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
         PyObject_HasAttrString(sparray4, "indices") &&
@@ -10466,7 +10910,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *SWIGUNUSEDPARM(self), PyObjec
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOO:proximalGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10483,7 +10927,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *SWIGUNUSEDPARM(self), PyObjec
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10523,7 +10967,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *SWIGUNUSEDPARM(self), PyObjec
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray4 = obj3;
     if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
         PyObject_HasAttrString(sparray4, "indices") &&
@@ -10601,7 +11045,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *SWIGUNUSEDPARM(self), PyObjec
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray5 = obj4;
     if ( !( PyObject_HasAttrString(sparray5, "indptr") &&
         PyObject_HasAttrString(sparray5, "indices") &&
@@ -11135,7 +11579,7 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct(PyObject *SWIGUNUSEDPARM(self), PyO
   SpMatrix< bool > **arg5 = (SpMatrix< bool > **) 0 ;
   Vector< int > **arg6 = (Vector< int > **) 0 ;
   Vector< int > **arg7 = (Vector< int > **) 0 ;
-  int *data_temp2 ;
+  int *data_temp2 = NULL ;
   int dim_temp2 ;
   Vector< double > *data_temp4 ;
   SpMatrix< bool > *data_temp5 ;
@@ -11201,9 +11645,11 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct(PyObject *SWIGUNUSEDPARM(self), PyO
     npy_intp dims[1] = {
       *arg3 
     };
-    PyObject * array = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
+    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
+    PyArrayObject* array = (PyArrayObject*) obj;
+    
     if (!array) SWIG_fail;
-    resultobj = SWIG_Python_AppendOutput(resultobj,array);
+    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
   }
   {
     if(data_temp4 != NULL) {
@@ -11319,7 +11765,7 @@ SWIGINTERN PyObject *_wrap_im2col_sliding(PyObject *SWIGUNUSEDPARM(self), PyObje
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOO:im2col_sliding",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11336,7 +11782,7 @@ SWIGINTERN PyObject *_wrap_im2col_sliding(PyObject *SWIGUNUSEDPARM(self), PyObje
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11401,198 +11847,51 @@ static PyMethodDef SwigMethods[] = {
 	 { (char *)"skip_space", _wrap_skip_space, METH_VARARGS, NULL},
 	 { (char *)"parse_line", _wrap_parse_line, METH_VARARGS, NULL},
 	 { (char *)"intlist", _wrap_intlist, METH_VARARGS, NULL},
-	 { (char *)"sort", _wrap_sort, METH_VARARGS, (char *)"sort(Vector<(double)> v, bool mode)"},
-	 { (char *)"mult", _wrap_mult, METH_VARARGS, (char *)"\n"
-		"mult(Matrix<(double)> X, Matrix<(double)> Y, Matrix<(double)> XY, \n"
-		"    bool transX, bool transY, double a, \n"
-		"    double b)\n"
-		""},
-	 { (char *)"AAt", _wrap_AAt, METH_VARARGS, (char *)"AAt(SpMatrix<(double)> A, Matrix<(double)> B)"},
-	 { (char *)"XAt", _wrap_XAt, METH_VARARGS, (char *)"XAt(SpMatrix<(double)> A, Matrix<(double)> X, Matrix<(double)> XAt)"},
-	 { (char *)"applyBayerPattern", _wrap_applyBayerPattern, METH_VARARGS, (char *)"applyBayerPattern(Vector<(double)> v, int offset)"},
-	 { (char *)"conjugateGradient", _wrap_conjugateGradient, METH_VARARGS, (char *)"\n"
-		"conjugateGradient(Matrix<(double)> A, Vector<(double)> b, Vector<(double)> x, \n"
-		"    double tol, int itermax)\n"
-		""},
-	 { (char *)"invSym", _wrap_invSym, METH_VARARGS, (char *)"invSym(Matrix<(double)> A)"},
-	 { (char *)"normalize", _wrap_normalize, METH_VARARGS, (char *)"normalize(Matrix<(double)> A)"},
-	 { (char *)"sparseProject", _wrap_sparseProject, METH_VARARGS, (char *)"\n"
-		"sparseProject(Matrix<(double)> U, Matrix<(double)> V, double thrs, \n"
-		"    int mode, double lambda1, double lambda2, double lambda3, \n"
-		"    bool pos, int numThreads)\n"
-		""},
-	 { (char *)"lassoD", _wrap_lassoD, METH_VARARGS, (char *)"\n"
-		"lassoD(Matrix<(double)> X, Matrix<(double)> D, bool return_reg_path, \n"
-		"    int L, double constraint, double lambda2, \n"
-		"    constraint_type mode, bool pos, bool ols, \n"
-		"    int numThreads, int max_length_path, bool verbose, \n"
-		"    bool cholevsky) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"lassoQq", _wrap_lassoQq, METH_VARARGS, (char *)"\n"
-		"lassoQq(Matrix<(double)> X, Matrix<(double)> Q, Matrix<(double)> q, \n"
-		"    bool return_reg_path, int L, double constraint, \n"
-		"    double lambda2, constraint_type mode, \n"
-		"    bool pos, bool ols, int numThreads, int max_length_path, \n"
-		"    bool verbose, bool cholevsky) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"lassoMask", _wrap_lassoMask, METH_VARARGS, (char *)"\n"
-		"lassoMask(Matrix<(double)> X, Matrix<(double)> D, Matrix<(bool)> B, \n"
-		"    int L, double constraint, double lambda2, \n"
-		"    constraint_type mode, bool pos, int numThreads, \n"
-		"    bool verbose) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"lassoWeighted", _wrap_lassoWeighted, METH_VARARGS, (char *)"\n"
-		"lassoWeighted(Matrix<(double)> X, Matrix<(double)> D, Matrix<(double)> W, \n"
-		"    int L, double constraint, constraint_type mode, \n"
-		"    bool pos, int numThreads, bool verbose) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"omp", _wrap_omp, METH_VARARGS, (char *)"\n"
-		"omp(Matrix<(double)> X, Matrix<(double)> D, bool return_reg_path, \n"
-		"    bool given_L, Vector<(int)> L, bool given_eps, \n"
-		"    Vector<(double)> eps, bool given_Lambda, \n"
-		"    Vector<(double)> Lambda, int numThreads) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"ompMask", _wrap_ompMask, METH_VARARGS, (char *)"\n"
-		"ompMask(Matrix<(double)> X, Matrix<(double)> D, Matrix<(bool)> B, \n"
-		"    bool return_reg_path, bool given_L, Vector<(int)> L, \n"
-		"    bool given_eps, Vector<(double)> eps, \n"
-		"    bool given_Lambda, Vector<(double)> Lambda, \n"
-		"    int numThreads) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"somp", _wrap_somp, METH_VARARGS, (char *)"\n"
-		"somp(Matrix<(double)> X, Matrix<(double)> D, Vector<(int)> groups, \n"
-		"    int LL, double eps, int numThreads) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"cd", _wrap_cd, METH_VARARGS, (char *)"\n"
-		"cd(Matrix<(double)> X, Matrix<(double)> D, SpMatrix<(double)> alpha, \n"
-		"    double lambda1, constraint_type mode, \n"
-		"    int itermax, double tol, int numThreads) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"l1L2BCD", _wrap_l1L2BCD, METH_VARARGS, (char *)"\n"
-		"l1L2BCD(Matrix<(double)> X, Matrix<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Vector<(int)> groups, double lambda1, \n"
-		"    constraint_type mode, int itermax, double tol, \n"
-		"    int numThreads)\n"
-		""},
-	 { (char *)"alltrainDL", _wrap_alltrainDL, METH_VARARGS, (char *)"\n"
-		"alltrainDL(Data<(double)> X, bool in_memory, bool return_model, \n"
-		"    Matrix<(double)> m_A, Matrix<(double)> m_B, \n"
-		"    int m_iter, Matrix<(double)> D1, Vector<(double)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, \n"
-		"    Vector<(int)> own_variables, \n"
-		"    Vector<(int)> N_own_variables, int num_threads, \n"
-		"    double tol, bool fixed_step, bool ista, \n"
-		"    int batch_size, int K, double lambda1, double lambda2, \n"
-		"    double lambda3, int iter, double t0, \n"
-		"    constraint_type mode, char name_regul, \n"
-		"    bool posAlpha, bool posD, bool expand, constraint_type_D modeD, \n"
-		"    bool whiten, bool clean, bool verbose, \n"
-		"    double gamma1, double gamma2, double rho, \n"
-		"    int iter_updateD, bool stochastic, \n"
-		"    int modeParam, bool batch, bool log, char logName) -> Matrix<(double)>\n"
-		""},
-	 { (char *)"archetypalAnalysis", _wrap_archetypalAnalysis, METH_VARARGS, (char *)"\n"
-		"archetypalAnalysis(Matrix<(double)> X, int p, bool robust, double epsilon, \n"
-		"    bool computeXtX, int stepsFISTA, int stepsAS, \n"
-		"    bool randominit, int numThreads) -> Matrix<(double)>\n"
-		""},
-	 { (char *)"archetypalAnalysisInit", _wrap_archetypalAnalysisInit, METH_VARARGS, (char *)"\n"
-		"archetypalAnalysisInit(Matrix<(double)> X, Matrix<(double)> Z0, bool robust, \n"
-		"    double epsilon, bool computeXtX, int stepsFISTA, \n"
-		"    int stepsAS, int numThreads) -> Matrix<(double)>\n"
-		""},
-	 { (char *)"decompSimplex", _wrap_decompSimplex, METH_VARARGS, (char *)"\n"
-		"decompSimplex(Matrix<(double)> X, Matrix<(double)> Z, bool computeXtX, \n"
-		"    int numThreads) -> SpMatrix<(double)>\n"
-		""},
-	 { (char *)"fistaFlat", _wrap_fistaFlat, METH_VARARGS, (char *)"\n"
-		"fistaFlat(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Matrix<(double)> alpha, \n"
-		"    Vector<(int)> groups, int num_threads, int max_it, \n"
-		"    double L0, bool fixed_step, double gamma, \n"
-		"    double _lambda, double delta, double lambda2, \n"
-		"    double lambda3, double a, double b, double c, \n"
-		"    double tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, bool admm, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    char name_loss, bool verbose, bool pos, \n"
-		"    bool clever, bool log, bool ista, bool subgrad, \n"
-		"    char logName, bool is_inner_weights, \n"
-		"    Vector<(double)> inner_weights, int size_group, \n"
-		"    bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(double)>\n"
-		""},
-	 { (char *)"fistaTree", _wrap_fistaTree, METH_VARARGS, (char *)"\n"
-		"fistaTree(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Matrix<(double)> alpha, \n"
-		"    Vector<(double)> eta_g, SpMatrix<(bool)> groups, \n"
-		"    Vector<(int)> own_variables, Vector<(int)> N_own_variables, \n"
-		"    int num_threads, int max_it, \n"
-		"    double L0, bool fixed_step, double gamma, \n"
-		"    double _lambda, double delta, double lambda2, \n"
-		"    double lambda3, double a, double b, double c, \n"
-		"    double tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, bool admm, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    char name_loss, bool verbose, bool pos, \n"
-		"    bool clever, bool log, bool ista, bool subgrad, \n"
-		"    char logName, bool is_inner_weights, \n"
-		"    Vector<(double)> inner_weights, int size_group, \n"
-		"    bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(double)>\n"
-		""},
-	 { (char *)"fistaGraph", _wrap_fistaGraph, METH_VARARGS, (char *)"\n"
-		"fistaGraph(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Matrix<(double)> alpha, \n"
-		"    Vector<(double)> eta_g, SpMatrix<(bool)> groups, \n"
-		"    SpMatrix<(bool)> groups_var, int num_threads, \n"
-		"    int max_it, double L0, bool fixed_step, \n"
-		"    double gamma, double _lambda, double delta, \n"
-		"    double lambda2, double lambda3, double a, double b, \n"
-		"    double c, double tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, \n"
-		"    bool admm, bool intercept, bool resetflow, \n"
-		"    char name_regul, char name_loss, bool verbose, \n"
-		"    bool pos, bool clever, bool log, bool ista, \n"
-		"    bool subgrad, char logName, bool is_inner_weights, \n"
-		"    Vector<(double)> inner_weights, \n"
-		"    int size_group, bool sqrt_step, bool transpose, \n"
-		"    int linesearch_mode) -> Matrix<(double)>\n"
-		""},
-	 { (char *)"proximalFlat", _wrap_proximalFlat, METH_VARARGS, (char *)"\n"
-		"proximalFlat(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(int)> groups, \n"
-		"    int num_threads, double lambda1, \n"
-		"    double lambda2, double lambda3, bool intercept, \n"
-		"    bool resetflow, char name_regul, bool verbose, \n"
-		"    bool pos, bool clever, bool eval, \n"
-		"    int size_group, bool transpose) -> Vector<(double)>\n"
-		""},
-	 { (char *)"proximalTree", _wrap_proximalTree, METH_VARARGS, (char *)"\n"
-		"proximalTree(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(double)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, \n"
-		"    Vector<(int)> own_variables, Vector<(int)> N_own_variables, \n"
-		"    int num_threads, double lambda1, \n"
-		"    double lambda2, double lambda3, bool intercept, \n"
-		"    bool resetflow, char name_regul, bool verbose, \n"
-		"    bool pos, bool clever, bool eval, int size_group, \n"
-		"    bool transpose) -> Vector<(double)>\n"
-		""},
-	 { (char *)"proximalGraph", _wrap_proximalGraph, METH_VARARGS, (char *)"\n"
-		"proximalGraph(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(double)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, \n"
-		"    SpMatrix<(bool)> groups_var, int num_threads, \n"
-		"    double lambda1, double lambda2, double lambda3, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    bool verbose, bool pos, bool clever, \n"
-		"    bool eval, int size_group, bool transpose) -> Vector<(double)>\n"
-		""},
-	 { (char *)"simpleGroupTree", _wrap_simpleGroupTree, METH_VARARGS, (char *)"simpleGroupTree(int degr) -> std::vector<(p.StructNodeElem<(double)>)>"},
-	 { (char *)"readGroupStruct", _wrap_readGroupStruct, METH_VARARGS, (char *)"readGroupStruct(char file) -> std::vector<(p.StructNodeElem<(double)>)>"},
-	 { (char *)"groupStructOfString", _wrap_groupStructOfString, METH_VARARGS, (char *)"groupStructOfString(char data) -> std::vector<(p.StructNodeElem<(double)>)>"},
-	 { (char *)"graphOfGroupStruct", _wrap_graphOfGroupStruct, METH_VARARGS, (char *)"graphOfGroupStruct(std::vector<(p.StructNodeElem<(double)>)> gstruct) -> Vector<(double)>"},
-	 { (char *)"treeOfGroupStruct", _wrap_treeOfGroupStruct, METH_VARARGS, (char *)"treeOfGroupStruct(std::vector<(p.StructNodeElem<(double)>)> gstruct) -> int"},
-	 { (char *)"im2col_sliding", _wrap_im2col_sliding, METH_VARARGS, (char *)"\n"
-		"im2col_sliding(Matrix<(double)> A, Matrix<(double)> B, int m, int n, \n"
-		"    bool RGB)\n"
-		""},
+	 { (char *)"sort", _wrap_sort, METH_VARARGS, (char *)"sort(Vector< double > * v, bool mode)"},
+	 { (char *)"mult", _wrap_mult, METH_VARARGS, (char *)"mult(Matrix< double > * X, Matrix< double > * Y, Matrix< double > * XY, bool const transX, bool const transY, double const a, double const b)"},
+	 { (char *)"AAt", _wrap_AAt, METH_VARARGS, (char *)"AAt(SpMatrix< double > * A, Matrix< double > * B)"},
+	 { (char *)"XAt", _wrap_XAt, METH_VARARGS, (char *)"XAt(SpMatrix< double > * A, Matrix< double > * X, Matrix< double > * XAt)"},
+	 { (char *)"applyBayerPattern", _wrap_applyBayerPattern, METH_VARARGS, (char *)"applyBayerPattern(Vector< double > * v, int offset)"},
+	 { (char *)"conjugateGradient", _wrap_conjugateGradient, METH_VARARGS, (char *)"conjugateGradient(Matrix< double > * A, Vector< double > * b, Vector< double > * x, double const tol, int const itermax)"},
+	 { (char *)"invSym", _wrap_invSym, METH_VARARGS, (char *)"invSym(Matrix< double > * A)"},
+	 { (char *)"normalize", _wrap_normalize, METH_VARARGS, (char *)"normalize(Matrix< double > * A)"},
+	 { (char *)"L1COEFFS_swigconstant", L1COEFFS_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L2ERROR_swigconstant", L2ERROR_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"PENALTY_swigconstant", PENALTY_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"SPARSITY_swigconstant", SPARSITY_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L2ERROR2_swigconstant", L2ERROR2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"PENALTY2_swigconstant", PENALTY2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"FISTAMODE_swigconstant", FISTAMODE_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"sparseProject", _wrap_sparseProject, METH_VARARGS, (char *)"sparseProject(Matrix< double > * U, Matrix< double > * V, double const thrs, int const mode, double const lambda1, double const lambda2, double const lambda3, bool const pos, int const numThreads)"},
+	 { (char *)"lassoD", _wrap_lassoD, METH_VARARGS, (char *)"lassoD(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double > *"},
+	 { (char *)"lassoQq", _wrap_lassoQq, METH_VARARGS, (char *)"lassoQq(Matrix< double > * X, Matrix< double > * Q, Matrix< double > * q, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double > *"},
+	 { (char *)"lassoMask", _wrap_lassoMask, METH_VARARGS, (char *)"lassoMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double > *"},
+	 { (char *)"lassoWeighted", _wrap_lassoWeighted, METH_VARARGS, (char *)"lassoWeighted(Matrix< double > * X, Matrix< double > * D, Matrix< double > * W, int L, double const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double > *"},
+	 { (char *)"omp", _wrap_omp, METH_VARARGS, (char *)"omp(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double > *"},
+	 { (char *)"ompMask", _wrap_ompMask, METH_VARARGS, (char *)"ompMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double > *"},
+	 { (char *)"somp", _wrap_somp, METH_VARARGS, (char *)"somp(Matrix< double > * X, Matrix< double > * D, Vector< int > * groups, int LL, double eps, int numThreads) -> SpMatrix< double > *"},
+	 { (char *)"cd", _wrap_cd, METH_VARARGS, (char *)"cd(Matrix< double > * X, Matrix< double > * D, SpMatrix< double > * alpha, double lambda1, constraint_type mode, int itermax, double tol, int numThreads) -> SpMatrix< double > *"},
+	 { (char *)"l1L2BCD", _wrap_l1L2BCD, METH_VARARGS, (char *)"l1L2BCD(Matrix< double > * X, Matrix< double > * D, Matrix< double > * alpha0, Vector< int > * groups, double lambda1, constraint_type mode, int itermax, double tol, int numThreads)"},
+	 { (char *)"L2_swigconstant", L2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L1L2_swigconstant", L1L2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L1L2FL_swigconstant", L1L2FL_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L1L2MU_swigconstant", L1L2MU_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"alltrainDL", _wrap_alltrainDL, METH_VARARGS, (char *)"alltrainDL(Data< double > * X, bool in_memory, bool return_model, Matrix< double > * m_A, Matrix< double > * m_B, int m_iter, Matrix< double > * D1, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, double rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< double > *"},
+	 { (char *)"archetypalAnalysis", _wrap_archetypalAnalysis, METH_VARARGS, (char *)"archetypalAnalysis(Matrix< double > * X, int p, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< double > *"},
+	 { (char *)"archetypalAnalysisInit", _wrap_archetypalAnalysisInit, METH_VARARGS, (char *)"archetypalAnalysisInit(Matrix< double > * X, Matrix< double > * Z0, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< double > *"},
+	 { (char *)"decompSimplex", _wrap_decompSimplex, METH_VARARGS, (char *)"decompSimplex(Matrix< double > * X, Matrix< double > * Z, bool computeXtX, int numThreads) -> SpMatrix< double > *"},
+	 { (char *)"fistaFlat", _wrap_fistaFlat, METH_VARARGS, (char *)"fistaFlat(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double > *"},
+	 { (char *)"fistaTree", _wrap_fistaTree, METH_VARARGS, (char *)"fistaTree(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double > *"},
+	 { (char *)"fistaGraph", _wrap_fistaGraph, METH_VARARGS, (char *)"fistaGraph(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double > *"},
+	 { (char *)"proximalFlat", _wrap_proximalFlat, METH_VARARGS, (char *)"proximalFlat(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double > *"},
+	 { (char *)"proximalTree", _wrap_proximalTree, METH_VARARGS, (char *)"proximalTree(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double > *"},
+	 { (char *)"proximalGraph", _wrap_proximalGraph, METH_VARARGS, (char *)"proximalGraph(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double > *"},
+	 { (char *)"simpleGroupTree", _wrap_simpleGroupTree, METH_VARARGS, (char *)"simpleGroupTree(int * degr) -> std::vector< StructNodeElem< double > * > *"},
+	 { (char *)"readGroupStruct", _wrap_readGroupStruct, METH_VARARGS, (char *)"readGroupStruct(char const * file) -> std::vector< StructNodeElem< double > * > *"},
+	 { (char *)"groupStructOfString", _wrap_groupStructOfString, METH_VARARGS, (char *)"groupStructOfString(char const * data) -> std::vector< StructNodeElem< double > * > *"},
+	 { (char *)"graphOfGroupStruct", _wrap_graphOfGroupStruct, METH_VARARGS, (char *)"graphOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> Vector< double > *"},
+	 { (char *)"treeOfGroupStruct", _wrap_treeOfGroupStruct, METH_VARARGS, (char *)"treeOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> int"},
+	 { (char *)"im2col_sliding", _wrap_im2col_sliding, METH_VARARGS, (char *)"im2col_sliding(Matrix< double > * A, Matrix< double > * B, int m, int n, bool RGB)"},
 	 { NULL, NULL, 0, NULL }
 };
 
@@ -11650,18 +11949,18 @@ static swig_const_info swig_const_table[] = {
 #endif
 /* -----------------------------------------------------------------------------
  * Type initialization:
- * This problem is tough by the requirement that no dynamic 
- * memory is used. Also, since swig_type_info structures store pointers to 
+ * This problem is tough by the requirement that no dynamic
+ * memory is used. Also, since swig_type_info structures store pointers to
  * swig_cast_info structures and swig_cast_info structures store pointers back
- * to swig_type_info structures, we need some lookup code at initialization. 
- * The idea is that swig generates all the structures that are needed. 
- * The runtime then collects these partially filled structures. 
- * The SWIG_InitializeModule function takes these initial arrays out of 
+ * to swig_type_info structures, we need some lookup code at initialization.
+ * The idea is that swig generates all the structures that are needed.
+ * The runtime then collects these partially filled structures.
+ * The SWIG_InitializeModule function takes these initial arrays out of
  * swig_module, and does all the lookup, filling in the swig_module.types
  * array with the correct data and linking the correct swig_cast_info
  * structures together.
  *
- * The generated swig_type_info structures are assigned staticly to an initial 
+ * The generated swig_type_info structures are assigned statically to an initial
  * array. We just loop through that array, and handle each type individually.
  * First we lookup if this type has been already loaded, and if so, use the
  * loaded structure instead of the generated one. Then we have to fill in the
@@ -11671,17 +11970,17 @@ static swig_const_info swig_const_table[] = {
  * a column is one of the swig_cast_info structures for that type.
  * The cast_initial array is actually an array of arrays, because each row has
  * a variable number of columns. So to actually build the cast linked list,
- * we find the array of casts associated with the type, and loop through it 
+ * we find the array of casts associated with the type, and loop through it
  * adding the casts to the list. The one last trick we need to do is making
  * sure the type pointer in the swig_cast_info struct is correct.
  *
- * First off, we lookup the cast->type name to see if it is already loaded. 
+ * First off, we lookup the cast->type name to see if it is already loaded.
  * There are three cases to handle:
  *  1) If the cast->type has already been loaded AND the type we are adding
  *     casting info to has not been loaded (it is in this module), THEN we
  *     replace the cast->type pointer with the type pointer that has already
  *     been loaded.
- *  2) If BOTH types (the one we are adding casting info to, and the 
+ *  2) If BOTH types (the one we are adding casting info to, and the
  *     cast->type) are loaded, THEN the cast info has already been loaded by
  *     the previous module so we just ignore it.
  *  3) Finally, if cast->type has not already been loaded, then we add that
@@ -11705,9 +12004,7 @@ SWIGRUNTIME void
 SWIG_InitializeModule(void *clientdata) {
   size_t i;
   swig_module_info *module_head, *iter;
-  int found, init;
-  
-  clientdata = clientdata;
+  int init;
   
   /* check to see if the circular list has been setup, if not, set it up */
   if (swig_module.next==0) {
@@ -11726,27 +12023,23 @@ SWIG_InitializeModule(void *clientdata) {
     /* This is the first module loaded for this interpreter */
     /* so set the swig module into the interpreter */
     SWIG_SetModule(clientdata, &swig_module);
-    module_head = &swig_module;
   } else {
     /* the interpreter has loaded a SWIG module, but has it loaded this one? */
-    found=0;
     iter=module_head;
     do {
       if (iter==&swig_module) {
-        found=1;
-        break;
+        /* Our module is already in the list, so there's nothing more to do. */
+        return;
       }
       iter=iter->next;
     } while (iter!= module_head);
     
-    /* if the is found in the list, then all is done and we may leave */
-    if (found) return;
-    /* otherwise we must add out module into the list */
+    /* otherwise we must add our module into the list */
     swig_module.next = module_head->next;
     module_head->next = &swig_module;
   }
   
-  /* When multiple interpeters are used, a module could have already been initialized in
+  /* When multiple interpreters are used, a module could have already been initialized in
        a different interpreter, but not yet have a pointer in this interpreter.
        In this case, we do not want to continue adding types... everything should be
        set up already */
@@ -11993,7 +12286,7 @@ extern "C" {
       var = var->next;
     }
     if (res == NULL && !PyErr_Occurred()) {
-      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
     }
     return res;
   }
@@ -12010,7 +12303,7 @@ extern "C" {
       var = var->next;
     }
     if (res == 1 && !PyErr_Occurred()) {
-      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
     }
     return res;
   }
@@ -12019,24 +12312,23 @@ extern "C" {
   swig_varlink_type(void) {
     static char varlink__doc__[] = "Swig var link object";
     static PyTypeObject varlink_type;
-    static int type_init = 0;  
+    static int type_init = 0;
     if (!type_init) {
-      const PyTypeObject tmp
-      = {
+      const PyTypeObject tmp = {
         /* PyObject header changed in Python 3 */
 #if PY_VERSION_HEX >= 0x03000000
-        PyVarObject_HEAD_INIT(&PyType_Type, 0)
+        PyVarObject_HEAD_INIT(NULL, 0)
 #else
         PyObject_HEAD_INIT(NULL)
-        0,                                  /* Number of items in variable part (ob_size) */
-#endif
-        (char *)"swigvarlink",              /* Type name (tp_name) */
-        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
-        0,                                  /* Itemsize (tp_itemsize) */
-        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
-        (printfunc) swig_varlink_print,     /* Print (tp_print) */
-        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
-        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
+        0,                                  /* ob_size */
+#endif
+        (char *)"swigvarlink",              /* tp_name */
+        sizeof(swig_varlinkobject),         /* tp_basicsize */
+        0,                                  /* tp_itemsize */
+        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
+        (printfunc) swig_varlink_print,     /* tp_print */
+        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
+        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
         0,                                  /* tp_compare */
         (reprfunc) swig_varlink_repr,       /* tp_repr */
         0,                                  /* tp_as_number */
@@ -12060,16 +12352,30 @@ extern "C" {
 #if PY_VERSION_HEX >= 0x02030000
         0,                                  /* tp_del */
 #endif
+#if PY_VERSION_HEX >= 0x02060000
+        0,                                  /* tp_version_tag */
+#endif
+#if PY_VERSION_HEX >= 0x03040000
+        0,                                  /* tp_finalize */
+#endif
 #ifdef COUNT_ALLOCS
-        0,0,0,0                             /* tp_alloc -> tp_next */
+        0,                                  /* tp_allocs */
+        0,                                  /* tp_frees */
+        0,                                  /* tp_maxalloc */
+#if PY_VERSION_HEX >= 0x02050000
+        0,                                  /* tp_prev */
+#endif
+        0                                   /* tp_next */
 #endif
       };
       varlink_type = tmp;
-      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
-#if PY_VERSION_HEX < 0x03000000
+      type_init = 1;
+#if PY_VERSION_HEX < 0x02020000
       varlink_type.ob_type = &PyType_Type;
+#else
+      if (PyType_Ready(&varlink_type) < 0)
+      return NULL;
 #endif
-      type_init = 1;
     }
     return &varlink_type;
   }
@@ -12120,7 +12426,7 @@ extern "C" {
     for (i = 0; constants[i].type; ++i) {
       switch(constants[i].type) {
       case SWIG_PY_POINTER:
-        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
+        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
         break;
       case SWIG_PY_BINARY:
         obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
@@ -12148,7 +12454,9 @@ extern "C" {
     size_t i;
     for (i = 0; methods[i].ml_name; ++i) {
       const char *c = methods[i].ml_doc;
-      if (c && (c = strstr(c, "swig_ptr: "))) {
+      if (!c) continue;
+      c = strstr(c, "swig_ptr: ");
+      if (c) {
         int j;
         swig_const_info *ci = 0;
         const char *name = c + 10;
@@ -12160,15 +12468,15 @@ extern "C" {
           }
         }
         if (ci) {
-          size_t shift = (ci->ptype) - types;
-          swig_type_info *ty = types_initial[shift];
-          size_t ldoc = (c - methods[i].ml_doc);
-          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
-          char *ndoc = (char*)malloc(ldoc + lptr + 10);
-          if (ndoc) {
-            char *buff = ndoc;
-            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
-            if (ptr) {
+          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
+          if (ptr) {
+            size_t shift = (ci->ptype) - types;
+            swig_type_info *ty = types_initial[shift];
+            size_t ldoc = (c - methods[i].ml_doc);
+            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
+            char *ndoc = (char*)malloc(ldoc + lptr + 10);
+            if (ndoc) {
+              char *buff = ndoc;
               strncpy(buff, methods[i].ml_doc, ldoc);
               buff += ldoc;
               strncpy(buff, "swig_ptr: ", 10);
@@ -12201,10 +12509,19 @@ PyObject*
 void
 #endif
 SWIG_init(void) {
-  PyObject *m, *d;  
+  PyObject *m, *d, *md;
 #if PY_VERSION_HEX >= 0x03000000
   static struct PyModuleDef SWIG_module = {
+# if PY_VERSION_HEX >= 0x03020000
     PyModuleDef_HEAD_INIT,
+# else
+    {
+      PyObject_HEAD_INIT(NULL)
+      NULL, /* m_init */
+      0,    /* m_index */
+      NULL, /* m_copy */
+    },
+# endif
     (char *) SWIG_name,
     NULL,
     -1,
@@ -12216,6 +12533,51 @@ SWIG_init(void) {
   };
 #endif
   
+#if defined(SWIGPYTHON_BUILTIN)
+  static SwigPyClientData SwigPyObject_clientdata = {
+    0, 0, 0, 0, 0, 0, 0
+  };
+  static PyGetSetDef this_getset_def = {
+    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
+  };
+  static SwigPyGetSet thisown_getset_closure = {
+    (PyCFunction) SwigPyObject_own,
+    (PyCFunction) SwigPyObject_own
+  };
+  static PyGetSetDef thisown_getset_def = {
+    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
+  };
+  PyObject *metatype_args;
+  PyTypeObject *builtin_pytype;
+  int builtin_base_count;
+  swig_type_info *builtin_basetype;
+  PyObject *tuple;
+  PyGetSetDescrObject *static_getset;
+  PyTypeObject *metatype;
+  SwigPyClientData *cd;
+  PyObject *public_interface, *public_symbol;
+  PyObject *this_descr;
+  PyObject *thisown_descr;
+  PyObject *self = 0;
+  int i;
+  
+  (void)builtin_pytype;
+  (void)builtin_base_count;
+  (void)builtin_basetype;
+  (void)tuple;
+  (void)static_getset;
+  (void)self;
+  
+  /* metatype is used to implement static member variables. */
+  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
+  assert(metatype_args);
+  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
+  assert(metatype);
+  Py_DECREF(metatype_args);
+  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
+  assert(PyType_Ready(metatype) >= 0);
+#endif
+  
   /* Fix SwigMethods to carry the callback ptrs when needed */
   SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
   
@@ -12224,26 +12586,53 @@ SWIG_init(void) {
 #else
   m = Py_InitModule((char *) SWIG_name, SwigMethods);
 #endif
-  d = PyModule_GetDict(m);
+  
+  md = d = PyModule_GetDict(m);
+  (void)md;
   
   SWIG_InitializeModule(0);
-  SWIG_InstallConstants(d,swig_const_table);
   
+#ifdef SWIGPYTHON_BUILTIN
+  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
+  assert(SwigPyObject_stype);
+  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
+  if (!cd) {
+    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
+    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
+  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
+    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
+# if PY_VERSION_HEX >= 0x03000000
+    return NULL;
+# else
+    return;
+# endif
+  }
+  
+  /* All objects have a 'this' attribute */
+  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
+  (void)this_descr;
+  
+  /* All objects have a 'thisown' attribute */
+  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
+  (void)thisown_descr;
+  
+  public_interface = PyList_New(0);
+  public_symbol = 0;
+  (void)public_symbol;
+  
+  PyDict_SetItemString(md, "__all__", public_interface);
+  Py_DECREF(public_interface);
+  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
+  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
+  for (i = 0; swig_const_table[i].name != 0; ++i)
+  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
+#endif
+  
+  SWIG_InstallConstants(d,swig_const_table);
   
   
   import_array();
   
-  SWIG_Python_SetConstant(d, "L1COEFFS",SWIG_From_int(static_cast< int >(L1COEFFS)));
-  SWIG_Python_SetConstant(d, "L2ERROR",SWIG_From_int(static_cast< int >(L2ERROR)));
-  SWIG_Python_SetConstant(d, "PENALTY",SWIG_From_int(static_cast< int >(PENALTY)));
-  SWIG_Python_SetConstant(d, "SPARSITY",SWIG_From_int(static_cast< int >(SPARSITY)));
-  SWIG_Python_SetConstant(d, "L2ERROR2",SWIG_From_int(static_cast< int >(L2ERROR2)));
-  SWIG_Python_SetConstant(d, "PENALTY2",SWIG_From_int(static_cast< int >(PENALTY2)));
-  SWIG_Python_SetConstant(d, "FISTAMODE",SWIG_From_int(static_cast< int >(FISTAMODE)));
-  SWIG_Python_SetConstant(d, "L2",SWIG_From_int(static_cast< int >(L2)));
-  SWIG_Python_SetConstant(d, "L1L2",SWIG_From_int(static_cast< int >(L1L2)));
-  SWIG_Python_SetConstant(d, "L1L2FL",SWIG_From_int(static_cast< int >(L1L2FL)));
-  SWIG_Python_SetConstant(d, "L1L2MU",SWIG_From_int(static_cast< int >(L1L2MU)));
 #if PY_VERSION_HEX >= 0x03000000
   return m;
 #else
diff --git spams_wrap.cpp spams_wrap.cpp
index b08b9e6..00134ed 100644
--- spams_wrap.cpp
+++ spams_wrap.cpp
@@ -1,14 +1,18 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 1.3.40
- * 
- * This file is not intended to be easily readable and contains a number of 
+ * Version 3.0.8
+ *
+ * This file is not intended to be easily readable and contains a number of
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG 
- * interface file instead. 
+ * changes to this file unless you know what you are doing--modify the SWIG
+ * interface file instead.
  * ----------------------------------------------------------------------------- */
 
+
+#ifndef SWIGPYTHON
 #define SWIGPYTHON
+#endif
+
 #define SWIG_PYTHON_DIRECTOR_NO_VTABLE
 
 
@@ -66,28 +70,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__)) 
+#     define SWIGUNUSED __attribute__ ((__unused__))
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__)) 
+#   define SWIGUNUSED __attribute__ ((__unused__))
 # else
-#   define SWIGUNUSED 
+#   define SWIGUNUSED
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif 
+# endif
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
 # endif
 #endif
 
@@ -130,7 +134,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif 
+# endif
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
@@ -143,10 +147,29 @@ template <typename T> T SwigValueInit() {
 # define _SCL_SECURE_NO_DEPRECATE
 #endif
 
+/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
+#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
+# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
+#endif
 
+/* Intel's compiler complains if a variable which was never initialised is
+ * cast to void, which is a common idiom which we use to indicate that we
+ * are aware a variable isn't used.  So we just silence that warning.
+ * See: https://github.com/swig/swig/issues/192 for more discussion.
+ */
+#ifdef __INTEL_COMPILER
+# pragma warning disable 592
+#endif
 
-/* Python.h has to appear first */
-#include <Python.h>
+
+#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
+/* Use debug wrappers with the Python release dll */
+# undef _DEBUG
+# include <Python.h>
+# define _DEBUG
+#else
+# include <Python.h>
+#endif
 
 /* -----------------------------------------------------------------------------
  * swigrun.swg
@@ -172,7 +195,7 @@ template <typename T> T SwigValueInit() {
   You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
   creating a static or dynamic library from the SWIG runtime code.
   In 99.9% of the cases, SWIG just needs to declare them as 'static'.
-  
+
   But only do this if strictly necessary, ie, if you have problems
   with your compiler or suchlike.
 */
@@ -198,16 +221,16 @@ template <typename T> T SwigValueInit() {
 #define SWIG_POINTER_OWN           0x1
 
 
-/* 
+/*
    Flags/methods for returning states.
-   
-   The SWIG conversion methods, as ConvertPtr, return and integer 
+
+   The SWIG conversion methods, as ConvertPtr, return an integer
    that tells if the conversion was successful or not. And if not,
    an error code can be returned (see swigerrors.swg for the codes).
-   
+
    Use the following macros/flags to set or process the returning
    states.
-   
+
    In old versions of SWIG, code such as the following was usually written:
 
      if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
@@ -240,23 +263,23 @@ template <typename T> T SwigValueInit() {
     } else {
       // fail code
     }
-    
+
    I.e., now SWIG_ConvertPtr can return new objects and you can
    identify the case and take care of the deallocation. Of course that
    also requires SWIG_ConvertPtr to return new result values, such as
 
-      int SWIG_ConvertPtr(obj, ptr,...) {         
-        if (<obj is ok>) {			       
-          if (<need new object>) {		       
-            *ptr = <ptr to new allocated object>; 
-            return SWIG_NEWOBJ;		       
-          } else {				       
-            *ptr = <ptr to old object>;	       
-            return SWIG_OLDOBJ;		       
-          } 				       
-        } else {				       
-          return SWIG_BADOBJ;		       
-        }					       
+      int SWIG_ConvertPtr(obj, ptr,...) {
+        if (<obj is ok>) {
+          if (<need new object>) {
+            *ptr = <ptr to new allocated object>;
+            return SWIG_NEWOBJ;
+          } else {
+            *ptr = <ptr to old object>;
+            return SWIG_OLDOBJ;
+          }
+        } else {
+          return SWIG_BADOBJ;
+        }
       }
 
    Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
@@ -270,17 +293,17 @@ template <typename T> T SwigValueInit() {
        int fooi(int);
 
    and you call
- 
+
       food(1)   // cast rank '1'  (1 -> 1.0)
       fooi(1)   // cast rank '0'
 
    just use the SWIG_AddCast()/SWIG_CheckState()
 */
 
-#define SWIG_OK                    (0) 
+#define SWIG_OK                    (0)
 #define SWIG_ERROR                 (-1)
 #define SWIG_IsOK(r)               (r >= 0)
-#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  
+#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)
 
 /* The CastRankLimit says how many bits are used for the cast rank */
 #define SWIG_CASTRANKLIMIT         (1 << 8)
@@ -311,14 +334,14 @@ template <typename T> T SwigValueInit() {
 #  endif
 #  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
 #  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
-SWIGINTERNINLINE int SWIG_AddCast(int r) { 
+SWIGINTERNINLINE int SWIG_AddCast(int r) {
   return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
 }
-SWIGINTERNINLINE int SWIG_CheckState(int r) { 
-  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
+SWIGINTERNINLINE int SWIG_CheckState(int r) {
+  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
 }
 #else /* no cast-rank mode */
-#  define SWIG_AddCast
+#  define SWIG_AddCast(r) (r)
 #  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
 #endif
 
@@ -362,7 +385,7 @@ typedef struct swig_module_info {
   void                    *clientdata;		/* Language specific module data */
 } swig_module_info;
 
-/* 
+/*
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.
 
@@ -382,18 +405,18 @@ SWIG_TypeNameComp(const char *f1, const char *l1,
 
 /*
   Check type equivalence in a name list like <name1>|<name2>|...
-  Return 0 if not equal, 1 if equal
+  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
 */
 SWIGRUNTIME int
-SWIG_TypeEquiv(const char *nb, const char *tb) {
-  int equiv = 0;
+SWIG_TypeCmp(const char *nb, const char *tb) {
+  int equiv = 1;
   const char* te = tb + strlen(tb);
   const char* ne = nb;
-  while (!equiv && *ne) {
+  while (equiv != 0 && *ne) {
     for (nb = ne; *ne; ++ne) {
       if (*ne == '|') break;
     }
-    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
+    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
     if (*ne) ++ne;
   }
   return equiv;
@@ -401,24 +424,13 @@ SWIG_TypeEquiv(const char *nb, const char *tb) {
 
 /*
   Check type equivalence in a name list like <name1>|<name2>|...
-  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
+  Return 0 if not equal, 1 if equal
 */
 SWIGRUNTIME int
-SWIG_TypeCompare(const char *nb, const char *tb) {
-  int equiv = 0;
-  const char* te = tb + strlen(tb);
-  const char* ne = nb;
-  while (!equiv && *ne) {
-    for (nb = ne; *ne; ++ne) {
-      if (*ne == '|') break;
-    }
-    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
-    if (*ne) ++ne;
-  }
-  return equiv;
+SWIG_TypeEquiv(const char *nb, const char *tb) {
+  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
 }
 
-
 /*
   Check the typename
 */
@@ -446,7 +458,7 @@ SWIG_TypeCheck(const char *c, swig_type_info *ty) {
   return 0;
 }
 
-/* 
+/*
   Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
 */
 SWIGRUNTIME swig_cast_info *
@@ -481,7 +493,7 @@ SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
   return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
 }
 
-/* 
+/*
    Dynamic pointer casting. Down an inheritance hierarchy
 */
 SWIGRUNTIME swig_type_info *
@@ -525,7 +537,7 @@ SWIG_TypePrettyName(const swig_type_info *type) {
     return type->name;
 }
 
-/* 
+/*
    Set the clientdata field for a type
 */
 SWIGRUNTIME void
@@ -533,14 +545,14 @@ SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
   swig_cast_info *cast = ti->cast;
   /* if (ti->clientdata == clientdata) return; */
   ti->clientdata = clientdata;
-  
+
   while (cast) {
     if (!cast->converter) {
       swig_type_info *tc = cast->type;
       if (!tc->clientdata) {
 	SWIG_TypeClientData(tc, clientdata);
       }
-    }    
+    }
     cast = cast->next;
   }
 }
@@ -549,31 +561,31 @@ SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
   SWIG_TypeClientData(ti, clientdata);
   ti->owndata = 1;
 }
-  
+
 /*
   Search for a swig_type_info structure only by mangled name
   Search is a O(log #types)
-  
-  We start searching at module start, and finish searching when start == end.  
+
+  We start searching at module start, and finish searching when start == end.
   Note: if start == end at the beginning of the function, we go all the way around
   the circular list.
 */
 SWIGRUNTIME swig_type_info *
-SWIG_MangledTypeQueryModule(swig_module_info *start, 
-                            swig_module_info *end, 
+SWIG_MangledTypeQueryModule(swig_module_info *start,
+                            swig_module_info *end,
 		            const char *name) {
   swig_module_info *iter = start;
   do {
     if (iter->size) {
-      register size_t l = 0;
-      register size_t r = iter->size - 1;
+      size_t l = 0;
+      size_t r = iter->size - 1;
       do {
 	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
-	register size_t i = (l + r) >> 1; 
+	size_t i = (l + r) >> 1;
 	const char *iname = iter->types[i]->name;
 	if (iname) {
-	  register int compare = strcmp(name, iname);
-	  if (compare == 0) {	    
+	  int compare = strcmp(name, iname);
+	  if (compare == 0) {
 	    return iter->types[i];
 	  } else if (compare < 0) {
 	    if (i) {
@@ -598,14 +610,14 @@ SWIG_MangledTypeQueryModule(swig_module_info *start,
   Search for a swig_type_info structure for either a mangled name or a human readable name.
   It first searches the mangled names of the types, which is a O(log #types)
   If a type is not found it then searches the human readable names, which is O(#types).
-  
-  We start searching at module start, and finish searching when start == end.  
+
+  We start searching at module start, and finish searching when start == end.
   Note: if start == end at the beginning of the function, we go all the way around
   the circular list.
 */
 SWIGRUNTIME swig_type_info *
-SWIG_TypeQueryModule(swig_module_info *start, 
-                     swig_module_info *end, 
+SWIG_TypeQueryModule(swig_module_info *start,
+                     swig_module_info *end,
 		     const char *name) {
   /* STEP 1: Search the name field using binary search */
   swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
@@ -616,7 +628,7 @@ SWIG_TypeQueryModule(swig_module_info *start,
        of the str field (the human readable name) */
     swig_module_info *iter = start;
     do {
-      register size_t i = 0;
+      size_t i = 0;
       for (; i < iter->size; ++i) {
 	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
 	  return iter->types[i];
@@ -624,56 +636,56 @@ SWIG_TypeQueryModule(swig_module_info *start,
       iter = iter->next;
     } while (iter != end);
   }
-  
+
   /* neither found a match */
   return 0;
 }
 
-/* 
+/*
    Pack binary data into a string
 */
 SWIGRUNTIME char *
 SWIG_PackData(char *c, void *ptr, size_t sz) {
   static const char hex[17] = "0123456789abcdef";
-  register const unsigned char *u = (unsigned char *) ptr;
-  register const unsigned char *eu =  u + sz;
+  const unsigned char *u = (unsigned char *) ptr;
+  const unsigned char *eu =  u + sz;
   for (; u != eu; ++u) {
-    register unsigned char uu = *u;
+    unsigned char uu = *u;
     *(c++) = hex[(uu & 0xf0) >> 4];
     *(c++) = hex[uu & 0xf];
   }
   return c;
 }
 
-/* 
+/*
    Unpack binary data from a string
 */
 SWIGRUNTIME const char *
 SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
-  register unsigned char *u = (unsigned char *) ptr;
-  register const unsigned char *eu = u + sz;
+  unsigned char *u = (unsigned char *) ptr;
+  const unsigned char *eu = u + sz;
   for (; u != eu; ++u) {
-    register char d = *(c++);
-    register unsigned char uu;
+    char d = *(c++);
+    unsigned char uu;
     if ((d >= '0') && (d <= '9'))
       uu = ((d - '0') << 4);
     else if ((d >= 'a') && (d <= 'f'))
       uu = ((d - ('a'-10)) << 4);
-    else 
+    else
       return (char *) 0;
     d = *(c++);
     if ((d >= '0') && (d <= '9'))
       uu |= (d - '0');
     else if ((d >= 'a') && (d <= 'f'))
       uu |= (d - ('a'-10));
-    else 
+    else
       return (char *) 0;
     *u = uu;
   }
   return c;
 }
 
-/* 
+/*
    Pack 'void *' into a string buffer.
 */
 SWIGRUNTIME char *
@@ -733,18 +745,18 @@ SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
 #endif
 
 /*  Errors in SWIG */
-#define  SWIG_UnknownError    	   -1 
-#define  SWIG_IOError        	   -2 
-#define  SWIG_RuntimeError   	   -3 
-#define  SWIG_IndexError     	   -4 
-#define  SWIG_TypeError      	   -5 
-#define  SWIG_DivisionByZero 	   -6 
-#define  SWIG_OverflowError  	   -7 
-#define  SWIG_SyntaxError    	   -8 
-#define  SWIG_ValueError     	   -9 
+#define  SWIG_UnknownError    	   -1
+#define  SWIG_IOError        	   -2
+#define  SWIG_RuntimeError   	   -3
+#define  SWIG_IndexError     	   -4
+#define  SWIG_TypeError      	   -5
+#define  SWIG_DivisionByZero 	   -6
+#define  SWIG_OverflowError  	   -7
+#define  SWIG_SyntaxError    	   -8
+#define  SWIG_ValueError     	   -9
 #define  SWIG_SystemError    	   -10
 #define  SWIG_AttributeError 	   -11
-#define  SWIG_MemoryError    	   -12 
+#define  SWIG_MemoryError    	   -12
 #define  SWIG_NullReferenceError   -13
 
 
@@ -756,7 +768,16 @@ SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
 #define PyInt_Check(x) PyLong_Check(x)
 #define PyInt_AsLong(x) PyLong_AsLong(x)
 #define PyInt_FromLong(x) PyLong_FromLong(x)
+#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
+#define PyString_Check(name) PyBytes_Check(name)
+#define PyString_FromString(x) PyUnicode_FromString(x)
 #define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
+#define PyString_AsString(str) PyBytes_AsString(str)
+#define PyString_Size(str) PyBytes_Size(str)	
+#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
+#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
+#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
+#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)
 
 #endif
 
@@ -896,6 +917,67 @@ PyObject *PyBool_FromLong(long ok)
 typedef int Py_ssize_t;
 # define PY_SSIZE_T_MAX INT_MAX
 # define PY_SSIZE_T_MIN INT_MIN
+typedef inquiry lenfunc;
+typedef intargfunc ssizeargfunc;
+typedef intintargfunc ssizessizeargfunc;
+typedef intobjargproc ssizeobjargproc;
+typedef intintobjargproc ssizessizeobjargproc;
+typedef getreadbufferproc readbufferproc;
+typedef getwritebufferproc writebufferproc;
+typedef getsegcountproc segcountproc;
+typedef getcharbufferproc charbufferproc;
+static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
+{
+  long result = 0;
+  PyObject *i = PyNumber_Int(x);
+  if (i) {
+    result = PyInt_AsLong(i);
+    Py_DECREF(i);
+  }
+  return result;
+}
+#endif
+
+#if PY_VERSION_HEX < 0x02050000
+#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
+#endif
+
+#if PY_VERSION_HEX < 0x02040000
+#define Py_VISIT(op)				\
+  do { 						\
+    if (op) {					\
+      int vret = visit((op), arg);		\
+      if (vret)					\
+        return vret;				\
+    }						\
+  } while (0)
+#endif
+
+#if PY_VERSION_HEX < 0x02030000
+typedef struct {
+  PyTypeObject type;
+  PyNumberMethods as_number;
+  PyMappingMethods as_mapping;
+  PySequenceMethods as_sequence;
+  PyBufferProcs as_buffer;
+  PyObject *name, *slots;
+} PyHeapTypeObject;
+#endif
+
+#if PY_VERSION_HEX < 0x02030000
+typedef destructor freefunc;
+#endif
+
+#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
+     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
+     (PY_MAJOR_VERSION > 3))
+# define SWIGPY_USE_CAPSULE
+# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
+#endif
+
+#if PY_VERSION_HEX < 0x03020000
+#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
+#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
 #endif
 
 /* -----------------------------------------------------------------------------
@@ -1042,9 +1124,6 @@ SWIG_Python_AddErrorMsg(const char* mesg)
 
 #ifdef __cplusplus
 extern "C" {
-#if 0
-} /* cc-mode */
-#endif
 #endif
 
 /* -----------------------------------------------------------------------------
@@ -1070,27 +1149,24 @@ typedef struct swig_const_info {
  * Wrapper of PyInstanceMethod_New() used in Python 3
  * It is exported to the generated module, used for -fastproxy
  * ----------------------------------------------------------------------------- */
-SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
-{
 #if PY_VERSION_HEX >= 0x03000000
+SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
+{
   return PyInstanceMethod_New(func);
+}
 #else
+SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
+{
   return NULL;
-#endif
 }
+#endif
 
 #ifdef __cplusplus
-#if 0
-{ /* cc-mode */
-#endif
 }
 #endif
 
 
 /* -----------------------------------------------------------------------------
- * See the LICENSE file for information on copyright, usage and redistribution
- * of SWIG, and the README file for authors - http://www.swig.org/release.html.
- *
  * pyrun.swg
  *
  * This file contains the runtime support for Python modules
@@ -1105,7 +1181,15 @@ SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
 #define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
 #define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
 #define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
-#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
+
+#ifdef SWIGPYTHON_BUILTIN
+#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
+#else
+#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
+#endif
+
+#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
+
 #define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
 #define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
 #define swig_owntype                                    int
@@ -1120,7 +1204,7 @@ SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
 
 /* for C or C++ function pointers */
 #define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
-#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)
+#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)
 
 /* for C++ member pointers, ie, member methods */
 #define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
@@ -1129,7 +1213,7 @@ SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
 
 /* Runtime API */
 
-#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
+#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
 #define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
 #define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)
 
@@ -1155,7 +1239,7 @@ SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
 SWIGINTERN void 
 SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
   SWIG_PYTHON_THREAD_BEGIN_BLOCK;
-  PyErr_SetString(errtype, (char *) msg);
+  PyErr_SetString(errtype, msg);
   SWIG_PYTHON_THREAD_END_BLOCK;
 }
 
@@ -1163,12 +1247,41 @@ SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
 
 /* Set a constant value */
 
+#if defined(SWIGPYTHON_BUILTIN)
+
+SWIGINTERN void
+SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
+  PyObject *s = PyString_InternFromString(key);
+  PyList_Append(seq, s);
+  Py_DECREF(s);
+}
+
+SWIGINTERN void
+SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
+#if PY_VERSION_HEX < 0x02030000
+  PyDict_SetItemString(d, (char *)name, obj);
+#else
+  PyDict_SetItemString(d, name, obj);
+#endif
+  Py_DECREF(obj);
+  if (public_interface)
+    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
+}
+
+#else
+
 SWIGINTERN void
 SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
-  PyDict_SetItemString(d, (char*) name, obj);
+#if PY_VERSION_HEX < 0x02030000
+  PyDict_SetItemString(d, (char *)name, obj);
+#else
+  PyDict_SetItemString(d, name, obj);
+#endif
   Py_DECREF(obj);                            
 }
 
+#endif
+
 /* Append a value to the result obj */
 
 SWIGINTERN PyObject*
@@ -1216,7 +1329,7 @@ SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
 
 /* Unpack the argument tuple */
 
-SWIGINTERN int
+SWIGINTERN Py_ssize_t
 SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
 {
   if (!args) {
@@ -1229,10 +1342,18 @@ SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssi
     }
   }  
   if (!PyTuple_Check(args)) {
+    if (min <= 1 && max >= 1) {
+      Py_ssize_t i;
+      objs[0] = args;
+      for (i = 1; i < max; ++i) {
+	objs[i] = 0;
+      }
+      return 2;
+    }
     PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
     return 0;
   } else {
-    register Py_ssize_t l = PyTuple_GET_SIZE(args);
+    Py_ssize_t l = PyTuple_GET_SIZE(args);
     if (l < min) {
       PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
 		   name, (min == max ? "" : "at least "), (int)min, (int)l);
@@ -1242,7 +1363,7 @@ SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssi
 		   name, (min == max ? "" : "at most "), (int)max, (int)l);
       return 0;
     } else {
-      register int i;
+      Py_ssize_t i;
       for (i = 0; i < l; ++i) {
 	objs[i] = PyTuple_GET_ITEM(args, i);
       }
@@ -1281,11 +1402,11 @@ SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssi
 
 #define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)
 
+#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
+#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)
+
 #ifdef __cplusplus
 extern "C" {
-#if 0
-} /* cc-mode */
-#endif
 #endif
 
 /*  How to access Py_None */
@@ -1336,6 +1457,7 @@ typedef struct {
   PyObject *destroy;
   int delargs;
   int implicitconv;
+  PyTypeObject *pytype;
 } SwigPyClientData;
 
 SWIGRUNTIMEINLINE int 
@@ -1402,13 +1524,13 @@ SwigPyClientData_New(PyObject* obj)
       data->delargs = 0;
     }
     data->implicitconv = 0;
+    data->pytype = 0;
     return data;
   }
 }
 
 SWIGRUNTIME void 
-SwigPyClientData_Del(SwigPyClientData* data)
-{
+SwigPyClientData_Del(SwigPyClientData *data) {
   Py_XDECREF(data->newraw);
   Py_XDECREF(data->newargs);
   Py_XDECREF(data->destroy);
@@ -1422,8 +1544,28 @@ typedef struct {
   swig_type_info *ty;
   int own;
   PyObject *next;
+#ifdef SWIGPYTHON_BUILTIN
+  PyObject *dict;
+#endif
 } SwigPyObject;
 
+
+#ifdef SWIGPYTHON_BUILTIN
+
+SWIGRUNTIME PyObject *
+SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
+{
+  SwigPyObject *sobj = (SwigPyObject *)v;
+
+  if (!sobj->dict)
+    sobj->dict = PyDict_New();
+
+  Py_INCREF(sobj->dict);
+  return sobj->dict;
+}
+
+#endif
+
 SWIGRUNTIME PyObject *
 SwigPyObject_long(SwigPyObject *v)
 {
@@ -1472,54 +1614,26 @@ SwigPyObject_repr(SwigPyObject *v, PyObject *args)
 #endif
 {
   const char *name = SWIG_TypePrettyName(v->ty);
-  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
+  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
   if (v->next) {
-#ifdef METH_NOARGS
+# ifdef METH_NOARGS
     PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
-#else
+# else
     PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
-#endif
-#if PY_VERSION_HEX >= 0x03000000
+# endif
+# if PY_VERSION_HEX >= 0x03000000
     PyObject *joined = PyUnicode_Concat(repr, nrep);
     Py_DecRef(repr);
     Py_DecRef(nrep);
     repr = joined;
-#else
+# else
     PyString_ConcatAndDel(&repr,nrep);
-#endif
+# endif
   }
   return repr;  
 }
 
 SWIGRUNTIME int
-SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
-{
-  char *str;
-#ifdef METH_NOARGS
-  PyObject *repr = SwigPyObject_repr(v);
-#else
-  PyObject *repr = SwigPyObject_repr(v, NULL);
-#endif
-  if (repr) {
-    str = SWIG_Python_str_AsChar(repr); 
-    fputs(str, fp);
-    SWIG_Python_str_DelForPy3(str);
-    Py_DECREF(repr);
-    return 0; 
-  } else {
-    return 1; 
-  }
-}
-
-SWIGRUNTIME PyObject *
-SwigPyObject_str(SwigPyObject *v)
-{
-  char result[SWIG_BUFFER_SIZE];
-  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
-    SWIG_Python_str_FromChar(result) : 0;
-}
-
-SWIGRUNTIME int
 SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
 {
   void *i = v->ptr;
@@ -1536,27 +1650,43 @@ SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
     Py_INCREF(Py_NotImplemented);
     return Py_NotImplemented;
   }
-  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
-    res = Py_True;
-  else
-    res = Py_False;
-  Py_INCREF(res);
+  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
   return res;  
 }
 
 
-SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);
+SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);
 
+#ifdef SWIGPYTHON_BUILTIN
+static swig_type_info *SwigPyObject_stype = 0;
 SWIGRUNTIME PyTypeObject*
 SwigPyObject_type(void) {
-  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
+    SwigPyClientData *cd;
+    assert(SwigPyObject_stype);
+    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
+    assert(cd);
+    assert(cd->pytype);
+    return cd->pytype;
+}
+#else
+SWIGRUNTIME PyTypeObject*
+SwigPyObject_type(void) {
+  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
   return type;
 }
+#endif
 
 SWIGRUNTIMEINLINE int
 SwigPyObject_Check(PyObject *op) {
+#ifdef SWIGPYTHON_BUILTIN
+  PyTypeObject *target_tp = SwigPyObject_type();
+  if (PyType_IsSubtype(op->ob_type, target_tp))
+    return 1;
+  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
+#else
   return (Py_TYPE(op) == SwigPyObject_type())
     || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
+#endif
 }
 
 SWIGRUNTIME PyObject *
@@ -1574,16 +1704,32 @@ SwigPyObject_dealloc(PyObject *v)
     if (destroy) {
       /* destroy is always a VARARGS method */
       PyObject *res;
+
+      /* PyObject_CallFunction() has the potential to silently drop
+         the active active exception.  In cases of unnamed temporary
+         variable or where we just finished iterating over a generator
+         StopIteration will be active right now, and this needs to
+         remain true upon return from SwigPyObject_dealloc.  So save
+         and restore. */
+      
+      PyObject *val = NULL, *type = NULL, *tb = NULL;
+      PyErr_Fetch(&val, &type, &tb);
+
       if (data->delargs) {
-	/* we need to create a temporary object to carry the destroy operation */
-	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
-	res = SWIG_Python_CallFunctor(destroy, tmp);
-	Py_DECREF(tmp);
+        /* we need to create a temporary object to carry the destroy operation */
+        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
+        res = SWIG_Python_CallFunctor(destroy, tmp);
+        Py_DECREF(tmp);
       } else {
-	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
-	PyObject *mself = PyCFunction_GET_SELF(destroy);
-	res = ((*meth)(mself, v));
+        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
+        PyObject *mself = PyCFunction_GET_SELF(destroy);
+        res = ((*meth)(mself, v));
       }
+      if (!res)
+        PyErr_WriteUnraisable(destroy);
+
+      PyErr_Restore(val, type, tb);
+
       Py_XDECREF(res);
     } 
 #if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
@@ -1607,6 +1753,7 @@ SwigPyObject_append(PyObject* v, PyObject* next)
   next = tmp;
 #endif
   if (!SwigPyObject_Check(next)) {
+    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
     return NULL;
   }
   sobj->next = next;
@@ -1660,8 +1807,10 @@ SwigPyObject_own(PyObject *v, PyObject *args)
   PyObject *val = 0;
 #if (PY_VERSION_HEX < 0x02020000)
   if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
-#else
+#elif (PY_VERSION_HEX < 0x02050000)
   if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
+#else
+  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
 #endif
     {
       return NULL;
@@ -1693,7 +1842,7 @@ SwigPyObject_own(PyObject *v, PyObject *args)
 static PyMethodDef
 swigobject_methods[] = {
   {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
-  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
+  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
   {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
   {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
   {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
@@ -1704,7 +1853,7 @@ swigobject_methods[] = {
 static PyMethodDef
 swigobject_methods[] = {
   {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
-  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
+  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
   {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
   {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
   {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
@@ -1722,9 +1871,9 @@ SwigPyObject_getattr(SwigPyObject *sobj,char *name)
 #endif
 
 SWIGRUNTIME PyTypeObject*
-_PySwigObject_type(void) {
+SwigPyObject_TypeOnce(void) {
   static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
-  
+
   static PyNumberMethods SwigPyObject_as_number = {
     (binaryfunc)0, /*nb_add*/
     (binaryfunc)0, /*nb_subtract*/
@@ -1760,7 +1909,9 @@ _PySwigObject_type(void) {
     (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
     (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
 #endif
-#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
+#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
+#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
 #elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
@@ -1771,85 +1922,98 @@ _PySwigObject_type(void) {
 #endif
   };
 
-  static PyTypeObject swigpyobject_type;  
+  static PyTypeObject swigpyobject_type;
   static int type_init = 0;
   if (!type_init) {
-    const PyTypeObject tmp
-      = {
-	/* PyObject header changed in Python 3 */
+    const PyTypeObject tmp = {
+      /* PyObject header changed in Python 3 */
 #if PY_VERSION_HEX >= 0x03000000
-	PyVarObject_HEAD_INIT(&PyType_Type, 0)
-#else    
-	PyObject_HEAD_INIT(NULL)
-	0,				    /* ob_size */
+      PyVarObject_HEAD_INIT(NULL, 0)
+#else
+      PyObject_HEAD_INIT(NULL)
+      0,                                    /* ob_size */
 #endif
-	(char *)"SwigPyObject",		    /* tp_name */
-	sizeof(SwigPyObject),		    /* tp_basicsize */
-	0,			            /* tp_itemsize */
-	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
-	(printfunc)SwigPyObject_print,	    /* tp_print */
+      (char *)"SwigPyObject",               /* tp_name */
+      sizeof(SwigPyObject),                 /* tp_basicsize */
+      0,                                    /* tp_itemsize */
+      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
+      0,				    /* tp_print */
 #if PY_VERSION_HEX < 0x02020000
-	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
+      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
 #else
-	(getattrfunc)0,			    /* tp_getattr */ 
+      (getattrfunc)0,                       /* tp_getattr */
 #endif
-	(setattrfunc)0,			    /* tp_setattr */ 
+      (setattrfunc)0,                       /* tp_setattr */
 #if PY_VERSION_HEX >= 0x03000000
     0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
 #else
-	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
+      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
 #endif
-	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
-	&SwigPyObject_as_number,	    /* tp_as_number */
-	0,				    /* tp_as_sequence */
-	0,				    /* tp_as_mapping */
-	(hashfunc)0,			    /* tp_hash */
-	(ternaryfunc)0,			    /* tp_call */
-	(reprfunc)SwigPyObject_str,	    /* tp_str */
-	PyObject_GenericGetAttr,            /* tp_getattro */
-	0,				    /* tp_setattro */
-	0,		                    /* tp_as_buffer */
-	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
-	swigobject_doc, 	            /* tp_doc */        
-	0,                                  /* tp_traverse */
-	0,                                  /* tp_clear */
-	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
-	0,                                  /* tp_weaklistoffset */
+      (reprfunc)SwigPyObject_repr,          /* tp_repr */
+      &SwigPyObject_as_number,              /* tp_as_number */
+      0,                                    /* tp_as_sequence */
+      0,                                    /* tp_as_mapping */
+      (hashfunc)0,                          /* tp_hash */
+      (ternaryfunc)0,                       /* tp_call */
+      0,				    /* tp_str */
+      PyObject_GenericGetAttr,              /* tp_getattro */
+      0,                                    /* tp_setattro */
+      0,                                    /* tp_as_buffer */
+      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
+      swigobject_doc,                       /* tp_doc */
+      0,                                    /* tp_traverse */
+      0,                                    /* tp_clear */
+      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
+      0,                                    /* tp_weaklistoffset */
 #if PY_VERSION_HEX >= 0x02020000
-	0,                                  /* tp_iter */
-	0,                                  /* tp_iternext */
-	swigobject_methods,		    /* tp_methods */ 
-	0,			            /* tp_members */
-	0,				    /* tp_getset */	    	
-	0,			            /* tp_base */	        
-	0,				    /* tp_dict */	    	
-	0,				    /* tp_descr_get */  	
-	0,				    /* tp_descr_set */  	
-	0,				    /* tp_dictoffset */ 	
-	0,				    /* tp_init */	    	
-	0,				    /* tp_alloc */	    	
-	0,			            /* tp_new */	    	
-	0,	                            /* tp_free */	   
-	0,                                  /* tp_is_gc */  
-	0,				    /* tp_bases */   
-	0,				    /* tp_mro */
-	0,				    /* tp_cache */   
-	0,				    /* tp_subclasses */
-	0,				    /* tp_weaklist */
+      0,                                    /* tp_iter */
+      0,                                    /* tp_iternext */
+      swigobject_methods,                   /* tp_methods */
+      0,                                    /* tp_members */
+      0,                                    /* tp_getset */
+      0,                                    /* tp_base */
+      0,                                    /* tp_dict */
+      0,                                    /* tp_descr_get */
+      0,                                    /* tp_descr_set */
+      0,                                    /* tp_dictoffset */
+      0,                                    /* tp_init */
+      0,                                    /* tp_alloc */
+      0,                                    /* tp_new */
+      0,                                    /* tp_free */
+      0,                                    /* tp_is_gc */
+      0,                                    /* tp_bases */
+      0,                                    /* tp_mro */
+      0,                                    /* tp_cache */
+      0,                                    /* tp_subclasses */
+      0,                                    /* tp_weaklist */
 #endif
 #if PY_VERSION_HEX >= 0x02030000
-	0,                                  /* tp_del */
+      0,                                    /* tp_del */
+#endif
+#if PY_VERSION_HEX >= 0x02060000
+      0,                                    /* tp_version_tag */
+#endif
+#if PY_VERSION_HEX >= 0x03040000
+      0,                                    /* tp_finalize */
 #endif
 #ifdef COUNT_ALLOCS
-	0,0,0,0                             /* tp_alloc -> tp_next */
+      0,                                    /* tp_allocs */
+      0,                                    /* tp_frees */
+      0,                                    /* tp_maxalloc */
+#if PY_VERSION_HEX >= 0x02050000
+      0,                                    /* tp_prev */
 #endif
-      };
+      0                                     /* tp_next */
+#endif
+    };
     swigpyobject_type = tmp;
-    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
-#if PY_VERSION_HEX < 0x03000000
+    type_init = 1;
+#if PY_VERSION_HEX < 0x02020000
     swigpyobject_type.ob_type = &PyType_Type;
+#else
+    if (PyType_Ready(&swigpyobject_type) < 0)
+      return NULL;
 #endif
-    type_init = 1;
   }
   return &swigpyobject_type;
 }
@@ -1923,17 +2087,17 @@ SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
   return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
 }
 
-SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);
+SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);
 
 SWIGRUNTIME PyTypeObject*
 SwigPyPacked_type(void) {
-  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
+  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
   return type;
 }
 
 SWIGRUNTIMEINLINE int
 SwigPyPacked_Check(PyObject *op) {
-  return ((op)->ob_type == _PySwigPacked_type()) 
+  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
     || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
 }
 
@@ -1948,83 +2112,96 @@ SwigPyPacked_dealloc(PyObject *v)
 }
 
 SWIGRUNTIME PyTypeObject*
-_PySwigPacked_type(void) {
+SwigPyPacked_TypeOnce(void) {
   static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
   static PyTypeObject swigpypacked_type;
-  static int type_init = 0;  
+  static int type_init = 0;
   if (!type_init) {
-    const PyTypeObject tmp
-      = {
-    /* PyObject header changed in Python 3 */
+    const PyTypeObject tmp = {
+      /* PyObject header changed in Python 3 */
 #if PY_VERSION_HEX>=0x03000000
-    PyVarObject_HEAD_INIT(&PyType_Type, 0)
+      PyVarObject_HEAD_INIT(NULL, 0)
 #else
-	PyObject_HEAD_INIT(NULL)
-    0,				    /* ob_size */	
+      PyObject_HEAD_INIT(NULL)
+      0,                                    /* ob_size */
 #endif
-	(char *)"SwigPyPacked",		    /* tp_name */	
-	sizeof(SwigPyPacked),		    /* tp_basicsize */	
-	0,				    /* tp_itemsize */	
-	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
-	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
-	(getattrfunc)0,			    /* tp_getattr */ 	
-	(setattrfunc)0,			    /* tp_setattr */ 	
+      (char *)"SwigPyPacked",               /* tp_name */
+      sizeof(SwigPyPacked),                 /* tp_basicsize */
+      0,                                    /* tp_itemsize */
+      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
+      (printfunc)SwigPyPacked_print,        /* tp_print */
+      (getattrfunc)0,                       /* tp_getattr */
+      (setattrfunc)0,                       /* tp_setattr */
 #if PY_VERSION_HEX>=0x03000000
-    0, /* tp_reserved in 3.0.1 */
+      0, /* tp_reserved in 3.0.1 */
 #else
-    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
+      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
 #endif
-	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
-	0,	                            /* tp_as_number */
-	0,				    /* tp_as_sequence */
-	0,				    /* tp_as_mapping */
-	(hashfunc)0,			    /* tp_hash */
-	(ternaryfunc)0,			    /* tp_call */
-	(reprfunc)SwigPyPacked_str,	    /* tp_str */
-	PyObject_GenericGetAttr,            /* tp_getattro */
-	0,				    /* tp_setattro */
-	0,		                    /* tp_as_buffer */
-	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
-	swigpacked_doc, 	            /* tp_doc */
-	0,                                  /* tp_traverse */
-	0,                                  /* tp_clear */
-	0,                                  /* tp_richcompare */
-	0,                                  /* tp_weaklistoffset */
+      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
+      0,                                    /* tp_as_number */
+      0,                                    /* tp_as_sequence */
+      0,                                    /* tp_as_mapping */
+      (hashfunc)0,                          /* tp_hash */
+      (ternaryfunc)0,                       /* tp_call */
+      (reprfunc)SwigPyPacked_str,           /* tp_str */
+      PyObject_GenericGetAttr,              /* tp_getattro */
+      0,                                    /* tp_setattro */
+      0,                                    /* tp_as_buffer */
+      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
+      swigpacked_doc,                       /* tp_doc */
+      0,                                    /* tp_traverse */
+      0,                                    /* tp_clear */
+      0,                                    /* tp_richcompare */
+      0,                                    /* tp_weaklistoffset */
 #if PY_VERSION_HEX >= 0x02020000
-	0,                                  /* tp_iter */
-	0,                                  /* tp_iternext */
-	0,		                    /* tp_methods */ 
-	0,			            /* tp_members */
-	0,				    /* tp_getset */	    	
-	0,			            /* tp_base */	        
-	0,				    /* tp_dict */	    	
-	0,				    /* tp_descr_get */  	
-	0,				    /* tp_descr_set */  	
-	0,				    /* tp_dictoffset */ 	
-	0,				    /* tp_init */	    	
-	0,				    /* tp_alloc */	    	
-	0,			            /* tp_new */	    	
-	0, 	                            /* tp_free */	   
-        0,                                  /* tp_is_gc */  
-	0,				    /* tp_bases */   
-	0,				    /* tp_mro */
-	0,				    /* tp_cache */   
- 	0,				    /* tp_subclasses */
-	0,				    /* tp_weaklist */
+      0,                                    /* tp_iter */
+      0,                                    /* tp_iternext */
+      0,                                    /* tp_methods */
+      0,                                    /* tp_members */
+      0,                                    /* tp_getset */
+      0,                                    /* tp_base */
+      0,                                    /* tp_dict */
+      0,                                    /* tp_descr_get */
+      0,                                    /* tp_descr_set */
+      0,                                    /* tp_dictoffset */
+      0,                                    /* tp_init */
+      0,                                    /* tp_alloc */
+      0,                                    /* tp_new */
+      0,                                    /* tp_free */
+      0,                                    /* tp_is_gc */
+      0,                                    /* tp_bases */
+      0,                                    /* tp_mro */
+      0,                                    /* tp_cache */
+      0,                                    /* tp_subclasses */
+      0,                                    /* tp_weaklist */
 #endif
 #if PY_VERSION_HEX >= 0x02030000
-	0,                                  /* tp_del */
+      0,                                    /* tp_del */
+#endif
+#if PY_VERSION_HEX >= 0x02060000
+      0,                                    /* tp_version_tag */
+#endif
+#if PY_VERSION_HEX >= 0x03040000
+      0,                                    /* tp_finalize */
 #endif
 #ifdef COUNT_ALLOCS
-	0,0,0,0                             /* tp_alloc -> tp_next */
+      0,                                    /* tp_allocs */
+      0,                                    /* tp_frees */
+      0,                                    /* tp_maxalloc */
+#if PY_VERSION_HEX >= 0x02050000
+      0,                                    /* tp_prev */
 #endif
-      };
+      0                                     /* tp_next */
+#endif
+    };
     swigpypacked_type = tmp;
-    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
-#if PY_VERSION_HEX < 0x03000000
+    type_init = 1;
+#if PY_VERSION_HEX < 0x02020000
     swigpypacked_type.ob_type = &PyType_Type;
+#else
+    if (PyType_Ready(&swigpypacked_type) < 0)
+      return NULL;
 #endif
-    type_init = 1;
   }
   return &swigpypacked_type;
 }
@@ -2071,10 +2248,13 @@ _SWIG_This(void)
     return SWIG_Python_str_FromChar("this");
 }
 
+static PyObject *swig_this = NULL;
+
 SWIGRUNTIME PyObject *
 SWIG_This(void)
 {
-  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
+  if (swig_this == NULL)
+    swig_this = _SWIG_This();
   return swig_this;
 }
 
@@ -2088,50 +2268,65 @@ SWIG_This(void)
 SWIGRUNTIME SwigPyObject *
 SWIG_Python_GetSwigThis(PyObject *pyobj) 
 {
-  if (SwigPyObject_Check(pyobj)) {
+  PyObject *obj;
+
+  if (SwigPyObject_Check(pyobj))
     return (SwigPyObject *) pyobj;
-  } else {
-    PyObject *obj = 0;
+
+#ifdef SWIGPYTHON_BUILTIN
+  (void)obj;
+# ifdef PyWeakref_CheckProxy
+  if (PyWeakref_CheckProxy(pyobj)) {
+    pyobj = PyWeakref_GET_OBJECT(pyobj);
+    if (pyobj && SwigPyObject_Check(pyobj))
+      return (SwigPyObject*) pyobj;
+  }
+# endif
+  return NULL;
+#else
+
+  obj = 0;
+
 #if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
-    if (PyInstance_Check(pyobj)) {
-      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
+  if (PyInstance_Check(pyobj)) {
+    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
+  } else {
+    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
+    if (dictptr != NULL) {
+      PyObject *dict = *dictptr;
+      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
     } else {
-      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
-      if (dictptr != NULL) {
-	PyObject *dict = *dictptr;
-	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
-      } else {
 #ifdef PyWeakref_CheckProxy
-	if (PyWeakref_CheckProxy(pyobj)) {
-	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
-	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
-	}
+      if (PyWeakref_CheckProxy(pyobj)) {
+	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
+	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
+      }
 #endif
-	obj = PyObject_GetAttr(pyobj,SWIG_This());
-	if (obj) {
-	  Py_DECREF(obj);
-	} else {
-	  if (PyErr_Occurred()) PyErr_Clear();
-	  return 0;
-	}
+      obj = PyObject_GetAttr(pyobj,SWIG_This());
+      if (obj) {
+	Py_DECREF(obj);
+      } else {
+	if (PyErr_Occurred()) PyErr_Clear();
+	return 0;
       }
     }
+  }
 #else
-    obj = PyObject_GetAttr(pyobj,SWIG_This());
-    if (obj) {
-      Py_DECREF(obj);
-    } else {
-      if (PyErr_Occurred()) PyErr_Clear();
-      return 0;
-    }
+  obj = PyObject_GetAttr(pyobj,SWIG_This());
+  if (obj) {
+    Py_DECREF(obj);
+  } else {
+    if (PyErr_Occurred()) PyErr_Clear();
+    return 0;
+  }
 #endif
-    if (obj && !SwigPyObject_Check(obj)) {
-      /* a PyObject is called 'this', try to get the 'real this'
-	 SwigPyObject from it */ 
-      return SWIG_Python_GetSwigThis(obj);
-    }
-    return (SwigPyObject *)obj;
+  if (obj && !SwigPyObject_Check(obj)) {
+    /* a PyObject is called 'this', try to get the 'real this'
+       SwigPyObject from it */ 
+    return SWIG_Python_GetSwigThis(obj);
   }
+  return (SwigPyObject *)obj;
+#endif
 }
 
 /* Acquire a pointer value */
@@ -2153,91 +2348,105 @@ SWIG_Python_AcquirePtr(PyObject *obj, int own) {
 
 SWIGRUNTIME int
 SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
-  if (!obj) return SWIG_ERROR;
-  if (obj == Py_None) {
-    if (ptr) *ptr = 0;
+  int res;
+  SwigPyObject *sobj;
+  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;
+
+  if (!obj)
+    return SWIG_ERROR;
+  if (obj == Py_None && !implicit_conv) {
+    if (ptr)
+      *ptr = 0;
     return SWIG_OK;
-  } else {
-    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
+  }
+
+  res = SWIG_ERROR;
+
+  sobj = SWIG_Python_GetSwigThis(obj);
+  if (own)
+    *own = 0;
+  while (sobj) {
+    void *vptr = sobj->ptr;
+    if (ty) {
+      swig_type_info *to = sobj->ty;
+      if (to == ty) {
+        /* no type cast needed */
+        if (ptr) *ptr = vptr;
+        break;
+      } else {
+        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
+        if (!tc) {
+          sobj = (SwigPyObject *)sobj->next;
+        } else {
+          if (ptr) {
+            int newmemory = 0;
+            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
+            if (newmemory == SWIG_CAST_NEW_MEMORY) {
+              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
+              if (own)
+                *own = *own | SWIG_CAST_NEW_MEMORY;
+            }
+          }
+          break;
+        }
+      }
+    } else {
+      if (ptr) *ptr = vptr;
+      break;
+    }
+  }
+  if (sobj) {
     if (own)
-      *own = 0;
-    while (sobj) {
-      void *vptr = sobj->ptr;
-      if (ty) {
-	swig_type_info *to = sobj->ty;
-	if (to == ty) {
-	  /* no type cast needed */
-	  if (ptr) *ptr = vptr;
-	  break;
-	} else {
-	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
-	  if (!tc) {
-	    sobj = (SwigPyObject *)sobj->next;
-	  } else {
-	    if (ptr) {
-              int newmemory = 0;
-              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
-              if (newmemory == SWIG_CAST_NEW_MEMORY) {
-                assert(own);
-                if (own)
-                  *own = *own | SWIG_CAST_NEW_MEMORY;
+      *own = *own | sobj->own;
+    if (flags & SWIG_POINTER_DISOWN) {
+      sobj->own = 0;
+    }
+    res = SWIG_OK;
+  } else {
+    if (implicit_conv) {
+      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
+      if (data && !data->implicitconv) {
+        PyObject *klass = data->klass;
+        if (klass) {
+          PyObject *impconv;
+          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
+          impconv = SWIG_Python_CallFunctor(klass, obj);
+          data->implicitconv = 0;
+          if (PyErr_Occurred()) {
+            PyErr_Clear();
+            impconv = 0;
+          }
+          if (impconv) {
+            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
+            if (iobj) {
+              void *vptr;
+              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
+              if (SWIG_IsOK(res)) {
+                if (ptr) {
+                  *ptr = vptr;
+                  /* transfer the ownership to 'ptr' */
+                  iobj->own = 0;
+                  res = SWIG_AddCast(res);
+                  res = SWIG_AddNewMask(res);
+                } else {
+                  res = SWIG_AddCast(res);		    
+                }
               }
             }
-	    break;
-	  }
-	}
-      } else {
-	if (ptr) *ptr = vptr;
-	break;
+            Py_DECREF(impconv);
+          }
+        }
       }
     }
-    if (sobj) {
-      if (own)
-        *own = *own | sobj->own;
-      if (flags & SWIG_POINTER_DISOWN) {
-	sobj->own = 0;
-      }
-      return SWIG_OK;
-    } else {
-      int res = SWIG_ERROR;
-      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
-	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
-	if (data && !data->implicitconv) {
-	  PyObject *klass = data->klass;
-	  if (klass) {
-	    PyObject *impconv;
-	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
-	    impconv = SWIG_Python_CallFunctor(klass, obj);
-	    data->implicitconv = 0;
-	    if (PyErr_Occurred()) {
-	      PyErr_Clear();
-	      impconv = 0;
-	    }
-	    if (impconv) {
-	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
-	      if (iobj) {
-		void *vptr;
-		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
-		if (SWIG_IsOK(res)) {
-		  if (ptr) {
-		    *ptr = vptr;
-		    /* transfer the ownership to 'ptr' */
-		    iobj->own = 0;
-		    res = SWIG_AddCast(res);
-		    res = SWIG_AddNewMask(res);
-		  } else {
-		    res = SWIG_AddCast(res);		    
-		  }
-		}
-	      }
-	      Py_DECREF(impconv);
-	    }
-	  }
-	}
-      }
-      return res;
+    if (!SWIG_IsOK(res) && obj == Py_None) {
+      if (ptr)
+        *ptr = 0;
+      if (PyErr_Occurred())
+        PyErr_Clear();
+      res = SWIG_OK;
     }
   }
+  return res;
 }
 
 /* Convert a function ptr value */
@@ -2323,24 +2532,30 @@ SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
     }
   } else {
 #if PY_VERSION_HEX >= 0x03000000
-    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
-    PyObject_SetAttr(inst, SWIG_This(), swig_this);
-    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
+    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
+    if (inst) {
+      PyObject_SetAttr(inst, SWIG_This(), swig_this);
+      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
+    }
 #else
     PyObject *dict = PyDict_New();
-    PyDict_SetItem(dict, SWIG_This(), swig_this);
-    inst = PyInstance_NewRaw(data->newargs, dict);
-    Py_DECREF(dict);
+    if (dict) {
+      PyDict_SetItem(dict, SWIG_This(), swig_this);
+      inst = PyInstance_NewRaw(data->newargs, dict);
+      Py_DECREF(dict);
+    }
 #endif
   }
   return inst;
 #else
 #if (PY_VERSION_HEX >= 0x02010000)
-  PyObject *inst;
+  PyObject *inst = 0;
   PyObject *dict = PyDict_New();
-  PyDict_SetItem(dict, SWIG_This(), swig_this);
-  inst = PyInstance_NewRaw(data->newargs, dict);
-  Py_DECREF(dict);
+  if (dict) {
+    PyDict_SetItem(dict, SWIG_This(), swig_this);
+    inst = PyInstance_NewRaw(data->newargs, dict);
+    Py_DECREF(dict);
+  }
   return (PyObject *) inst;
 #else
   PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
@@ -2391,7 +2606,7 @@ SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
 SWIGINTERN PyObject *
 SWIG_Python_InitShadowInstance(PyObject *args) {
   PyObject *obj[2];
-  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
+  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
     return NULL;
   } else {
     SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
@@ -2407,22 +2622,55 @@ SWIG_Python_InitShadowInstance(PyObject *args) {
 /* Create a new pointer object */
 
 SWIGRUNTIME PyObject *
-SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
-  if (!ptr) {
+SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
+  SwigPyClientData *clientdata;
+  PyObject * robj;
+  int own;
+
+  if (!ptr)
     return SWIG_Py_Void();
-  } else {
-    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
-    PyObject *robj = SwigPyObject_New(ptr, type, own);
-    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
-    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
-      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
-      if (inst) {
-	Py_DECREF(robj);
-	robj = inst;
+
+  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
+  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
+  if (clientdata && clientdata->pytype) {
+    SwigPyObject *newobj;
+    if (flags & SWIG_BUILTIN_TP_INIT) {
+      newobj = (SwigPyObject*) self;
+      if (newobj->ptr) {
+        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
+        while (newobj->next)
+	  newobj = (SwigPyObject *) newobj->next;
+        newobj->next = next_self;
+        newobj = (SwigPyObject *)next_self;
+#ifdef SWIGPYTHON_BUILTIN
+        newobj->dict = 0;
+#endif
       }
+    } else {
+      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
+#ifdef SWIGPYTHON_BUILTIN
+      newobj->dict = 0;
+#endif
     }
-    return robj;
+    if (newobj) {
+      newobj->ptr = ptr;
+      newobj->ty = type;
+      newobj->own = own;
+      newobj->next = 0;
+      return (PyObject*) newobj;
+    }
+    return SWIG_Py_Void();
+  }
+
+  assert(!(flags & SWIG_BUILTIN_TP_INIT));
+
+  robj = SwigPyObject_New(ptr, type, own);
+  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
+    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
+    Py_DECREF(robj);
+    robj = inst;
   }
+  return robj;
 }
 
 /* Create a new packed object */
@@ -2441,15 +2689,19 @@ void *SWIG_ReturnGlobalTypeList(void *);
 #endif
 
 SWIGRUNTIME swig_module_info *
-SWIG_Python_GetModule(void) {
+SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
   static void *type_pointer = (void *)0;
   /* first check if module already created */
   if (!type_pointer) {
 #ifdef SWIG_LINK_RUNTIME
     type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
 #else
+# ifdef SWIGPY_USE_CAPSULE
+    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
+# else
     type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
 				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
+# endif
     if (PyErr_Occurred()) {
       PyErr_Clear();
       type_pointer = (void *)0;
@@ -2467,13 +2719,11 @@ PyModule_AddObject(PyObject *m, char *name, PyObject *o)
 {
   PyObject *dict;
   if (!PyModule_Check(m)) {
-    PyErr_SetString(PyExc_TypeError,
-		    "PyModule_AddObject() needs module as first arg");
+    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
     return SWIG_ERROR;
   }
   if (!o) {
-    PyErr_SetString(PyExc_TypeError,
-		    "PyModule_AddObject() needs non-NULL value");
+    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
     return SWIG_ERROR;
   }
   
@@ -2492,9 +2742,17 @@ PyModule_AddObject(PyObject *m, char *name, PyObject *o)
 #endif
 
 SWIGRUNTIME void
+#ifdef SWIGPY_USE_CAPSULE
+SWIG_Python_DestroyModule(PyObject *obj)
+#else
 SWIG_Python_DestroyModule(void *vptr)
+#endif
 {
+#ifdef SWIGPY_USE_CAPSULE
+  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
+#else
   swig_module_info *swig_module = (swig_module_info *) vptr;
+#endif
   swig_type_info **types = swig_module->types;
   size_t i;
   for (i =0; i < swig_module->size; ++i) {
@@ -2505,25 +2763,33 @@ SWIG_Python_DestroyModule(void *vptr)
     }
   }
   Py_DECREF(SWIG_This());
+  swig_this = NULL;
 }
 
 SWIGRUNTIME void
 SWIG_Python_SetModule(swig_module_info *swig_module) {
-  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */
-
 #if PY_VERSION_HEX >= 0x03000000
  /* Add a dummy module object into sys.modules */
   PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
 #else
-  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
-				   swig_empty_runtime_method_table);
+  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
+  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
 #endif
+#ifdef SWIGPY_USE_CAPSULE
+  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
+  if (pointer && module) {
+    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
+  } else {
+    Py_XDECREF(pointer);
+  }
+#else
   PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
   if (pointer && module) {
     PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
   } else {
     Py_XDECREF(pointer);
   }
+#endif
 }
 
 /* The python cached type query */
@@ -2541,12 +2807,20 @@ SWIG_Python_TypeQuery(const char *type)
   PyObject *obj = PyDict_GetItem(cache, key);
   swig_type_info *descriptor;
   if (obj) {
+#ifdef SWIGPY_USE_CAPSULE
+    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
+#else
     descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
+#endif
   } else {
-    swig_module_info *swig_module = SWIG_Python_GetModule();
+    swig_module_info *swig_module = SWIG_GetModule(0);
     descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
     if (descriptor) {
+#ifdef SWIGPY_USE_CAPSULE
+      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
+#else
       obj = PyCObject_FromVoidPtr(descriptor, NULL);
+#endif
       PyDict_SetItem(cache, key, obj);
       Py_DECREF(obj);
     }
@@ -2607,7 +2881,7 @@ SwigPyObject_GetDesc(PyObject *self)
 {
   SwigPyObject *v = (SwigPyObject *)self;
   swig_type_info *ty = v ? v->ty : 0;
-  return ty ? ty->str : (char*)"";
+  return ty ? ty->str : "";
 }
 
 SWIGRUNTIME void
@@ -2650,7 +2924,7 @@ SWIG_Python_TypeError(const char *type, PyObject *obj)
 
 /* Convert a pointer value, signal an exception on a type mismatch */
 SWIGRUNTIME void *
-SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
+SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
   void *result;
   if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
     PyErr_Clear();
@@ -2664,11 +2938,61 @@ SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags)
   return result;
 }
 
+#ifdef SWIGPYTHON_BUILTIN
+SWIGRUNTIME int
+SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
+  PyTypeObject *tp = obj->ob_type;
+  PyObject *descr;
+  PyObject *encoded_name;
+  descrsetfunc f;
+  int res = -1;
+
+# ifdef Py_USING_UNICODE
+  if (PyString_Check(name)) {
+    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
+    if (!name)
+      return -1;
+  } else if (!PyUnicode_Check(name))
+# else
+  if (!PyString_Check(name))
+# endif
+  {
+    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
+    return -1;
+  } else {
+    Py_INCREF(name);
+  }
+
+  if (!tp->tp_dict) {
+    if (PyType_Ready(tp) < 0)
+      goto done;
+  }
 
-#ifdef __cplusplus
-#if 0
-{ /* cc-mode */
+  descr = _PyType_Lookup(tp, name);
+  f = NULL;
+  if (descr != NULL)
+    f = descr->ob_type->tp_descr_set;
+  if (!f) {
+    if (PyString_Check(name)) {
+      encoded_name = name;
+      Py_INCREF(name);
+    } else {
+      encoded_name = PyUnicode_AsUTF8String(name);
+    }
+    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
+    Py_DECREF(encoded_name);
+  } else {
+    res = f(descr, obj, value);
+  }
+  
+  done:
+  Py_DECREF(name);
+  return res;
+}
 #endif
+
+
+#ifdef __cplusplus
 }
 #endif
 
@@ -2720,7 +3044,7 @@ static swig_module_info swig_module = {swig_types, 10, 0, 0, 0, 0};
 #endif
 #define SWIG_name    "_spams_wrap"
 
-#define SWIGVERSION 0x010340 
+#define SWIGVERSION 0x030008 
 #define SWIG_VERSION SWIGVERSION
 
 
@@ -2743,27 +3067,35 @@ namespace swig {
 
     SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
     {
+      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
       Py_XINCREF(_obj);      
+      SWIG_PYTHON_THREAD_END_BLOCK;
     }
     
     SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
     {
       if (initial_ref) {
+        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
         Py_XINCREF(_obj);
+        SWIG_PYTHON_THREAD_END_BLOCK;
       }
     }
     
     SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
     {
+      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
       Py_XINCREF(item._obj);
       Py_XDECREF(_obj);
       _obj = item._obj;
+      SWIG_PYTHON_THREAD_END_BLOCK;
       return *this;      
     }
     
     ~SwigPtr_PyObject() 
     {
+      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
       Py_XDECREF(_obj);
+      SWIG_PYTHON_THREAD_END_BLOCK;
     }
     
     operator PyObject *() const
@@ -2817,12 +3149,16 @@ extern "C" {
 
 
 #ifndef SWIG_FILE_WITH_INIT
-#  define NO_IMPORT_ARRAY
+#define NO_IMPORT_ARRAY
 #endif
 #include "stdio.h"
+#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
 #include <numpy/arrayobject.h>
 
 
+#include <complex> 
+
+
 #include <limits.h>
 #if !defined(SWIG_NO_LLONG_MAX)
 # if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
@@ -2840,9 +3176,11 @@ SWIG_AsVal_double (PyObject *obj, double *val)
   if (PyFloat_Check(obj)) {
     if (val) *val = PyFloat_AsDouble(obj);
     return SWIG_OK;
+#if PY_VERSION_HEX < 0x03000000
   } else if (PyInt_Check(obj)) {
     if (val) *val = PyInt_AsLong(obj);
     return SWIG_OK;
+#endif
   } else if (PyLong_Check(obj)) {
     double v = PyLong_AsDouble(obj);
     if (!PyErr_Occurred()) {
@@ -2916,16 +3254,20 @@ SWIG_CanCastAsInteger(double *d, double min, double max) {
 SWIGINTERN int
 SWIG_AsVal_long (PyObject *obj, long* val)
 {
+#if PY_VERSION_HEX < 0x03000000
   if (PyInt_Check(obj)) {
     if (val) *val = PyInt_AsLong(obj);
     return SWIG_OK;
-  } else if (PyLong_Check(obj)) {
+  } else
+#endif
+  if (PyLong_Check(obj)) {
     long v = PyLong_AsLong(obj);
     if (!PyErr_Occurred()) {
       if (val) *val = v;
       return SWIG_OK;
     } else {
       PyErr_Clear();
+      return SWIG_OverflowError;
     }
   }
 #ifdef SWIG_PYTHON_CAST_MODE
@@ -3021,18 +3363,17 @@ SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
 #else
 	if (*alloc == SWIG_NEWOBJ) 
 #endif
-	  {
-	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
-	    *alloc = SWIG_NEWOBJ;
-	  }
-	else {
+	{
+	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
+	  *alloc = SWIG_NEWOBJ;
+	} else {
 	  *cptr = cstr;
 	  *alloc = SWIG_OLDOBJ;
 	}
       } else {
-        #if PY_VERSION_HEX>=0x03000000
-        assert(0); /* Should never reach here in Python 3 */
-        #endif
+	#if PY_VERSION_HEX>=0x03000000
+	assert(0); /* Should never reach here in Python 3 */
+	#endif
 	*cptr = SWIG_Python_str_AsChar(obj);
       }
     }
@@ -3042,6 +3383,30 @@ SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
 #endif
     return SWIG_OK;
   } else {
+#if defined(SWIG_PYTHON_2_UNICODE)
+#if PY_VERSION_HEX<0x03000000
+    if (PyUnicode_Check(obj)) {
+      char *cstr; Py_ssize_t len;
+      if (!alloc && cptr) {
+        return SWIG_RuntimeError;
+      }
+      obj = PyUnicode_AsUTF8String(obj);
+      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
+        if (cptr) {
+          if (alloc) *alloc = SWIG_NEWOBJ;
+          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
+        }
+        if (psize) *psize = len + 1;
+
+        Py_XDECREF(obj);
+        return SWIG_OK;
+      } else {
+        Py_XDECREF(obj);
+      }
+    }
+#endif
+#endif
+
     swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
     if (pchar_descriptor) {
       void* vptr = 0;
@@ -3067,12 +3432,16 @@ SWIG_FromCharPtrAndSize(const char* carray, size_t size)
     if (size > INT_MAX) {
       swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
       return pchar_descriptor ? 
-	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
+	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
     } else {
 #if PY_VERSION_HEX >= 0x03000000
-      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
+#if PY_VERSION_HEX >= 0x03010000
+      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
+#else
+      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
+#endif
 #else
-      return PyString_FromStringAndSize(carray, static_cast< int >(size));
+      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
 #endif
     }
   } else {
@@ -3088,85 +3457,57 @@ SWIG_FromCharPtr(const char *cptr)
 }
 
 
-  #define SWIG_From_long   PyInt_FromLong 
-
-
-SWIGINTERNINLINE PyObject *
-SWIG_From_int  (int value)
-{    
-  return SWIG_From_long  (value);
+SWIGINTERNINLINE PyObject*
+  SWIG_From_int  (int value)
+{
+  return PyInt_FromLong((long) value);
 }
 
 
-/* Support older NumPy data type names
-*/
-#if NDARRAY_VERSION < 0x01000000
-#define NPY_BOOL          PyArray_BOOL
-#define NPY_BYTE          PyArray_BYTE
-#define NPY_UBYTE         PyArray_UBYTE
-#define NPY_SHORT         PyArray_SHORT
-#define NPY_USHORT        PyArray_USHORT
-#define NPY_INT           PyArray_INT
-#define NPY_UINT          PyArray_UINT
-#define NPY_LONG          PyArray_LONG
-#define NPY_ULONG         PyArray_ULONG
-#define NPY_LONGLONG      PyArray_LONGLONG
-#define NPY_ULONGLONG     PyArray_ULONGLONG
-#define NPY_FLOAT         PyArray_FLOAT
-#define NPY_DOUBLE        PyArray_DOUBLE
-#define NPY_LONGDOUBLE    PyArray_LONGDOUBLE
-#define NPY_CFLOAT        PyArray_CFLOAT
-#define NPY_CDOUBLE       PyArray_CDOUBLE
-#define NPY_CLONGDOUBLE   PyArray_CLONGDOUBLE
-#define NPY_OBJECT        PyArray_OBJECT
-#define NPY_STRING        PyArray_STRING
-#define NPY_UNICODE       PyArray_UNICODE
-#define NPY_VOID          PyArray_VOID
-#define NPY_NTYPES        PyArray_NTYPES
-#define NPY_NOTYPE        PyArray_NOTYPE
-#define NPY_CHAR          PyArray_CHAR
-#define NPY_USERDEF       PyArray_USERDEF
-#define npy_intp          intp
-
-#define NPY_MAX_BYTE      MAX_BYTE
-#define NPY_MIN_BYTE      MIN_BYTE
-#define NPY_MAX_UBYTE     MAX_UBYTE
-#define NPY_MAX_SHORT     MAX_SHORT
-#define NPY_MIN_SHORT     MIN_SHORT
-#define NPY_MAX_USHORT    MAX_USHORT
-#define NPY_MAX_INT       MAX_INT
-#define NPY_MIN_INT       MIN_INT
-#define NPY_MAX_UINT      MAX_UINT
-#define NPY_MAX_LONG      MAX_LONG
-#define NPY_MIN_LONG      MIN_LONG
-#define NPY_MAX_ULONG     MAX_ULONG
-#define NPY_MAX_LONGLONG  MAX_LONGLONG
-#define NPY_MIN_LONGLONG  MIN_LONGLONG
-#define NPY_MAX_ULONGLONG MAX_ULONGLONG
-#define NPY_MAX_INTP      MAX_INTP
-#define NPY_MIN_INTP      MIN_INTP
-
-#define NPY_FARRAY        FARRAY
-#define NPY_F_CONTIGUOUS  F_CONTIGUOUS
+#if NPY_API_VERSION < 0x00000007
+#define NPY_ARRAY_DEFAULT NPY_DEFAULT
+#define NPY_ARRAY_FARRAY  NPY_FARRAY
+#define NPY_FORTRANORDER  NPY_FORTRAN
 #endif
 
 
 /* Macros to extract array attributes.
  */
-#define is_array(a)            ((a) && PyArray_Check((PyArrayObject *)a))
-#define array_type(a)          (int)(PyArray_TYPE(a))
-#define array_numdims(a)       (((PyArrayObject *)a)->nd)
-#define array_dimensions(a)    (((PyArrayObject *)a)->dimensions)
-#define array_size(a,i)        (((PyArrayObject *)a)->dimensions[i])
-#define array_data(a)          (((PyArrayObject *)a)->data)
-#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS(a))
-#define array_is_native(a)     (PyArray_ISNOTSWAPPED(a))
-#define array_is_fortran(a)    (PyArray_ISFORTRAN(a))
+#if NPY_API_VERSION < 0x00000007
+#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
+#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
+#define array_numdims(a)       (((PyArrayObject*)a)->nd)
+#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
+#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
+#define array_strides(a)       (((PyArrayObject*)a)->strides)
+#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
+#define array_data(a)          (((PyArrayObject*)a)->data)
+#define array_descr(a)         (((PyArrayObject*)a)->descr)
+#define array_flags(a)         (((PyArrayObject*)a)->flags)
+#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
+#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
+#else
+#define is_array(a)            ((a) && PyArray_Check(a))
+#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
+#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
+#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
+#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
+#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
+#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
+#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
+#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
+#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
+#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
+#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
+#endif
+#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
+#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
 
 
   /* Given a PyObject, return a string describing its type.
    */
-  const char* pytype_string(PyObject* py_obj) {
+  const char* pytype_string(PyObject* py_obj)
+  {
     if (py_obj == NULL          ) return "C NULL value";
     if (py_obj == Py_None       ) return "Python None" ;
     if (PyCallable_Check(py_obj)) return "callable"    ;
@@ -3176,42 +3517,73 @@ SWIG_From_int  (int value)
     if (PyDict_Check(    py_obj)) return "dict"        ;
     if (PyList_Check(    py_obj)) return "list"        ;
     if (PyTuple_Check(   py_obj)) return "tuple"       ;
+#if PY_MAJOR_VERSION < 3
     if (PyFile_Check(    py_obj)) return "file"        ;
     if (PyModule_Check(  py_obj)) return "module"      ;
     if (PyInstance_Check(py_obj)) return "instance"    ;
+#endif
 
-    return "unkown type";
+    return "unknown type";
   }
 
   /* Given a NumPy typecode, return a string describing the type.
    */
-  const char* typecode_string(int typecode) {
-    static const char* type_names[25] = {"bool", "byte", "unsigned byte",
-                                   "short", "unsigned short", "int",
-                                   "unsigned int", "long", "unsigned long",
-                                   "long long", "unsigned long long",
-                                   "float", "double", "long double",
-                                   "complex float", "complex double",
-                                   "complex long double", "object",
-                                   "string", "unicode", "void", "ntypes",
-                                   "notype", "char", "unknown"};
+  const char* typecode_string(int typecode)
+  {
+    static const char* type_names[25] = {"bool",
+                                         "byte",
+                                         "unsigned byte",
+                                         "short",
+                                         "unsigned short",
+                                         "int",
+                                         "unsigned int",
+                                         "long",
+                                         "unsigned long",
+                                         "long long",
+                                         "unsigned long long",
+                                         "float",
+                                         "double",
+                                         "long double",
+                                         "complex float",
+                                         "complex double",
+                                         "complex long double",
+                                         "object",
+                                         "string",
+                                         "unicode",
+                                         "void",
+                                         "ntypes",
+                                         "notype",
+                                         "char",
+                                         "unknown"};
     return typecode < 24 ? type_names[typecode] : type_names[24];
   }
 
-  /* Make sure input has correct numpy type.  Allow character and byte
-   * to match.  Also allow int and long to match.  This is deprecated.
-   * You should use PyArray_EquivTypenums() instead.
+  /* Make sure input has correct numpy type.  This now just calls
+     PyArray_EquivTypenums().
    */
-  int type_match(int actual_type, int desired_type) {
+  int type_match(int actual_type,
+                 int desired_type)
+  {
     return PyArray_EquivTypenums(actual_type, desired_type);
   }
 
+#ifdef SWIGPY_USE_CAPSULE
+  void free_cap(PyObject * cap)
+  {
+    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
+    if (array != NULL) free(array);
+  }
+#endif
+
+
+
 
   /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
    * legal.  If not, set the python error string appropriately and
    * return NULL.
    */
-  PyArrayObject* obj_to_array_no_conversion(PyObject* input, int typecode)
+  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
+                                            int        typecode)
   {
     PyArrayObject* ary = NULL;
     if (is_array(input) && (typecode == NPY_NOTYPE ||
@@ -3230,11 +3602,12 @@ SWIG_From_int  (int value)
     }
     else
     {
-      const char * desired_type = typecode_string(typecode);
-      const char * actual_type  = pytype_string(input);
+      const char* desired_type = typecode_string(typecode);
+      const char* actual_type  = pytype_string(input);
       PyErr_Format(PyExc_TypeError,
                    "Array of type '%s' required.  A '%s' was given",
-                   desired_type, actual_type);
+                   desired_type,
+                   actual_type);
       ary = NULL;
     }
     return ary;
@@ -3245,11 +3618,12 @@ SWIG_From_int  (int value)
    * correct type.  On failure, the python error string will be set and
    * the routine returns NULL.
    */
-  PyArrayObject* obj_to_array_allow_conversion(PyObject* input, int typecode,
-                                               int* is_new_object)
+  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
+                                               int       typecode,
+                                               int*      is_new_object)
   {
     PyArrayObject* ary = NULL;
-    PyObject* py_obj;
+    PyObject*      py_obj;
     if (is_array(input) && (typecode == NPY_NOTYPE ||
                             PyArray_EquivTypenums(array_type(input),typecode)))
     {
@@ -3258,7 +3632,7 @@ SWIG_From_int  (int value)
     }
     else
     {
-      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_DEFAULT);
+      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
       /* If NULL, PyArray_FromObject will have set python error value.*/
       ary = (PyArrayObject*) py_obj;
       *is_new_object = 1;
@@ -3271,8 +3645,10 @@ SWIG_From_int  (int value)
    * not contiguous, create a new PyArrayObject using the original data,
    * flag it as a new object and return the pointer.
    */
-  PyArrayObject* make_contiguous(PyArrayObject* ary, int* is_new_object,
-                                 int min_dims, int max_dims)
+  PyArrayObject* make_contiguous(PyArrayObject* ary,
+                                 int*           is_new_object,
+                                 int            min_dims,
+                                 int            max_dims)
   {
     PyArrayObject* result;
     if (array_is_contiguous(ary))
@@ -3280,141 +3656,61 @@ SWIG_From_int  (int value)
       result = ary;
       *is_new_object = 0;
     }
-    else
-    {
-      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
-                                                             array_type(ary),
-                                                             min_dims,
-                                                             max_dims);
-      *is_new_object = 1;
-    }
-    return result;
-  }
-
-  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
-   * If so, return the input pointer, but do not flag it as not a new
-   * object.  If it is not Fortran-contiguous, create a new
-   * PyArrayObject using the original data, flag it as a new object
-   * and return the pointer.
-   */
-  PyArrayObject* make_fortran(PyArrayObject* ary, int* is_new_object,
-                              int min_dims, int max_dims)
-  {
-    PyArrayObject* result;
-    if (array_is_fortran(ary))
-    {
-      result = ary;
-      *is_new_object = 0;
-    }
-    else
-    {
-      Py_INCREF(ary->descr);
-      result = (PyArrayObject*) PyArray_FromArray(ary, ary->descr, NPY_FORTRAN);
-      *is_new_object = 1;
-    }
-    return result;
-  }
-
-  /* Convert a given PyObject to a contiguous PyArrayObject of the
-   * specified type.  If the input object is not a contiguous
-   * PyArrayObject, a new one will be created and the new object flag
-   * will be set.
-   */
-  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
-                                                          int typecode,
-                                                          int* is_new_object)
-  {
-    int is_new1 = 0;
-    int is_new2 = 0;
-    PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
-                                                        &is_new1);
-    if (ary1)
-    {
-      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
-      if ( is_new1 && is_new2)
-      {
-        Py_DECREF(ary1);
-      }
-      ary1 = ary2;
-    }
-    *is_new_object = is_new1 || is_new2;
-    return ary1;
-  }
-
-  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
-   * specified type.  If the input object is not a Fortran-ordered
-   * PyArrayObject, a new one will be created and the new object flag
-   * will be set.
-   */
-  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
-                                                       int typecode,
-                                                       int* is_new_object)
-  {
-    int is_new1 = 0;
-    int is_new2 = 0;
-    PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
-                                                        &is_new1);
-    if (ary1)
-    {
-      ary2 = make_fortran(ary1, &is_new2, 0, 0);
-      if (is_new1 && is_new2)
-      {
-        Py_DECREF(ary1);
-      }
-      ary1 = ary2;
+    else
+    {
+      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
+                                                              array_type(ary),
+                                                              min_dims,
+                                                              max_dims);
+      *is_new_object = 1;
     }
-    *is_new_object = is_new1 || is_new2;
-    return ary1;
+    return result;
   }
 
-  /* The following code was added by Ilmar M. Wilbers for forcing a copy of the
-   * object even when it is a NumPy array. This is meant for use with the
-   * IN_ARRAY typemaps, and allows the user to perform changes on an array
-   * without these chenges being reflected in the calling code.
-   */
-
-  /* Convert the given PyObject to a NumPy array with the given
-   * typecode as a copy. On success, return a valid PyArrayObject* with the
-   * correct type.  On failure, the python error string will be set and
-   * the routine returns NULL.
+  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
+   * If so, return the input pointer, but do not flag it as not a new
+   * object.  If it is not Fortran-contiguous, create a new
+   * PyArrayObject using the original data, flag it as a new object
+   * and return the pointer.
    */
-  PyArrayObject* obj_to_array_force_conversion(PyObject* input, int typecode,
-                                               int* is_new_object)
+  PyArrayObject* make_fortran(PyArrayObject* ary,
+                              int*           is_new_object)
   {
-    PyArrayObject* ary = NULL;
-    PyObject* py_obj;
-    if (is_array(input) && (typecode == NPY_NOTYPE ||
-                            PyArray_EquivTypenums(array_type(input),typecode)))
+    PyArrayObject* result;
+    if (array_is_fortran(ary))
     {
-      py_obj = PyArray_Copy((PyArrayObject*) input);
-      ary = (PyArrayObject*) py_obj;
-      *is_new_object = 1;
+      result = ary;
+      *is_new_object = 0;
     }
     else
     {
-      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_DEFAULT);
-      /* If NULL, PyArray_FromObject will have set python error value.*/
-      ary = (PyArrayObject*) py_obj;
+      Py_INCREF(array_descr(ary));
+      result = (PyArrayObject*) PyArray_FromArray(ary,
+                                                  array_descr(ary),
+#if NPY_API_VERSION < 0x00000007
+                                                  NPY_FORTRANORDER);
+#else
+                                                  NPY_ARRAY_F_CONTIGUOUS);
+#endif
       *is_new_object = 1;
     }
-    return ary;
+    return result;
   }
 
- /* Convert a given PyObject to a contiguous PyArrayObject of the
+  /* Convert a given PyObject to a contiguous PyArrayObject of the
    * specified type.  If the input object is not a contiguous
    * PyArrayObject, a new one will be created and the new object flag
    * will be set.
    */
-  PyArrayObject* obj_to_array_contiguous_force_conversion(PyObject* input,
-                                                          int typecode,
-                                                          int* is_new_object)
+  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
+                                                          int       typecode,
+                                                          int*      is_new_object)
   {
     int is_new1 = 0;
     int is_new2 = 0;
     PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_force_conversion(input, typecode,
+    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
+                                                        typecode,
                                                         &is_new1);
     if (ary1)
     {
@@ -3434,18 +3730,19 @@ SWIG_From_int  (int value)
    * PyArrayObject, a new one will be created and the new object flag
    * will be set.
    */
-  PyArrayObject* obj_to_array_fortran_force_conversion(PyObject* input,
-                                                       int typecode,
-                                                       int* is_new_object)
+  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
+                                                       int       typecode,
+                                                       int*      is_new_object)
   {
     int is_new1 = 0;
     int is_new2 = 0;
     PyArrayObject* ary2;
-    PyArrayObject* ary1 = obj_to_array_force_conversion(input, typecode,
+    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
+                                                        typecode,
                                                         &is_new1);
     if (ary1)
     {
-      ary2 = make_fortran(ary1, &is_new2, 0, 0);
+      ary2 = make_fortran(ary1, &is_new2);
       if (is_new1 && is_new2)
       {
         Py_DECREF(ary1);
@@ -3455,9 +3752,6 @@ SWIG_From_int  (int value)
     *is_new_object = is_new1 || is_new2;
     return ary1;
   }
-  /* End modifications by Ilmar M. Wilbers
-   */
-
 
 
   /* Test whether a python object is contiguous.  If array is
@@ -3476,6 +3770,22 @@ SWIG_From_int  (int value)
     return contiguous;
   }
 
+  /* Test whether a python object is (C_ or F_) contiguous.  If array is
+   * contiguous, return 1.  Otherwise, set the python error string and
+   * return 0.
+   */
+  int require_c_or_f_contiguous(PyArrayObject* ary)
+  {
+    int contiguous = 1;
+    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
+    {
+      PyErr_SetString(PyExc_TypeError,
+                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
+      contiguous = 0;
+    }
+    return contiguous;
+  }
+
   /* Require that a numpy array is not byte-swapped.  If the array is
    * not byte-swapped, return 1.  Otherwise, set the python error string
    * and return 0.
@@ -3497,14 +3807,16 @@ SWIG_From_int  (int value)
    * dimensions.  If the array has the specified number of dimensions,
    * return 1.  Otherwise, set the python error string and return 0.
    */
-  int require_dimensions(PyArrayObject* ary, int exact_dimensions)
+  int require_dimensions(PyArrayObject* ary,
+                         int            exact_dimensions)
   {
     int success = 1;
     if (array_numdims(ary) != exact_dimensions)
     {
       PyErr_Format(PyExc_TypeError,
                    "Array must have %d dimensions.  Given array has %d dimensions",
-                   exact_dimensions, array_numdims(ary));
+                   exact_dimensions,
+                   array_numdims(ary));
       success = 0;
     }
     return success;
@@ -3515,7 +3827,9 @@ SWIG_From_int  (int value)
    * of dimensions, return 1.  Otherwise, set the python error string
    * and return 0.
    */
-  int require_dimensions_n(PyArrayObject* ary, int* exact_dimensions, int n)
+  int require_dimensions_n(PyArrayObject* ary,
+                           int*           exact_dimensions,
+                           int            n)
   {
     int success = 0;
     int i;
@@ -3539,7 +3853,8 @@ SWIG_From_int  (int value)
       strcat(dims_str,s);
       PyErr_Format(PyExc_TypeError,
                    "Array must have %s dimensions.  Given array has %d dimensions",
-                   dims_str, array_numdims(ary));
+                   dims_str,
+                   array_numdims(ary));
     }
     return success;
   }
@@ -3548,7 +3863,9 @@ SWIG_From_int  (int value)
    * array has the specified shape, return 1.  Otherwise, set the python
    * error string and return 0.
    */
-  int require_size(PyArrayObject* ary, npy_intp* size, int n)
+  int require_size(PyArrayObject* ary,
+                   npy_intp*      size,
+                   int            n)
   {
     int i;
     int success = 1;
@@ -3588,36 +3905,42 @@ SWIG_From_int  (int value)
       actual_dims[len-1] = ']';
       PyErr_Format(PyExc_TypeError,
                    "Array must have shape of %s.  Given array has shape of %s",
-                   desired_dims, actual_dims);
+                   desired_dims,
+                   actual_dims);
     }
     return success;
   }
 
-  /* Require the given PyArrayObject to to be FORTRAN ordered.  If the
-   * the PyArrayObject is already FORTRAN ordered, do nothing.  Else,
-   * set the FORTRAN ordering flag and recompute the strides.
+  /* Require the given PyArrayObject to to be Fortran ordered.  If the
+   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
+   * set the Fortran ordering flag and recompute the strides.
    */
   int require_fortran(PyArrayObject* ary)
   {
     int success = 1;
     int nd = array_numdims(ary);
     int i;
+    npy_intp * strides = array_strides(ary);
     if (array_is_fortran(ary)) return success;
-    /* Set the FORTRAN ordered flag */
-    ary->flags = NPY_FARRAY;
+    /* Set the Fortran ordered flag */
+    array_enableflags(ary,NPY_ARRAY_FARRAY);
     /* Recompute the strides */
-    ary->strides[0] = ary->strides[nd-1];
+    strides[0] = strides[nd-1];
     for (i=1; i < nd; ++i)
-      ary->strides[i] = ary->strides[i-1] * array_size(ary,i-1);
+      strides[i] = strides[i-1] * array_size(ary,i-1);
     return success;
   }
 
- 
+
+
 
 SWIGINTERN int
 SWIG_AsVal_bool (PyObject *obj, bool *val)
 {
-  int r = PyObject_IsTrue(obj);
+  int r;
+  if (!PyBool_Check(obj))
+    return SWIG_ERROR;
+  r = PyObject_IsTrue(obj);
   if (r == -1)
     return SWIG_ERROR;
   if (val) *val = r ? true : false;
@@ -3625,13 +3948,34 @@ SWIG_AsVal_bool (PyObject *obj, bool *val)
 }
 
 
+/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
+#ifndef SWIG_isfinite
+# if defined(isfinite)
+#  define SWIG_isfinite(X) (isfinite(X))
+# elif defined(_MSC_VER)
+#  define SWIG_isfinite(X) (_finite(X))
+# elif defined(__sun) && defined(__SVR4)
+#  include <ieeefp.h>
+#  define SWIG_isfinite(X) (finite(X))
+# endif
+#endif
+
+
+/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
+#ifdef SWIG_isfinite
+# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
+#else
+# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
+#endif
+
+
 SWIGINTERN int
 SWIG_AsVal_float (PyObject * obj, float *val)
 {
   double v;
   int res = SWIG_AsVal_double (obj, &v);
   if (SWIG_IsOK(res)) {
-    if ((v < -FLT_MAX || v > FLT_MAX)) {
+    if (SWIG_Float_Overflow_Check(v)) {
       return SWIG_OverflowError;
     } else {
       if (val) *val = static_cast< float >(v);
@@ -3856,13 +4200,15 @@ SWIGINTERN PyObject *_wrap_sort__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
 
 
 SWIGINTERN PyObject *_wrap_sort(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[3];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[3] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 2) {
@@ -3899,11 +4245,11 @@ SWIGINTERN PyObject *_wrap_sort(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'sort'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sort'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _sort< double >(Vector< double > *,bool)\n"
     "    _sort< float >(Vector< float > *,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -3937,7 +4283,7 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:mult",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -3954,7 +4300,7 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -3971,7 +4317,7 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4071,7 +4417,7 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:mult",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4088,7 +4434,7 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4105,7 +4451,7 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4176,13 +4522,15 @@ SWIGINTERN PyObject *_wrap_mult__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
 
 
 SWIGINTERN PyObject *_wrap_mult(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[8];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[8] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 7) {
@@ -4279,11 +4627,11 @@ SWIGINTERN PyObject *_wrap_mult(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'mult'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mult'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _mult< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,bool const,bool const,double const,double const)\n"
     "    _mult< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,bool const,bool const,float const,float const)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -4316,7 +4664,7 @@ SWIGINTERN PyObject *_wrap_AAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray1 = obj0;
     if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
         PyObject_HasAttrString(sparray1, "indices") &&
@@ -4376,7 +4724,7 @@ SWIGINTERN PyObject *_wrap_AAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4449,7 +4797,7 @@ SWIGINTERN PyObject *_wrap_AAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray1 = obj0;
     if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
         PyObject_HasAttrString(sparray1, "indices") &&
@@ -4509,7 +4857,7 @@ SWIGINTERN PyObject *_wrap_AAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4554,13 +4902,15 @@ SWIGINTERN PyObject *_wrap_AAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
 
 
 SWIGINTERN PyObject *_wrap_AAt(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[3];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[3] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 2) {
@@ -4609,11 +4959,11 @@ SWIGINTERN PyObject *_wrap_AAt(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AAt'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AAt'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _AAt< double >(SpMatrix< double > *,Matrix< double > *)\n"
     "    _AAt< float >(SpMatrix< float > *,Matrix< float > *)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -4649,7 +4999,7 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray1 = obj0;
     if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
         PyObject_HasAttrString(sparray1, "indices") &&
@@ -4709,7 +5059,7 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4726,7 +5076,7 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4808,7 +5158,7 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray1 = obj0;
     if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
         PyObject_HasAttrString(sparray1, "indices") &&
@@ -4868,7 +5218,7 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4885,7 +5235,7 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -4936,13 +5286,15 @@ SWIGINTERN PyObject *_wrap_XAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
 
 
 SWIGINTERN PyObject *_wrap_XAt(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[4];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[4] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 3) {
@@ -5003,11 +5355,11 @@ SWIGINTERN PyObject *_wrap_XAt(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'XAt'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XAt'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _XAt< double >(SpMatrix< double > *,Matrix< double > *,Matrix< double > *)\n"
     "    _XAt< float >(SpMatrix< float > *,Matrix< float > *,Matrix< float > *)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -5098,13 +5450,15 @@ SWIGINTERN PyObject *_wrap_applyBayerPattern__SWIG_1(PyObject *SWIGUNUSEDPARM(se
 
 
 SWIGINTERN PyObject *_wrap_applyBayerPattern(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[3];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[3] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 2) {
@@ -5141,11 +5495,11 @@ SWIGINTERN PyObject *_wrap_applyBayerPattern(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'applyBayerPattern'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'applyBayerPattern'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _applyBayerPattern< double >(Vector< double > *,int)\n"
     "    _applyBayerPattern< float >(Vector< float > *,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -5171,7 +5525,7 @@ SWIGINTERN PyObject *_wrap_conjugateGradient__SWIG_0(PyObject *SWIGUNUSEDPARM(se
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOO:conjugateGradient",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5263,7 +5617,7 @@ SWIGINTERN PyObject *_wrap_conjugateGradient__SWIG_1(PyObject *SWIGUNUSEDPARM(se
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOO:conjugateGradient",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5334,13 +5688,15 @@ SWIGINTERN PyObject *_wrap_conjugateGradient__SWIG_1(PyObject *SWIGUNUSEDPARM(se
 
 
 SWIGINTERN PyObject *_wrap_conjugateGradient(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[6];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[6] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 5) {
@@ -5413,11 +5769,11 @@ SWIGINTERN PyObject *_wrap_conjugateGradient(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'conjugateGradient'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conjugateGradient'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _conjugateGradient< double >(Matrix< double > *,Vector< double > *,Vector< double > *,double const,int const)\n"
     "    _conjugateGradient< float >(Matrix< float > *,Vector< float > *,Vector< float > *,float const,int const)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -5429,7 +5785,7 @@ SWIGINTERN PyObject *_wrap_invSym__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObje
   
   if (!PyArg_ParseTuple(args,(char *)"O:invSym",&obj0)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5467,7 +5823,7 @@ SWIGINTERN PyObject *_wrap_invSym__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObje
   
   if (!PyArg_ParseTuple(args,(char *)"O:invSym",&obj0)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5498,13 +5854,15 @@ SWIGINTERN PyObject *_wrap_invSym__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObje
 
 
 SWIGINTERN PyObject *_wrap_invSym(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[2];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[2] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 1) {
@@ -5529,11 +5887,11 @@ SWIGINTERN PyObject *_wrap_invSym(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'invSym'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'invSym'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _invSym< double >(Matrix< double > *)\n"
     "    _invSym< float >(Matrix< float > *)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -5545,7 +5903,7 @@ SWIGINTERN PyObject *_wrap_normalize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"O:normalize",&obj0)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5583,7 +5941,7 @@ SWIGINTERN PyObject *_wrap_normalize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"O:normalize",&obj0)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5614,13 +5972,15 @@ SWIGINTERN PyObject *_wrap_normalize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
 
 
 SWIGINTERN PyObject *_wrap_normalize(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[2];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[2] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 1) {
@@ -5645,11 +6005,88 @@ SWIGINTERN PyObject *_wrap_normalize(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'normalize'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'normalize'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _normalize< double >(Matrix< double > *)\n"
     "    _normalize< float >(Matrix< float > *)\n");
-  return NULL;
+  return 0;
+}
+
+
+SWIGINTERN PyObject *L1COEFFS_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1COEFFS",SWIG_From_int(static_cast< int >(L1COEFFS)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L2ERROR_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L2ERROR",SWIG_From_int(static_cast< int >(L2ERROR)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *PENALTY_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "PENALTY",SWIG_From_int(static_cast< int >(PENALTY)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *SPARSITY_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "SPARSITY",SWIG_From_int(static_cast< int >(SPARSITY)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L2ERROR2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L2ERROR2",SWIG_From_int(static_cast< int >(L2ERROR2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *PENALTY2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "PENALTY2",SWIG_From_int(static_cast< int >(PENALTY2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *FISTAMODE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "FISTAMODE",SWIG_From_int(static_cast< int >(FISTAMODE)));
+  return SWIG_Py_Void();
 }
 
 
@@ -5692,7 +6129,7 @@ SWIGINTERN PyObject *_wrap_sparseProject__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:sparseProject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5709,7 +6146,7 @@ SWIGINTERN PyObject *_wrap_sparseProject__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5827,7 +6264,7 @@ SWIGINTERN PyObject *_wrap_sparseProject__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:sparseProject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5844,7 +6281,7 @@ SWIGINTERN PyObject *_wrap_sparseProject__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -5924,13 +6361,15 @@ SWIGINTERN PyObject *_wrap_sparseProject__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
 
 
 SWIGINTERN PyObject *_wrap_sparseProject(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[10];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[10] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 9) {
@@ -6051,11 +6490,11 @@ SWIGINTERN PyObject *_wrap_sparseProject(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'sparseProject'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sparseProject'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _sparseProject< double >(Matrix< double > *,Matrix< double > *,double const,int const,double const,double const,double const,bool const,int const)\n"
     "    _sparseProject< float >(Matrix< float > *,Matrix< float > *,float const,int const,float const,float const,float const,bool const,int const)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -6120,7 +6559,7 @@ SWIGINTERN PyObject *_wrap_lassoD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObje
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:lassoD",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6137,7 +6576,7 @@ SWIGINTERN PyObject *_wrap_lassoD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObje
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6354,7 +6793,7 @@ SWIGINTERN PyObject *_wrap_lassoD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObje
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:lassoD",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6371,7 +6810,7 @@ SWIGINTERN PyObject *_wrap_lassoD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObje
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6528,13 +6967,15 @@ SWIGINTERN PyObject *_wrap_lassoD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObje
 
 
 SWIGINTERN PyObject *_wrap_lassoD(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[14];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[14] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 13); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 13) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 13) {
@@ -6703,11 +7144,11 @@ SWIGINTERN PyObject *_wrap_lassoD(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'lassoD'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'lassoD'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _lassoD< double >(Matrix< double > *,Matrix< double > *,Matrix< double > **,bool,int,double const,double const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n"
     "    _lassoD< float >(Matrix< float > *,Matrix< float > *,Matrix< float > **,bool,int,float const,float const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -6775,7 +7216,7 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:lassoQq",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6792,7 +7233,7 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -6809,7 +7250,7 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7035,7 +7476,7 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:lassoQq",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7052,7 +7493,7 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7069,7 +7510,7 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7232,13 +7673,15 @@ SWIGINTERN PyObject *_wrap_lassoQq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
 
 
 SWIGINTERN PyObject *_wrap_lassoQq(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[15];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[15] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 14); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 14) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 14) {
@@ -7419,11 +7862,11 @@ SWIGINTERN PyObject *_wrap_lassoQq(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'lassoQq'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'lassoQq'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _lassoQq< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,Matrix< double > **,bool,int,double const,double const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n"
     "    _lassoQq< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,Matrix< float > **,bool,int,float const,float const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -7470,7 +7913,7 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:lassoMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7487,7 +7930,7 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7504,7 +7947,7 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_BOOL);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7672,7 +8115,7 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:lassoMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7689,7 +8132,7 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7706,7 +8149,7 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_BOOL);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -7832,13 +8275,15 @@ SWIGINTERN PyObject *_wrap_lassoMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
 
 
 SWIGINTERN PyObject *_wrap_lassoMask(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[11];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[11] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 10); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 10) {
@@ -7971,11 +8416,11 @@ SWIGINTERN PyObject *_wrap_lassoMask(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'lassoMask'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'lassoMask'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _lassoMask< double >(Matrix< double > *,Matrix< double > *,Matrix< bool > *,int,double const,double const,constraint_type,bool const,int const,bool)\n"
     "    _lassoMask< float >(Matrix< float > *,Matrix< float > *,Matrix< bool > *,int,float const,float const,constraint_type,bool const,int const,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -8018,7 +8463,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:lassoWeighted",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8035,7 +8480,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8052,7 +8497,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8211,7 +8656,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:lassoWeighted",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8228,7 +8673,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8245,7 +8690,7 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8366,13 +8811,15 @@ SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
 
 
 SWIGINTERN PyObject *_wrap_lassoWeighted(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[10];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[10] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 9) {
@@ -8493,11 +8940,11 @@ SWIGINTERN PyObject *_wrap_lassoWeighted(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'lassoWeighted'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'lassoWeighted'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _lassoWeighted< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,int,double const,constraint_type,bool const,int const,bool)\n"
     "    _lassoWeighted< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,int,float const,constraint_type,bool const,int const,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -8547,7 +8994,7 @@ SWIGINTERN PyObject *_wrap_omp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:omp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8564,7 +9011,7 @@ SWIGINTERN PyObject *_wrap_omp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8769,7 +9216,7 @@ SWIGINTERN PyObject *_wrap_omp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:omp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8786,7 +9233,7 @@ SWIGINTERN PyObject *_wrap_omp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -8946,13 +9393,15 @@ SWIGINTERN PyObject *_wrap_omp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
 
 
 SWIGINTERN PyObject *_wrap_omp(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[11];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[11] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 10); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 10) {
@@ -9085,11 +9534,11 @@ SWIGINTERN PyObject *_wrap_omp(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'omp'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'omp'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _omp< double >(Matrix< double > *,Matrix< double > *,Matrix< double > **,bool,bool,Vector< int > *,bool,Vector< double > *,bool,Vector< double > *,int const)\n"
     "    _omp< float >(Matrix< float > *,Matrix< float > *,Matrix< float > **,bool,bool,Vector< int > *,bool,Vector< float > *,bool,Vector< float > *,int const)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -9142,7 +9591,7 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:ompMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9159,7 +9608,7 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9176,7 +9625,7 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_BOOL);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9390,7 +9839,7 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:ompMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9407,7 +9856,7 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9424,7 +9873,7 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_BOOL);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9590,13 +10039,15 @@ SWIGINTERN PyObject *_wrap_ompMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
 
 
 SWIGINTERN PyObject *_wrap_ompMask(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[12];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[12] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 11); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 11) {
@@ -9741,11 +10192,11 @@ SWIGINTERN PyObject *_wrap_ompMask(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ompMask'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ompMask'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _ompMask< double >(Matrix< double > *,Matrix< double > *,Matrix< bool > *,Matrix< double > **,bool,bool,Vector< int > *,bool,Vector< double > *,bool,Vector< double > *,int const)\n"
     "    _ompMask< float >(Matrix< float > *,Matrix< float > *,Matrix< bool > *,Matrix< float > **,bool,bool,Vector< int > *,bool,Vector< float > *,bool,Vector< float > *,int const)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -9776,7 +10227,7 @@ SWIGINTERN PyObject *_wrap_somp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOO:somp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9793,7 +10244,7 @@ SWIGINTERN PyObject *_wrap_somp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9930,7 +10381,7 @@ SWIGINTERN PyObject *_wrap_somp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOO:somp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -9947,7 +10398,7 @@ SWIGINTERN PyObject *_wrap_somp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10058,13 +10509,15 @@ SWIGINTERN PyObject *_wrap_somp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject
 
 
 SWIGINTERN PyObject *_wrap_somp(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[7];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[7] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 6) {
@@ -10149,11 +10602,11 @@ SWIGINTERN PyObject *_wrap_somp(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'somp'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'somp'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _somp< double >(Matrix< double > *,Matrix< double > *,Vector< int > *,int,double,int)\n"
     "    _somp< float >(Matrix< float > *,Matrix< float > *,Vector< int > *,int,float,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -10192,7 +10645,7 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10209,7 +10662,7 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10244,7 +10697,7 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray3 = obj2;
     if ( !( PyObject_HasAttrString(sparray3, "indptr") &&
         PyObject_HasAttrString(sparray3, "indices") &&
@@ -10437,7 +10890,7 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10454,7 +10907,7 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10489,7 +10942,7 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray3 = obj2;
     if ( !( PyObject_HasAttrString(sparray3, "indptr") &&
         PyObject_HasAttrString(sparray3, "indices") &&
@@ -10648,13 +11101,15 @@ SWIGINTERN PyObject *_wrap_cd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *
 
 
 SWIGINTERN PyObject *_wrap_cd(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[9];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[9] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 8) {
@@ -10775,11 +11230,11 @@ SWIGINTERN PyObject *_wrap_cd(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cd'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'cd'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _cd< double >(Matrix< double > *,Matrix< double > *,SpMatrix< double > *,double,constraint_type,int,double,int)\n"
     "    _cd< float >(Matrix< float > *,Matrix< float > *,SpMatrix< float > *,float,constraint_type,int,float,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -10820,7 +11275,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:l1L2BCD",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10837,7 +11292,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10854,7 +11309,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10977,7 +11432,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:l1L2BCD",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -10994,7 +11449,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11011,7 +11466,7 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11098,13 +11553,15 @@ SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObj
 
 
 SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[10];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[10] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 9) {
@@ -11225,11 +11682,55 @@ SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'l1L2BCD'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'l1L2BCD'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _l1L2BCD< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,Vector< int > *,double,constraint_type,int,double,int)\n"
     "    _l1L2BCD< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,Vector< int > *,float,constraint_type,int,float,int)\n");
-  return NULL;
+  return 0;
+}
+
+
+SWIGINTERN PyObject *L2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L2",SWIG_From_int(static_cast< int >(L2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L1L2_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1L2",SWIG_From_int(static_cast< int >(L1L2)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L1L2FL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1L2FL",SWIG_From_int(static_cast< int >(L1L2FL)));
+  return SWIG_Py_Void();
+}
+
+
+SWIGINTERN PyObject *L1L2MU_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *module;
+  PyObject *d;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
+  d = PyModule_GetDict(module);
+  if (!d) return NULL;
+  SWIG_Python_SetConstant(d, "L1L2MU",SWIG_From_int(static_cast< int >(L1L2MU)));
+  return SWIG_Py_Void();
 }
 
 
@@ -11412,7 +11913,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
   {
     if ( PyObject_HasAttrString(obj0, "indptr")) {
       PyObject* sparray =obj0;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj0;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -11471,7 +11972,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11499,7 +12000,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
   } 
   arg6 = static_cast< bool >(val6);
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array7 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11516,7 +12017,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array8 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11538,7 +12039,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
   } 
   arg9 = static_cast< int >(val9);
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array10 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -11578,7 +12079,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray12 = obj8;
     if ( !( PyObject_HasAttrString(sparray12, "indptr") &&
         PyObject_HasAttrString(sparray12, "indices") &&
@@ -11656,7 +12157,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray13 = obj9;
     if ( !( PyObject_HasAttrString(sparray13, "indptr") &&
         PyObject_HasAttrString(sparray13, "indices") &&
@@ -12186,7 +12687,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
   {
     if ( PyObject_HasAttrString(obj0, "indptr")) {
       PyObject* sparray =obj0;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj0;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -12245,7 +12746,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj0, NPY_FLOAT);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -12273,7 +12774,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
   } 
   arg6 = static_cast< bool >(val6);
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array7 = obj_to_array_no_conversion(obj3, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -12290,7 +12791,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array8 = obj_to_array_no_conversion(obj4, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -12312,7 +12813,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
   } 
   arg9 = static_cast< int >(val9);
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array10 = obj_to_array_no_conversion(obj6, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -12352,7 +12853,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray12 = obj8;
     if ( !( PyObject_HasAttrString(sparray12, "indptr") &&
         PyObject_HasAttrString(sparray12, "indices") &&
@@ -12430,7 +12931,7 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray13 = obj9;
     if ( !( PyObject_HasAttrString(sparray13, "indptr") &&
         PyObject_HasAttrString(sparray13, "indices") &&
@@ -12782,13 +13283,15 @@ SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
 
 
 SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[42];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[42] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 41); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 41) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 41) {
@@ -13313,11 +13816,11 @@ SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'alltrainDL'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'alltrainDL'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _alltrainDL< double >(Data< double > *,bool,Matrix< double > **,Matrix< double > **,Vector< int > **,bool,Matrix< double > *,Matrix< double > *,int,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,double,bool,bool,int,int,double,double,double,int,double,constraint_type,char *,bool,bool,bool,constraint_type_D,bool,bool,bool,double,double,double,int,bool,int,bool,bool,char *)\n"
     "    _alltrainDL< float >(Data< float > *,bool,Matrix< float > **,Matrix< float > **,Vector< int > **,bool,Matrix< float > *,Matrix< float > *,int,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,float,bool,bool,int,int,double,double,double,int,double,constraint_type,char *,bool,bool,bool,constraint_type_D,bool,bool,bool,double,double,float,int,bool,int,bool,bool,char *)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -13372,7 +13875,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysis__SWIG_0(PyObject *SWIGUNUSEDPARM(s
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:archetypalAnalysis",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -13604,7 +14107,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysis__SWIG_1(PyObject *SWIGUNUSEDPARM(s
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:archetypalAnalysis",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -13786,13 +14289,15 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysis__SWIG_1(PyObject *SWIGUNUSEDPARM(s
 
 
 SWIGINTERN PyObject *_wrap_archetypalAnalysis(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[10];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[10] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 9) {
@@ -13913,11 +14418,11 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysis(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'archetypalAnalysis'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'archetypalAnalysis'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _archetypalAnalysis< double >(Matrix< double > *,int,SpMatrix< double > **,SpMatrix< double > **,bool,double,bool,int,int,bool,int)\n"
     "    _archetypalAnalysis< float >(Matrix< float > *,int,SpMatrix< float > **,SpMatrix< float > **,bool,float,bool,int,int,bool,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -13967,7 +14472,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_0(PyObject *SWIGUNUSEDPA
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:archetypalAnalysisInit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -13984,7 +14489,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_0(PyObject *SWIGUNUSEDPA
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14207,7 +14712,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_1(PyObject *SWIGUNUSEDPA
   }
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:archetypalAnalysisInit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14224,7 +14729,7 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_1(PyObject *SWIGUNUSEDPA
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14402,13 +14907,15 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_1(PyObject *SWIGUNUSEDPA
 
 
 SWIGINTERN PyObject *_wrap_archetypalAnalysisInit(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[9];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[9] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 8) {
@@ -14517,11 +15024,11 @@ SWIGINTERN PyObject *_wrap_archetypalAnalysisInit(PyObject *self, PyObject *args
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'archetypalAnalysisInit'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'archetypalAnalysisInit'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _archetypalAnalysisInit< double >(Matrix< double > *,Matrix< double > *,SpMatrix< double > **,SpMatrix< double > **,bool,double,bool,int,int,int)\n"
     "    _archetypalAnalysisInit< float >(Matrix< float > *,Matrix< float > *,SpMatrix< float > **,SpMatrix< float > **,bool,float,bool,int,int,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -14545,7 +15052,7 @@ SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOO:decompSimplex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14562,7 +15069,7 @@ SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14676,7 +15183,7 @@ SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOO:decompSimplex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14693,7 +15200,7 @@ SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -14788,13 +15295,15 @@ SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
 
 
 SWIGINTERN PyObject *_wrap_decompSimplex(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[5];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[5] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 4) {
@@ -14855,11 +15364,11 @@ SWIGINTERN PyObject *_wrap_decompSimplex(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'decompSimplex'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decompSimplex'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _decompSimplex< double >(Matrix< double > *,Matrix< double > *,bool,int)\n"
     "    _decompSimplex< float >(Matrix< float > *,Matrix< float > *,bool,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -15025,7 +15534,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaFlat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15062,7 +15571,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -15121,7 +15630,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15139,7 +15648,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15156,7 +15665,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15589,7 +16098,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaFlat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15626,7 +16135,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -15685,7 +16194,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_FLOAT);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15703,7 +16212,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15720,7 +16229,7 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -15992,13 +16501,15 @@ SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
 
 
 SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[41];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[41] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 40); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 40) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 40) {
@@ -16497,11 +17008,11 @@ SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'fistaFlat'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fistaFlat'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _fistaFlat< double >(Matrix< double > *,AbstractMatrixB< double > *,Matrix< double > *,Matrix< double > *,Vector< int > *,int,int,double,bool,double,double,double,double,double,double,double,double,double,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< double > *,int,bool,bool,int)\n"
     "    _fistaFlat< float >(Matrix< float > *,AbstractMatrixB< float > *,Matrix< float > *,Matrix< float > *,Vector< int > *,int,int,float,bool,float,float,float,float,float,float,float,float,float,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< float > *,int,bool,bool,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -16676,7 +17187,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39,&obj40,&obj41,&obj42)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -16713,7 +17224,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -16772,7 +17283,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -16790,7 +17301,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -16807,7 +17318,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -16847,7 +17358,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyO
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray6 = obj5;
     if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
         PyObject_HasAttrString(sparray6, "indices") &&
@@ -17355,7 +17866,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39,&obj40,&obj41,&obj42)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -17392,7 +17903,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -17451,7 +17962,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_FLOAT);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -17469,7 +17980,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -17486,7 +17997,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -17526,7 +18037,7 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray6 = obj5;
     if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
         PyObject_HasAttrString(sparray6, "indices") &&
@@ -17864,13 +18375,15 @@ SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyO
 
 
 SWIGINTERN PyObject *_wrap_fistaTree(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[44];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[44] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 43); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 43) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 43) {
@@ -18417,11 +18930,11 @@ SWIGINTERN PyObject *_wrap_fistaTree(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'fistaTree'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fistaTree'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _fistaTree< double >(Matrix< double > *,AbstractMatrixB< double > *,Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,int,double,bool,double,double,double,double,double,double,double,double,double,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< double > *,int,bool,bool,int)\n"
     "    _fistaTree< float >(Matrix< float > *,AbstractMatrixB< float > *,Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,int,float,bool,float,float,float,float,float,float,float,float,float,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< float > *,int,bool,bool,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -18593,7 +19106,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39,&obj40,&obj41)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -18630,7 +19143,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -18689,7 +19202,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -18707,7 +19220,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -18724,7 +19237,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -18764,7 +19277,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray6 = obj5;
     if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
         PyObject_HasAttrString(sparray6, "indices") &&
@@ -18842,7 +19355,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray7 = obj6;
     if ( !( PyObject_HasAttrString(sparray7, "indptr") &&
         PyObject_HasAttrString(sparray7, "indices") &&
@@ -19331,7 +19844,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:fistaGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19,&obj20,&obj21,&obj22,&obj23,&obj24,&obj25,&obj26,&obj27,&obj28,&obj29,&obj30,&obj31,&obj32,&obj33,&obj34,&obj35,&obj36,&obj37,&obj38,&obj39,&obj40,&obj41)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -19368,7 +19881,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
          */
     if ( PyObject_HasAttrString(obj1, "indptr")) {
       PyObject* sparray =obj1;
-      /*@SWIG:py_typemaps.i,183,map_sparse@*/
+      /*@SWIG:py_typemaps.i,179,map_sparse@*/
       sparray = obj1;
       if ( !( PyObject_HasAttrString(sparray, "indptr") &&
           PyObject_HasAttrString(sparray, "indices") &&
@@ -19427,7 +19940,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
       /*@SWIG@*/
     } else {
       PyArrayObject* array = NULL;
-      /*@SWIG:py_typemaps.i,86,map_matrix@*/
+      /*@SWIG:py_typemaps.i,84,map_matrix@*/
       array = obj_to_array_no_conversion(obj1, NPY_FLOAT);
       /* !!!!!
       	WARNING! bug (?) : the variable name choosen above must not appear
@@ -19445,7 +19958,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
     }
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array3 = obj_to_array_no_conversion(obj2, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -19462,7 +19975,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array4 = obj_to_array_no_conversion(obj3, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -19502,7 +20015,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray6 = obj5;
     if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
         PyObject_HasAttrString(sparray6, "indices") &&
@@ -19580,7 +20093,7 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray7 = obj6;
     if ( !( PyObject_HasAttrString(sparray7, "indptr") &&
         PyObject_HasAttrString(sparray7, "indices") &&
@@ -19902,13 +20415,15 @@ SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py
 
 
 SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[43];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[43] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 42); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 42) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 42) {
@@ -20455,11 +20970,11 @@ SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'fistaGraph'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fistaGraph'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _fistaGraph< double >(Matrix< double > *,AbstractMatrixB< double > *,Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,SpMatrix< bool > *,int,int,double,bool,double,double,double,double,double,double,double,double,double,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< double > *,int,bool,bool,int)\n"
     "    _fistaGraph< float >(Matrix< float > *,AbstractMatrixB< float > *,Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,SpMatrix< bool > *,int,int,float,bool,float,float,float,float,float,float,float,float,float,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< float > *,int,bool,bool,int)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -20531,7 +21046,7 @@ SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:proximalFlat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -20548,7 +21063,7 @@ SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -20750,7 +21265,7 @@ SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:proximalFlat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -20767,7 +21282,7 @@ SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -20902,13 +21417,15 @@ SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
 
 
 SWIGINTERN PyObject *_wrap_proximalFlat(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[17];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[17] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 16); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 16) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 16) {
@@ -21109,11 +21626,11 @@ SWIGINTERN PyObject *_wrap_proximalFlat(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'proximalFlat'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'proximalFlat'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _proximalFlat< double >(Matrix< double > *,Matrix< double > *,Vector< int > *,int,double,double,double,bool,bool,char *,bool,bool,bool,bool,int,bool)\n"
     "    _proximalFlat< float >(Matrix< float > *,Matrix< float > *,Vector< int > *,int,float,float,float,bool,bool,char *,bool,bool,bool,bool,int,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -21194,7 +21711,7 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOO:proximalTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -21211,7 +21728,7 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -21251,7 +21768,7 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray4 = obj3;
     if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
         PyObject_HasAttrString(sparray4, "indices") &&
@@ -21528,7 +22045,7 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOO:proximalTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -21545,7 +22062,7 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -21585,7 +22102,7 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray4 = obj3;
     if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
         PyObject_HasAttrString(sparray4, "indices") &&
@@ -21786,13 +22303,15 @@ SWIGINTERN PyObject *_wrap_proximalTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
 
 
 SWIGINTERN PyObject *_wrap_proximalTree(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[20];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[20] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 19); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 19) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 19) {
@@ -22041,11 +22560,11 @@ SWIGINTERN PyObject *_wrap_proximalTree(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'proximalTree'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'proximalTree'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _proximalTree< double >(Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,double,double,double,bool,bool,char *,bool,bool,bool,bool,int,bool)\n"
     "    _proximalTree< float >(Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,float,float,float,bool,bool,char *,bool,bool,bool,bool,int,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -22123,7 +22642,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOO:proximalGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -22140,7 +22659,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -22180,7 +22699,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray4 = obj3;
     if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
         PyObject_HasAttrString(sparray4, "indices") &&
@@ -22258,7 +22777,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self),
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray5 = obj4;
     if ( !( PyObject_HasAttrString(sparray5, "indptr") &&
         PyObject_HasAttrString(sparray5, "indices") &&
@@ -22516,7 +23035,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOO:proximalGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -22533,7 +23052,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -22573,7 +23092,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray4 = obj3;
     if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
         PyObject_HasAttrString(sparray4, "indices") &&
@@ -22651,7 +23170,7 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
            >>> type(A.shape)
            <type 'tuple'>
          */
-    /*@SWIG:py_typemaps.i,183,map_sparse@*/
+    /*@SWIG:py_typemaps.i,179,map_sparse@*/
     sparray5 = obj4;
     if ( !( PyObject_HasAttrString(sparray5, "indptr") &&
         PyObject_HasAttrString(sparray5, "indices") &&
@@ -22836,13 +23355,15 @@ SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self),
 
 
 SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[19];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[19] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 18); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 18) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 18) {
@@ -23091,11 +23612,11 @@ SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'proximalGraph'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'proximalGraph'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _proximalGraph< double >(Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,SpMatrix< bool > *,int,double,double,double,bool,bool,char *,bool,bool,bool,bool,int,bool)\n"
     "    _proximalGraph< float >(Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,SpMatrix< bool > *,int,float,float,float,bool,bool,char *,bool,bool,bool,bool,int,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -23604,13 +24125,15 @@ SWIGINTERN PyObject *_wrap_graphOfGroupStruct__SWIG_1(PyObject *SWIGUNUSEDPARM(s
 
 
 SWIGINTERN PyObject *_wrap_graphOfGroupStruct(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[2];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[2] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 1) {
@@ -23635,11 +24158,11 @@ SWIGINTERN PyObject *_wrap_graphOfGroupStruct(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'graphOfGroupStruct'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'graphOfGroupStruct'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _graphOfGroupStruct< double >(std::vector< StructNodeElem< double > * > *,SpMatrix< bool > **,SpMatrix< bool > **)\n"
     "    _graphOfGroupStruct< float >(std::vector< StructNodeElem< float > * > *,SpMatrix< bool > **,SpMatrix< bool > **)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -23652,7 +24175,7 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_0(PyObject *SWIGUNUSEDPARM(se
   SpMatrix< bool > **arg5 = (SpMatrix< bool > **) 0 ;
   Vector< int > **arg6 = (Vector< int > **) 0 ;
   Vector< int > **arg7 = (Vector< int > **) 0 ;
-  int *data_temp2 ;
+  int *data_temp2 = NULL ;
   int dim_temp2 ;
   Vector< double > *data_temp4 ;
   SpMatrix< bool > *data_temp5 ;
@@ -23718,9 +24241,11 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_0(PyObject *SWIGUNUSEDPARM(se
     npy_intp dims[1] = {
       *arg3 
     };
-    PyObject * array = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
+    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
+    PyArrayObject* array = (PyArrayObject*) obj;
+    
     if (!array) SWIG_fail;
-    resultobj = SWIG_Python_AppendOutput(resultobj,array);
+    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
   }
   {
     if(data_temp4 != NULL) {
@@ -23822,7 +24347,7 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_1(PyObject *SWIGUNUSEDPARM(se
   SpMatrix< bool > **arg5 = (SpMatrix< bool > **) 0 ;
   Vector< int > **arg6 = (Vector< int > **) 0 ;
   Vector< int > **arg7 = (Vector< int > **) 0 ;
-  int *data_temp2 ;
+  int *data_temp2 = NULL ;
   int dim_temp2 ;
   void *argp4 = 0 ;
   int res4 = 0 ;
@@ -23892,9 +24417,11 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_1(PyObject *SWIGUNUSEDPARM(se
     npy_intp dims[1] = {
       *arg3 
     };
-    PyObject * array = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
+    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
+    PyArrayObject* array = (PyArrayObject*) obj;
+    
     if (!array) SWIG_fail;
-    resultobj = SWIG_Python_AppendOutput(resultobj,array);
+    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
   }
   {
     if(data_temp5 != NULL) {
@@ -23976,13 +24503,15 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_1(PyObject *SWIGUNUSEDPARM(se
 
 
 SWIGINTERN PyObject *_wrap_treeOfGroupStruct(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[3];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[3] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 1) {
@@ -24012,11 +24541,11 @@ SWIGINTERN PyObject *_wrap_treeOfGroupStruct(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'treeOfGroupStruct'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'treeOfGroupStruct'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _treeOfGroupStruct< double >(std::vector< StructNodeElem< double > * > *,int **,int *,Vector< double > **,SpMatrix< bool > **,Vector< int > **,Vector< int > **)\n"
     "    _treeOfGroupStruct< float >(std::vector< StructNodeElem< float > * > *,int **,int *,Vector< float > **,SpMatrix< bool > **,Vector< int > **,Vector< int > **)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -24043,7 +24572,7 @@ SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_0(PyObject *SWIGUNUSEDPARM(self)
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOO:im2col_sliding",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -24060,7 +24589,7 @@ SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_0(PyObject *SWIGUNUSEDPARM(self)
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -24142,7 +24671,7 @@ SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_1(PyObject *SWIGUNUSEDPARM(self)
   
   if (!PyArg_ParseTuple(args,(char *)"OOOOO:im2col_sliding",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array1 = obj_to_array_no_conversion(obj0, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -24159,7 +24688,7 @@ SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_1(PyObject *SWIGUNUSEDPARM(self)
     /*@SWIG@*/
   }
   {
-    /*@SWIG:py_typemaps.i,86,map_matrix@*/
+    /*@SWIG:py_typemaps.i,84,map_matrix@*/
     array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
     /* !!!!!
     	WARNING! bug (?) : the variable name choosen above must not appear
@@ -24219,13 +24748,15 @@ SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_1(PyObject *SWIGUNUSEDPARM(self)
 
 
 SWIGINTERN PyObject *_wrap_im2col_sliding(PyObject *self, PyObject *args) {
-  int argc;
-  PyObject *argv[6];
-  int ii;
+  Py_ssize_t argc;
+  PyObject *argv[6] = {
+    0
+  };
+  Py_ssize_t ii;
   
   if (!PyTuple_Check(args)) SWIG_fail;
-  argc = (int)PyObject_Length(args);
-  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
+  argc = args ? PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
     argv[ii] = PyTuple_GET_ITEM(args,ii);
   }
   if (argc == 5) {
@@ -24298,11 +24829,11 @@ SWIGINTERN PyObject *_wrap_im2col_sliding(PyObject *self, PyObject *args) {
   }
   
 fail:
-  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'im2col_sliding'.\n"
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'im2col_sliding'.\n"
     "  Possible C/C++ prototypes are:\n"
     "    _im2col_sliding< double >(Matrix< double > *,Matrix< double > *,int,int,bool)\n"
     "    _im2col_sliding< float >(Matrix< float > *,Matrix< float > *,int,int,bool)\n");
-  return NULL;
+  return 0;
 }
 
 
@@ -24313,353 +24844,142 @@ static PyMethodDef SwigMethods[] = {
 	 { (char *)"parse_line", _wrap_parse_line, METH_VARARGS, NULL},
 	 { (char *)"intlist", _wrap_intlist, METH_VARARGS, NULL},
 	 { (char *)"sort", _wrap_sort, METH_VARARGS, (char *)"\n"
-		"sort(Vector<(double)> v, bool mode)\n"
-		"sort(Vector<(float)> v, bool mode)\n"
+		"sort(Vector< double > * v, bool mode)\n"
+		"sort(Vector< float > * v, bool mode)\n"
 		""},
 	 { (char *)"mult", _wrap_mult, METH_VARARGS, (char *)"\n"
-		"mult(Matrix<(double)> X, Matrix<(double)> Y, Matrix<(double)> XY, \n"
-		"    bool transX, bool transY, double a, \n"
-		"    double b)\n"
-		"mult(Matrix<(float)> X, Matrix<(float)> Y, Matrix<(float)> XY, \n"
-		"    bool transX, bool transY, float a, float b)\n"
+		"mult(Matrix< double > * X, Matrix< double > * Y, Matrix< double > * XY, bool const transX, bool const transY, double const a, double const b)\n"
+		"mult(Matrix< float > * X, Matrix< float > * Y, Matrix< float > * XY, bool const transX, bool const transY, float const a, float const b)\n"
 		""},
 	 { (char *)"AAt", _wrap_AAt, METH_VARARGS, (char *)"\n"
-		"AAt(SpMatrix<(double)> A, Matrix<(double)> B)\n"
-		"AAt(SpMatrix<(float)> A, Matrix<(float)> B)\n"
+		"AAt(SpMatrix< double > * A, Matrix< double > * B)\n"
+		"AAt(SpMatrix< float > * A, Matrix< float > * B)\n"
 		""},
 	 { (char *)"XAt", _wrap_XAt, METH_VARARGS, (char *)"\n"
-		"XAt(SpMatrix<(double)> A, Matrix<(double)> X, Matrix<(double)> XAt)\n"
-		"XAt(SpMatrix<(float)> A, Matrix<(float)> X, Matrix<(float)> XAt)\n"
+		"XAt(SpMatrix< double > * A, Matrix< double > * X, Matrix< double > * XAt)\n"
+		"XAt(SpMatrix< float > * A, Matrix< float > * X, Matrix< float > * XAt)\n"
 		""},
 	 { (char *)"applyBayerPattern", _wrap_applyBayerPattern, METH_VARARGS, (char *)"\n"
-		"applyBayerPattern(Vector<(double)> v, int offset)\n"
-		"applyBayerPattern(Vector<(float)> v, int offset)\n"
+		"applyBayerPattern(Vector< double > * v, int offset)\n"
+		"applyBayerPattern(Vector< float > * v, int offset)\n"
 		""},
 	 { (char *)"conjugateGradient", _wrap_conjugateGradient, METH_VARARGS, (char *)"\n"
-		"conjugateGradient(Matrix<(double)> A, Vector<(double)> b, Vector<(double)> x, \n"
-		"    double tol, int itermax)\n"
-		"conjugateGradient(Matrix<(float)> A, Vector<(float)> b, Vector<(float)> x, \n"
-		"    float tol, int itermax)\n"
+		"conjugateGradient(Matrix< double > * A, Vector< double > * b, Vector< double > * x, double const tol, int const itermax)\n"
+		"conjugateGradient(Matrix< float > * A, Vector< float > * b, Vector< float > * x, float const tol, int const itermax)\n"
 		""},
 	 { (char *)"invSym", _wrap_invSym, METH_VARARGS, (char *)"\n"
-		"invSym(Matrix<(double)> A)\n"
-		"invSym(Matrix<(float)> A)\n"
+		"invSym(Matrix< double > * A)\n"
+		"invSym(Matrix< float > * A)\n"
 		""},
 	 { (char *)"normalize", _wrap_normalize, METH_VARARGS, (char *)"\n"
-		"normalize(Matrix<(double)> A)\n"
-		"normalize(Matrix<(float)> A)\n"
+		"normalize(Matrix< double > * A)\n"
+		"normalize(Matrix< float > * A)\n"
 		""},
+	 { (char *)"L1COEFFS_swigconstant", L1COEFFS_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L2ERROR_swigconstant", L2ERROR_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"PENALTY_swigconstant", PENALTY_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"SPARSITY_swigconstant", SPARSITY_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L2ERROR2_swigconstant", L2ERROR2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"PENALTY2_swigconstant", PENALTY2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"FISTAMODE_swigconstant", FISTAMODE_swigconstant, METH_VARARGS, NULL},
 	 { (char *)"sparseProject", _wrap_sparseProject, METH_VARARGS, (char *)"\n"
-		"sparseProject(Matrix<(double)> U, Matrix<(double)> V, double thrs, \n"
-		"    int mode, double lambda1, double lambda2, double lambda3, \n"
-		"    bool pos, int numThreads)\n"
-		"sparseProject(Matrix<(float)> U, Matrix<(float)> V, float thrs, int mode, \n"
-		"    float lambda1, float lambda2, float lambda3, \n"
-		"    bool pos, int numThreads)\n"
+		"sparseProject(Matrix< double > * U, Matrix< double > * V, double const thrs, int const mode, double const lambda1, double const lambda2, double const lambda3, bool const pos, int const numThreads)\n"
+		"sparseProject(Matrix< float > * U, Matrix< float > * V, float const thrs, int const mode, float const lambda1, float const lambda2, float const lambda3, bool const pos, int const numThreads)\n"
 		""},
 	 { (char *)"lassoD", _wrap_lassoD, METH_VARARGS, (char *)"\n"
-		"lassoD(Matrix<(double)> X, Matrix<(double)> D, bool return_reg_path, \n"
-		"    int L, double constraint, double lambda2, \n"
-		"    constraint_type mode, bool pos, bool ols, \n"
-		"    int numThreads, int max_length_path, bool verbose, \n"
-		"    bool cholevsky) -> SpMatrix<(double)>\n"
-		"lassoD(Matrix<(float)> X, Matrix<(float)> D, bool return_reg_path, \n"
-		"    int L, float constraint, float lambda2, \n"
-		"    constraint_type mode, bool pos, bool ols, \n"
-		"    int numThreads, int max_length_path, bool verbose, \n"
-		"    bool cholevsky) -> SpMatrix<(float)>\n"
+		"lassoD(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double >\n"
+		"lassoD(Matrix< float > * X, Matrix< float > * D, bool return_reg_path, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"lassoQq", _wrap_lassoQq, METH_VARARGS, (char *)"\n"
-		"lassoQq(Matrix<(double)> X, Matrix<(double)> Q, Matrix<(double)> q, \n"
-		"    bool return_reg_path, int L, double constraint, \n"
-		"    double lambda2, constraint_type mode, \n"
-		"    bool pos, bool ols, int numThreads, int max_length_path, \n"
-		"    bool verbose, bool cholevsky) -> SpMatrix<(double)>\n"
-		"lassoQq(Matrix<(float)> X, Matrix<(float)> Q, Matrix<(float)> q, \n"
-		"    bool return_reg_path, int L, float constraint, \n"
-		"    float lambda2, constraint_type mode, \n"
-		"    bool pos, bool ols, int numThreads, int max_length_path, \n"
-		"    bool verbose, bool cholevsky) -> SpMatrix<(float)>\n"
+		"lassoQq(Matrix< double > * X, Matrix< double > * Q, Matrix< double > * q, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double >\n"
+		"lassoQq(Matrix< float > * X, Matrix< float > * Q, Matrix< float > * q, bool return_reg_path, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"lassoMask", _wrap_lassoMask, METH_VARARGS, (char *)"\n"
-		"lassoMask(Matrix<(double)> X, Matrix<(double)> D, Matrix<(bool)> B, \n"
-		"    int L, double constraint, double lambda2, \n"
-		"    constraint_type mode, bool pos, int numThreads, \n"
-		"    bool verbose) -> SpMatrix<(double)>\n"
-		"lassoMask(Matrix<(float)> X, Matrix<(float)> D, Matrix<(bool)> B, \n"
-		"    int L, float constraint, float lambda2, \n"
-		"    constraint_type mode, bool pos, int numThreads, \n"
-		"    bool verbose) -> SpMatrix<(float)>\n"
+		"lassoMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double >\n"
+		"lassoMask(Matrix< float > * X, Matrix< float > * D, Matrix< bool > * B, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"lassoWeighted", _wrap_lassoWeighted, METH_VARARGS, (char *)"\n"
-		"lassoWeighted(Matrix<(double)> X, Matrix<(double)> D, Matrix<(double)> W, \n"
-		"    int L, double constraint, constraint_type mode, \n"
-		"    bool pos, int numThreads, bool verbose) -> SpMatrix<(double)>\n"
-		"lassoWeighted(Matrix<(float)> X, Matrix<(float)> D, Matrix<(float)> W, \n"
-		"    int L, float constraint, constraint_type mode, \n"
-		"    bool pos, int numThreads, bool verbose) -> SpMatrix<(float)>\n"
+		"lassoWeighted(Matrix< double > * X, Matrix< double > * D, Matrix< double > * W, int L, double const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double >\n"
+		"lassoWeighted(Matrix< float > * X, Matrix< float > * D, Matrix< float > * W, int L, float const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"omp", _wrap_omp, METH_VARARGS, (char *)"\n"
-		"omp(Matrix<(double)> X, Matrix<(double)> D, bool return_reg_path, \n"
-		"    bool given_L, Vector<(int)> L, bool given_eps, \n"
-		"    Vector<(double)> eps, bool given_Lambda, \n"
-		"    Vector<(double)> Lambda, int numThreads) -> SpMatrix<(double)>\n"
-		"omp(Matrix<(float)> X, Matrix<(float)> D, bool return_reg_path, \n"
-		"    bool given_L, Vector<(int)> L, bool given_eps, \n"
-		"    Vector<(float)> eps, bool given_Lambda, \n"
-		"    Vector<(float)> Lambda, int numThreads) -> SpMatrix<(float)>\n"
+		"omp(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double >\n"
+		"omp(Matrix< float > * X, Matrix< float > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< float > * eps, bool given_Lambda, Vector< float > * Lambda, int const numThreads) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"ompMask", _wrap_ompMask, METH_VARARGS, (char *)"\n"
-		"ompMask(Matrix<(double)> X, Matrix<(double)> D, Matrix<(bool)> B, \n"
-		"    bool return_reg_path, bool given_L, Vector<(int)> L, \n"
-		"    bool given_eps, Vector<(double)> eps, \n"
-		"    bool given_Lambda, Vector<(double)> Lambda, \n"
-		"    int numThreads) -> SpMatrix<(double)>\n"
-		"ompMask(Matrix<(float)> X, Matrix<(float)> D, Matrix<(bool)> B, \n"
-		"    bool return_reg_path, bool given_L, Vector<(int)> L, \n"
-		"    bool given_eps, Vector<(float)> eps, \n"
-		"    bool given_Lambda, Vector<(float)> Lambda, \n"
-		"    int numThreads) -> SpMatrix<(float)>\n"
+		"ompMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double >\n"
+		"ompMask(Matrix< float > * X, Matrix< float > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< float > * eps, bool given_Lambda, Vector< float > * Lambda, int const numThreads) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"somp", _wrap_somp, METH_VARARGS, (char *)"\n"
-		"somp(Matrix<(double)> X, Matrix<(double)> D, Vector<(int)> groups, \n"
-		"    int LL, double eps, int numThreads) -> SpMatrix<(double)>\n"
-		"somp(Matrix<(float)> X, Matrix<(float)> D, Vector<(int)> groups, \n"
-		"    int LL, float eps, int numThreads) -> SpMatrix<(float)>\n"
+		"somp(Matrix< double > * X, Matrix< double > * D, Vector< int > * groups, int LL, double eps, int numThreads) -> SpMatrix< double >\n"
+		"somp(Matrix< float > * X, Matrix< float > * D, Vector< int > * groups, int LL, float eps, int numThreads) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"cd", _wrap_cd, METH_VARARGS, (char *)"\n"
-		"cd(Matrix<(double)> X, Matrix<(double)> D, SpMatrix<(double)> alpha, \n"
-		"    double lambda1, constraint_type mode, \n"
-		"    int itermax, double tol, int numThreads) -> SpMatrix<(double)>\n"
-		"cd(Matrix<(float)> X, Matrix<(float)> D, SpMatrix<(float)> alpha, \n"
-		"    float lambda1, constraint_type mode, \n"
-		"    int itermax, float tol, int numThreads) -> SpMatrix<(float)>\n"
+		"cd(Matrix< double > * X, Matrix< double > * D, SpMatrix< double > * alpha, double lambda1, constraint_type mode, int itermax, double tol, int numThreads) -> SpMatrix< double >\n"
+		"cd(Matrix< float > * X, Matrix< float > * D, SpMatrix< float > * alpha, float lambda1, constraint_type mode, int itermax, float tol, int numThreads) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"l1L2BCD", _wrap_l1L2BCD, METH_VARARGS, (char *)"\n"
-		"l1L2BCD(Matrix<(double)> X, Matrix<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Vector<(int)> groups, double lambda1, \n"
-		"    constraint_type mode, int itermax, double tol, \n"
-		"    int numThreads)\n"
-		"l1L2BCD(Matrix<(float)> X, Matrix<(float)> D, Matrix<(float)> alpha0, \n"
-		"    Vector<(int)> groups, float lambda1, \n"
-		"    constraint_type mode, int itermax, float tol, \n"
-		"    int numThreads)\n"
+		"l1L2BCD(Matrix< double > * X, Matrix< double > * D, Matrix< double > * alpha0, Vector< int > * groups, double lambda1, constraint_type mode, int itermax, double tol, int numThreads)\n"
+		"l1L2BCD(Matrix< float > * X, Matrix< float > * D, Matrix< float > * alpha0, Vector< int > * groups, float lambda1, constraint_type mode, int itermax, float tol, int numThreads)\n"
 		""},
+	 { (char *)"L2_swigconstant", L2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L1L2_swigconstant", L1L2_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L1L2FL_swigconstant", L1L2FL_swigconstant, METH_VARARGS, NULL},
+	 { (char *)"L1L2MU_swigconstant", L1L2MU_swigconstant, METH_VARARGS, NULL},
 	 { (char *)"alltrainDL", _wrap_alltrainDL, METH_VARARGS, (char *)"\n"
-		"alltrainDL(Data<(double)> X, bool in_memory, bool return_model, \n"
-		"    Matrix<(double)> m_A, Matrix<(double)> m_B, \n"
-		"    int m_iter, Matrix<(double)> D1, Vector<(double)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, \n"
-		"    Vector<(int)> own_variables, \n"
-		"    Vector<(int)> N_own_variables, int num_threads, \n"
-		"    double tol, bool fixed_step, bool ista, \n"
-		"    int batch_size, int K, double lambda1, double lambda2, \n"
-		"    double lambda3, int iter, double t0, \n"
-		"    constraint_type mode, char name_regul, \n"
-		"    bool posAlpha, bool posD, bool expand, constraint_type_D modeD, \n"
-		"    bool whiten, bool clean, bool verbose, \n"
-		"    double gamma1, double gamma2, double rho, \n"
-		"    int iter_updateD, bool stochastic, \n"
-		"    int modeParam, bool batch, bool log, char logName) -> Matrix<(double)>\n"
-		"alltrainDL(Data<(float)> X, bool in_memory, bool return_model, \n"
-		"    Matrix<(float)> m_A, Matrix<(float)> m_B, int m_iter, \n"
-		"    Matrix<(float)> D1, Vector<(float)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, \n"
-		"    Vector<(int)> own_variables, \n"
-		"    Vector<(int)> N_own_variables, int num_threads, \n"
-		"    float tol, bool fixed_step, bool ista, int batch_size, \n"
-		"    int K, double lambda1, double lambda2, \n"
-		"    double lambda3, int iter, double t0, \n"
-		"    constraint_type mode, char name_regul, bool posAlpha, \n"
-		"    bool posD, bool expand, constraint_type_D modeD, \n"
-		"    bool whiten, bool clean, bool verbose, \n"
-		"    double gamma1, double gamma2, float rho, \n"
-		"    int iter_updateD, bool stochastic, int modeParam, \n"
-		"    bool batch, bool log, char logName) -> Matrix<(float)>\n"
+		"alltrainDL(Data< double > * X, bool in_memory, bool return_model, Matrix< double > * m_A, Matrix< double > * m_B, int m_iter, Matrix< double > * D1, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, double rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< double >\n"
+		"alltrainDL(Data< float > * X, bool in_memory, bool return_model, Matrix< float > * m_A, Matrix< float > * m_B, int m_iter, Matrix< float > * D1, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, float tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, float rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< float > *\n"
 		""},
 	 { (char *)"archetypalAnalysis", _wrap_archetypalAnalysis, METH_VARARGS, (char *)"\n"
-		"archetypalAnalysis(Matrix<(double)> X, int p, bool robust, double epsilon, \n"
-		"    bool computeXtX, int stepsFISTA, int stepsAS, \n"
-		"    bool randominit, int numThreads) -> Matrix<(double)>\n"
-		"archetypalAnalysis(Matrix<(float)> X, int p, bool robust, float epsilon, \n"
-		"    bool computeXtX, int stepsFISTA, int stepsAS, \n"
-		"    bool randominit, int numThreads) -> Matrix<(float)>\n"
+		"archetypalAnalysis(Matrix< double > * X, int p, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< double >\n"
+		"archetypalAnalysis(Matrix< float > * X, int p, bool robust, float epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< float > *\n"
 		""},
 	 { (char *)"archetypalAnalysisInit", _wrap_archetypalAnalysisInit, METH_VARARGS, (char *)"\n"
-		"archetypalAnalysisInit(Matrix<(double)> X, Matrix<(double)> Z0, bool robust, \n"
-		"    double epsilon, bool computeXtX, int stepsFISTA, \n"
-		"    int stepsAS, int numThreads) -> Matrix<(double)>\n"
-		"archetypalAnalysisInit(Matrix<(float)> X, Matrix<(float)> Z0, bool robust, \n"
-		"    float epsilon, bool computeXtX, int stepsFISTA, \n"
-		"    int stepsAS, int numThreads) -> Matrix<(float)>\n"
+		"archetypalAnalysisInit(Matrix< double > * X, Matrix< double > * Z0, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< double >\n"
+		"archetypalAnalysisInit(Matrix< float > * X, Matrix< float > * Z0, bool robust, float epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< float > *\n"
 		""},
 	 { (char *)"decompSimplex", _wrap_decompSimplex, METH_VARARGS, (char *)"\n"
-		"decompSimplex(Matrix<(double)> X, Matrix<(double)> Z, bool computeXtX, \n"
-		"    int numThreads) -> SpMatrix<(double)>\n"
-		"decompSimplex(Matrix<(float)> X, Matrix<(float)> Z, bool computeXtX, \n"
-		"    int numThreads) -> SpMatrix<(float)>\n"
+		"decompSimplex(Matrix< double > * X, Matrix< double > * Z, bool computeXtX, int numThreads) -> SpMatrix< double >\n"
+		"decompSimplex(Matrix< float > * X, Matrix< float > * Z, bool computeXtX, int numThreads) -> SpMatrix< float > *\n"
 		""},
 	 { (char *)"fistaFlat", _wrap_fistaFlat, METH_VARARGS, (char *)"\n"
-		"fistaFlat(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Matrix<(double)> alpha, \n"
-		"    Vector<(int)> groups, int num_threads, int max_it, \n"
-		"    double L0, bool fixed_step, double gamma, \n"
-		"    double _lambda, double delta, double lambda2, \n"
-		"    double lambda3, double a, double b, double c, \n"
-		"    double tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, bool admm, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    char name_loss, bool verbose, bool pos, \n"
-		"    bool clever, bool log, bool ista, bool subgrad, \n"
-		"    char logName, bool is_inner_weights, \n"
-		"    Vector<(double)> inner_weights, int size_group, \n"
-		"    bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(double)>\n"
-		"fistaFlat(Matrix<(float)> X, AbstractMatrixB<(float)> D, Matrix<(float)> alpha0, \n"
-		"    Matrix<(float)> alpha, Vector<(int)> groups, \n"
-		"    int num_threads, int max_it, \n"
-		"    float L0, bool fixed_step, float gamma, float _lambda, \n"
-		"    float delta, float lambda2, float lambda3, \n"
-		"    float a, float b, float c, float tol, \n"
-		"    int it0, int max_iter_backtracking, bool compute_gram, \n"
-		"    bool lin_admm, bool admm, bool intercept, \n"
-		"    bool resetflow, char name_regul, \n"
-		"    char name_loss, bool verbose, bool pos, bool clever, \n"
-		"    bool log, bool ista, bool subgrad, char logName, \n"
-		"    bool is_inner_weights, Vector<(float)> inner_weights, \n"
-		"    int size_group, bool sqrt_step, \n"
-		"    bool transpose, int linesearch_mode) -> Matrix<(float)>\n"
+		"fistaFlat(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >\n"
+		"fistaFlat(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< int > * groups, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *\n"
 		""},
 	 { (char *)"fistaTree", _wrap_fistaTree, METH_VARARGS, (char *)"\n"
-		"fistaTree(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Matrix<(double)> alpha, \n"
-		"    Vector<(double)> eta_g, SpMatrix<(bool)> groups, \n"
-		"    Vector<(int)> own_variables, Vector<(int)> N_own_variables, \n"
-		"    int num_threads, int max_it, \n"
-		"    double L0, bool fixed_step, double gamma, \n"
-		"    double _lambda, double delta, double lambda2, \n"
-		"    double lambda3, double a, double b, double c, \n"
-		"    double tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, bool admm, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    char name_loss, bool verbose, bool pos, \n"
-		"    bool clever, bool log, bool ista, bool subgrad, \n"
-		"    char logName, bool is_inner_weights, \n"
-		"    Vector<(double)> inner_weights, int size_group, \n"
-		"    bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(double)>\n"
-		"fistaTree(Matrix<(float)> X, AbstractMatrixB<(float)> D, Matrix<(float)> alpha0, \n"
-		"    Matrix<(float)> alpha, Vector<(float)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, \n"
-		"    Vector<(int)> own_variables, Vector<(int)> N_own_variables, \n"
-		"    int num_threads, int max_it, \n"
-		"    float L0, bool fixed_step, float gamma, float _lambda, \n"
-		"    float delta, float lambda2, float lambda3, \n"
-		"    float a, float b, float c, float tol, \n"
-		"    int it0, int max_iter_backtracking, bool compute_gram, \n"
-		"    bool lin_admm, bool admm, bool intercept, \n"
-		"    bool resetflow, char name_regul, char name_loss, \n"
-		"    bool verbose, bool pos, bool clever, \n"
-		"    bool log, bool ista, bool subgrad, char logName, \n"
-		"    bool is_inner_weights, Vector<(float)> inner_weights, \n"
-		"    int size_group, bool sqrt_step, \n"
-		"    bool transpose, int linesearch_mode) -> Matrix<(float)>\n"
+		"fistaTree(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >\n"
+		"fistaTree(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *\n"
 		""},
 	 { (char *)"fistaGraph", _wrap_fistaGraph, METH_VARARGS, (char *)"\n"
-		"fistaGraph(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, \n"
-		"    Matrix<(double)> alpha, \n"
-		"    Vector<(double)> eta_g, SpMatrix<(bool)> groups, \n"
-		"    SpMatrix<(bool)> groups_var, int num_threads, \n"
-		"    int max_it, double L0, bool fixed_step, \n"
-		"    double gamma, double _lambda, double delta, \n"
-		"    double lambda2, double lambda3, double a, double b, \n"
-		"    double c, double tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, \n"
-		"    bool admm, bool intercept, bool resetflow, \n"
-		"    char name_regul, char name_loss, bool verbose, \n"
-		"    bool pos, bool clever, bool log, bool ista, \n"
-		"    bool subgrad, char logName, bool is_inner_weights, \n"
-		"    Vector<(double)> inner_weights, \n"
-		"    int size_group, bool sqrt_step, bool transpose, \n"
-		"    int linesearch_mode) -> Matrix<(double)>\n"
-		"fistaGraph(Matrix<(float)> X, AbstractMatrixB<(float)> D, Matrix<(float)> alpha0, \n"
-		"    Matrix<(float)> alpha, Vector<(float)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, \n"
-		"    SpMatrix<(bool)> groups_var, int num_threads, \n"
-		"    int max_it, float L0, bool fixed_step, float gamma, \n"
-		"    float _lambda, float delta, float lambda2, \n"
-		"    float lambda3, float a, float b, float c, \n"
-		"    float tol, int it0, int max_iter_backtracking, \n"
-		"    bool compute_gram, bool lin_admm, bool admm, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    char name_loss, bool verbose, bool pos, \n"
-		"    bool clever, bool log, bool ista, bool subgrad, \n"
-		"    char logName, bool is_inner_weights, \n"
-		"    Vector<(float)> inner_weights, int size_group, \n"
-		"    bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(float)>\n"
+		"fistaGraph(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >\n"
+		"fistaGraph(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *\n"
 		""},
 	 { (char *)"proximalFlat", _wrap_proximalFlat, METH_VARARGS, (char *)"\n"
-		"proximalFlat(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(int)> groups, \n"
-		"    int num_threads, double lambda1, \n"
-		"    double lambda2, double lambda3, bool intercept, \n"
-		"    bool resetflow, char name_regul, bool verbose, \n"
-		"    bool pos, bool clever, bool eval, \n"
-		"    int size_group, bool transpose) -> Vector<(double)>\n"
-		"proximalFlat(Matrix<(float)> alpha0, Matrix<(float)> alpha, Vector<(int)> groups, \n"
-		"    int num_threads, float lambda1, \n"
-		"    float lambda2, float lambda3, bool intercept, \n"
-		"    bool resetflow, char name_regul, bool verbose, \n"
-		"    bool pos, bool clever, bool eval, int size_group, \n"
-		"    bool transpose) -> Vector<(float)>\n"
+		"proximalFlat(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >\n"
+		"proximalFlat(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< int > * groups, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *\n"
 		""},
 	 { (char *)"proximalTree", _wrap_proximalTree, METH_VARARGS, (char *)"\n"
-		"proximalTree(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(double)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, \n"
-		"    Vector<(int)> own_variables, Vector<(int)> N_own_variables, \n"
-		"    int num_threads, double lambda1, \n"
-		"    double lambda2, double lambda3, bool intercept, \n"
-		"    bool resetflow, char name_regul, bool verbose, \n"
-		"    bool pos, bool clever, bool eval, int size_group, \n"
-		"    bool transpose) -> Vector<(double)>\n"
-		"proximalTree(Matrix<(float)> alpha0, Matrix<(float)> alpha, Vector<(float)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, Vector<(int)> own_variables, \n"
-		"    Vector<(int)> N_own_variables, \n"
-		"    int num_threads, float lambda1, \n"
-		"    float lambda2, float lambda3, bool intercept, \n"
-		"    bool resetflow, char name_regul, bool verbose, \n"
-		"    bool pos, bool clever, bool eval, int size_group, \n"
-		"    bool transpose) -> Vector<(float)>\n"
+		"proximalTree(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >\n"
+		"proximalTree(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *\n"
 		""},
 	 { (char *)"proximalGraph", _wrap_proximalGraph, METH_VARARGS, (char *)"\n"
-		"proximalGraph(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(double)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, \n"
-		"    SpMatrix<(bool)> groups_var, int num_threads, \n"
-		"    double lambda1, double lambda2, double lambda3, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    bool verbose, bool pos, bool clever, \n"
-		"    bool eval, int size_group, bool transpose) -> Vector<(double)>\n"
-		"proximalGraph(Matrix<(float)> alpha0, Matrix<(float)> alpha, Vector<(float)> eta_g, \n"
-		"    SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, \n"
-		"    int num_threads, \n"
-		"    float lambda1, float lambda2, float lambda3, \n"
-		"    bool intercept, bool resetflow, char name_regul, \n"
-		"    bool verbose, bool pos, bool clever, bool eval, \n"
-		"    int size_group, bool transpose) -> Vector<(float)>\n"
+		"proximalGraph(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >\n"
+		"proximalGraph(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *\n"
 		""},
-	 { (char *)"simpleGroupTree", _wrap_simpleGroupTree, METH_VARARGS, (char *)"simpleGroupTree(int degr) -> std::vector<(p.StructNodeElem<(double)>)>"},
-	 { (char *)"readGroupStruct", _wrap_readGroupStruct, METH_VARARGS, (char *)"readGroupStruct(char file) -> std::vector<(p.StructNodeElem<(double)>)>"},
-	 { (char *)"groupStructOfString", _wrap_groupStructOfString, METH_VARARGS, (char *)"groupStructOfString(char data) -> std::vector<(p.StructNodeElem<(double)>)>"},
+	 { (char *)"simpleGroupTree", _wrap_simpleGroupTree, METH_VARARGS, (char *)"simpleGroupTree(int * degr) -> std::vector< StructNodeElem< double > * > *"},
+	 { (char *)"readGroupStruct", _wrap_readGroupStruct, METH_VARARGS, (char *)"readGroupStruct(char const * file) -> std::vector< StructNodeElem< double > * > *"},
+	 { (char *)"groupStructOfString", _wrap_groupStructOfString, METH_VARARGS, (char *)"groupStructOfString(char const * data) -> std::vector< StructNodeElem< double > * > *"},
 	 { (char *)"graphOfGroupStruct", _wrap_graphOfGroupStruct, METH_VARARGS, (char *)"\n"
-		"graphOfGroupStruct(std::vector<(p.StructNodeElem<(double)>)> gstruct) -> Vector<(double)>\n"
-		"graphOfGroupStruct(std::vector<(p.StructNodeElem<(float)>)> gstruct) -> Vector<(float)>\n"
+		"graphOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> Vector< double >\n"
+		"graphOfGroupStruct(std::vector< StructNodeElem< float > * > * gstruct) -> Vector< float > *\n"
 		""},
 	 { (char *)"treeOfGroupStruct", _wrap_treeOfGroupStruct, METH_VARARGS, (char *)"\n"
-		"treeOfGroupStruct(std::vector<(p.StructNodeElem<(double)>)> gstruct) -> int\n"
-		"treeOfGroupStruct(std::vector<(p.StructNodeElem<(float)>)> gstruct, Vector<(float)> peta_g) -> int\n"
+		"treeOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> int\n"
+		"treeOfGroupStruct(std::vector< StructNodeElem< float > * > * gstruct, Vector< float > ** peta_g) -> int\n"
 		""},
 	 { (char *)"im2col_sliding", _wrap_im2col_sliding, METH_VARARGS, (char *)"\n"
-		"im2col_sliding(Matrix<(double)> A, Matrix<(double)> B, int m, int n, \n"
-		"    bool RGB)\n"
-		"im2col_sliding(Matrix<(float)> A, Matrix<(float)> B, int m, int n, \n"
-		"    bool RGB)\n"
+		"im2col_sliding(Matrix< double > * A, Matrix< double > * B, int m, int n, bool RGB)\n"
+		"im2col_sliding(Matrix< float > * A, Matrix< float > * B, int m, int n, bool RGB)\n"
 		""},
 	 { NULL, NULL, 0, NULL }
 };
@@ -24726,18 +25046,18 @@ static swig_const_info swig_const_table[] = {
 #endif
 /* -----------------------------------------------------------------------------
  * Type initialization:
- * This problem is tough by the requirement that no dynamic 
- * memory is used. Also, since swig_type_info structures store pointers to 
+ * This problem is tough by the requirement that no dynamic
+ * memory is used. Also, since swig_type_info structures store pointers to
  * swig_cast_info structures and swig_cast_info structures store pointers back
- * to swig_type_info structures, we need some lookup code at initialization. 
- * The idea is that swig generates all the structures that are needed. 
- * The runtime then collects these partially filled structures. 
- * The SWIG_InitializeModule function takes these initial arrays out of 
+ * to swig_type_info structures, we need some lookup code at initialization.
+ * The idea is that swig generates all the structures that are needed.
+ * The runtime then collects these partially filled structures.
+ * The SWIG_InitializeModule function takes these initial arrays out of
  * swig_module, and does all the lookup, filling in the swig_module.types
  * array with the correct data and linking the correct swig_cast_info
  * structures together.
  *
- * The generated swig_type_info structures are assigned staticly to an initial 
+ * The generated swig_type_info structures are assigned statically to an initial
  * array. We just loop through that array, and handle each type individually.
  * First we lookup if this type has been already loaded, and if so, use the
  * loaded structure instead of the generated one. Then we have to fill in the
@@ -24747,17 +25067,17 @@ static swig_const_info swig_const_table[] = {
  * a column is one of the swig_cast_info structures for that type.
  * The cast_initial array is actually an array of arrays, because each row has
  * a variable number of columns. So to actually build the cast linked list,
- * we find the array of casts associated with the type, and loop through it 
+ * we find the array of casts associated with the type, and loop through it
  * adding the casts to the list. The one last trick we need to do is making
  * sure the type pointer in the swig_cast_info struct is correct.
  *
- * First off, we lookup the cast->type name to see if it is already loaded. 
+ * First off, we lookup the cast->type name to see if it is already loaded.
  * There are three cases to handle:
  *  1) If the cast->type has already been loaded AND the type we are adding
  *     casting info to has not been loaded (it is in this module), THEN we
  *     replace the cast->type pointer with the type pointer that has already
  *     been loaded.
- *  2) If BOTH types (the one we are adding casting info to, and the 
+ *  2) If BOTH types (the one we are adding casting info to, and the
  *     cast->type) are loaded, THEN the cast info has already been loaded by
  *     the previous module so we just ignore it.
  *  3) Finally, if cast->type has not already been loaded, then we add that
@@ -24781,9 +25101,7 @@ SWIGRUNTIME void
 SWIG_InitializeModule(void *clientdata) {
   size_t i;
   swig_module_info *module_head, *iter;
-  int found, init;
-  
-  clientdata = clientdata;
+  int init;
   
   /* check to see if the circular list has been setup, if not, set it up */
   if (swig_module.next==0) {
@@ -24802,27 +25120,23 @@ SWIG_InitializeModule(void *clientdata) {
     /* This is the first module loaded for this interpreter */
     /* so set the swig module into the interpreter */
     SWIG_SetModule(clientdata, &swig_module);
-    module_head = &swig_module;
   } else {
     /* the interpreter has loaded a SWIG module, but has it loaded this one? */
-    found=0;
     iter=module_head;
     do {
       if (iter==&swig_module) {
-        found=1;
-        break;
+        /* Our module is already in the list, so there's nothing more to do. */
+        return;
       }
       iter=iter->next;
     } while (iter!= module_head);
     
-    /* if the is found in the list, then all is done and we may leave */
-    if (found) return;
-    /* otherwise we must add out module into the list */
+    /* otherwise we must add our module into the list */
     swig_module.next = module_head->next;
     module_head->next = &swig_module;
   }
   
-  /* When multiple interpeters are used, a module could have already been initialized in
+  /* When multiple interpreters are used, a module could have already been initialized in
        a different interpreter, but not yet have a pointer in this interpreter.
        In this case, we do not want to continue adding types... everything should be
        set up already */
@@ -25069,7 +25383,7 @@ extern "C" {
       var = var->next;
     }
     if (res == NULL && !PyErr_Occurred()) {
-      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
     }
     return res;
   }
@@ -25086,7 +25400,7 @@ extern "C" {
       var = var->next;
     }
     if (res == 1 && !PyErr_Occurred()) {
-      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
     }
     return res;
   }
@@ -25095,24 +25409,23 @@ extern "C" {
   swig_varlink_type(void) {
     static char varlink__doc__[] = "Swig var link object";
     static PyTypeObject varlink_type;
-    static int type_init = 0;  
+    static int type_init = 0;
     if (!type_init) {
-      const PyTypeObject tmp
-      = {
+      const PyTypeObject tmp = {
         /* PyObject header changed in Python 3 */
 #if PY_VERSION_HEX >= 0x03000000
-        PyVarObject_HEAD_INIT(&PyType_Type, 0)
+        PyVarObject_HEAD_INIT(NULL, 0)
 #else
         PyObject_HEAD_INIT(NULL)
-        0,                                  /* Number of items in variable part (ob_size) */
+        0,                                  /* ob_size */
 #endif
-        (char *)"swigvarlink",              /* Type name (tp_name) */
-        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
-        0,                                  /* Itemsize (tp_itemsize) */
-        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
-        (printfunc) swig_varlink_print,     /* Print (tp_print) */
-        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
-        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
+        (char *)"swigvarlink",              /* tp_name */
+        sizeof(swig_varlinkobject),         /* tp_basicsize */
+        0,                                  /* tp_itemsize */
+        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
+        (printfunc) swig_varlink_print,     /* tp_print */
+        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
+        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
         0,                                  /* tp_compare */
         (reprfunc) swig_varlink_repr,       /* tp_repr */
         0,                                  /* tp_as_number */
@@ -25136,16 +25449,30 @@ extern "C" {
 #if PY_VERSION_HEX >= 0x02030000
         0,                                  /* tp_del */
 #endif
+#if PY_VERSION_HEX >= 0x02060000
+        0,                                  /* tp_version_tag */
+#endif
+#if PY_VERSION_HEX >= 0x03040000
+        0,                                  /* tp_finalize */
+#endif
 #ifdef COUNT_ALLOCS
-        0,0,0,0                             /* tp_alloc -> tp_next */
+        0,                                  /* tp_allocs */
+        0,                                  /* tp_frees */
+        0,                                  /* tp_maxalloc */
+#if PY_VERSION_HEX >= 0x02050000
+        0,                                  /* tp_prev */
+#endif
+        0                                   /* tp_next */
 #endif
       };
       varlink_type = tmp;
-      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
-#if PY_VERSION_HEX < 0x03000000
+      type_init = 1;
+#if PY_VERSION_HEX < 0x02020000
       varlink_type.ob_type = &PyType_Type;
+#else
+      if (PyType_Ready(&varlink_type) < 0)
+      return NULL;
 #endif
-      type_init = 1;
     }
     return &varlink_type;
   }
@@ -25196,7 +25523,7 @@ extern "C" {
     for (i = 0; constants[i].type; ++i) {
       switch(constants[i].type) {
       case SWIG_PY_POINTER:
-        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
+        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
         break;
       case SWIG_PY_BINARY:
         obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
@@ -25224,7 +25551,9 @@ extern "C" {
     size_t i;
     for (i = 0; methods[i].ml_name; ++i) {
       const char *c = methods[i].ml_doc;
-      if (c && (c = strstr(c, "swig_ptr: "))) {
+      if (!c) continue;
+      c = strstr(c, "swig_ptr: ");
+      if (c) {
         int j;
         swig_const_info *ci = 0;
         const char *name = c + 10;
@@ -25236,15 +25565,15 @@ extern "C" {
           }
         }
         if (ci) {
-          size_t shift = (ci->ptype) - types;
-          swig_type_info *ty = types_initial[shift];
-          size_t ldoc = (c - methods[i].ml_doc);
-          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
-          char *ndoc = (char*)malloc(ldoc + lptr + 10);
-          if (ndoc) {
-            char *buff = ndoc;
-            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
-            if (ptr) {
+          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
+          if (ptr) {
+            size_t shift = (ci->ptype) - types;
+            swig_type_info *ty = types_initial[shift];
+            size_t ldoc = (c - methods[i].ml_doc);
+            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
+            char *ndoc = (char*)malloc(ldoc + lptr + 10);
+            if (ndoc) {
+              char *buff = ndoc;
               strncpy(buff, methods[i].ml_doc, ldoc);
               buff += ldoc;
               strncpy(buff, "swig_ptr: ", 10);
@@ -25277,10 +25606,19 @@ PyObject*
 void
 #endif
 SWIG_init(void) {
-  PyObject *m, *d;  
+  PyObject *m, *d, *md;
 #if PY_VERSION_HEX >= 0x03000000
   static struct PyModuleDef SWIG_module = {
+# if PY_VERSION_HEX >= 0x03020000
     PyModuleDef_HEAD_INIT,
+# else
+    {
+      PyObject_HEAD_INIT(NULL)
+      NULL, /* m_init */
+      0,    /* m_index */
+      NULL, /* m_copy */
+    },
+# endif
     (char *) SWIG_name,
     NULL,
     -1,
@@ -25292,6 +25630,51 @@ SWIG_init(void) {
   };
 #endif
   
+#if defined(SWIGPYTHON_BUILTIN)
+  static SwigPyClientData SwigPyObject_clientdata = {
+    0, 0, 0, 0, 0, 0, 0
+  };
+  static PyGetSetDef this_getset_def = {
+    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
+  };
+  static SwigPyGetSet thisown_getset_closure = {
+    (PyCFunction) SwigPyObject_own,
+    (PyCFunction) SwigPyObject_own
+  };
+  static PyGetSetDef thisown_getset_def = {
+    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
+  };
+  PyObject *metatype_args;
+  PyTypeObject *builtin_pytype;
+  int builtin_base_count;
+  swig_type_info *builtin_basetype;
+  PyObject *tuple;
+  PyGetSetDescrObject *static_getset;
+  PyTypeObject *metatype;
+  SwigPyClientData *cd;
+  PyObject *public_interface, *public_symbol;
+  PyObject *this_descr;
+  PyObject *thisown_descr;
+  PyObject *self = 0;
+  int i;
+  
+  (void)builtin_pytype;
+  (void)builtin_base_count;
+  (void)builtin_basetype;
+  (void)tuple;
+  (void)static_getset;
+  (void)self;
+  
+  /* metatype is used to implement static member variables. */
+  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
+  assert(metatype_args);
+  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
+  assert(metatype);
+  Py_DECREF(metatype_args);
+  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
+  assert(PyType_Ready(metatype) >= 0);
+#endif
+  
   /* Fix SwigMethods to carry the callback ptrs when needed */
   SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
   
@@ -25300,26 +25683,53 @@ SWIG_init(void) {
 #else
   m = Py_InitModule((char *) SWIG_name, SwigMethods);
 #endif
-  d = PyModule_GetDict(m);
+  
+  md = d = PyModule_GetDict(m);
+  (void)md;
   
   SWIG_InitializeModule(0);
-  SWIG_InstallConstants(d,swig_const_table);
   
+#ifdef SWIGPYTHON_BUILTIN
+  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
+  assert(SwigPyObject_stype);
+  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
+  if (!cd) {
+    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
+    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
+  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
+    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
+# if PY_VERSION_HEX >= 0x03000000
+    return NULL;
+# else
+    return;
+# endif
+  }
+  
+  /* All objects have a 'this' attribute */
+  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
+  (void)this_descr;
+  
+  /* All objects have a 'thisown' attribute */
+  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
+  (void)thisown_descr;
+  
+  public_interface = PyList_New(0);
+  public_symbol = 0;
+  (void)public_symbol;
+  
+  PyDict_SetItemString(md, "__all__", public_interface);
+  Py_DECREF(public_interface);
+  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
+  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
+  for (i = 0; swig_const_table[i].name != 0; ++i)
+  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
+#endif
+  
+  SWIG_InstallConstants(d,swig_const_table);
   
   
   import_array();
   
-  SWIG_Python_SetConstant(d, "L1COEFFS",SWIG_From_int(static_cast< int >(L1COEFFS)));
-  SWIG_Python_SetConstant(d, "L2ERROR",SWIG_From_int(static_cast< int >(L2ERROR)));
-  SWIG_Python_SetConstant(d, "PENALTY",SWIG_From_int(static_cast< int >(PENALTY)));
-  SWIG_Python_SetConstant(d, "SPARSITY",SWIG_From_int(static_cast< int >(SPARSITY)));
-  SWIG_Python_SetConstant(d, "L2ERROR2",SWIG_From_int(static_cast< int >(L2ERROR2)));
-  SWIG_Python_SetConstant(d, "PENALTY2",SWIG_From_int(static_cast< int >(PENALTY2)));
-  SWIG_Python_SetConstant(d, "FISTAMODE",SWIG_From_int(static_cast< int >(FISTAMODE)));
-  SWIG_Python_SetConstant(d, "L2",SWIG_From_int(static_cast< int >(L2)));
-  SWIG_Python_SetConstant(d, "L1L2",SWIG_From_int(static_cast< int >(L1L2)));
-  SWIG_Python_SetConstant(d, "L1L2FL",SWIG_From_int(static_cast< int >(L1L2FL)));
-  SWIG_Python_SetConstant(d, "L1L2MU",SWIG_From_int(static_cast< int >(L1L2MU)));
 #if PY_VERSION_HEX >= 0x03000000
   return m;
 #else
diff --git spams_wrap.py spams_wrap.py
index 361f7c8..8fd7cb9 100644
--- spams_wrap.py
+++ spams_wrap.py
@@ -1,9 +1,11 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 1.3.40
+# Version 3.0.8
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
-# This file is compatible with both classic and new-style classes.
+
+
+
 
 """
 This module gives access to some functions of the spams C++ library.
@@ -11,8 +13,9 @@
 Use of spams functions should only be done through module spams.
 """
 
+
 from sys import version_info
-if version_info >= (2,6,0):
+if version_info >= (2, 6, 0):
     def swig_import_helper():
         from os.path import dirname
         import imp
@@ -36,519 +39,341 @@ def swig_import_helper():
 try:
     _swig_property = property
 except NameError:
-    pass # Python < 2.2 doesn't have 'property'.
-def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
-    if (name == "thisown"): return self.this.own(value)
+    pass  # Python < 2.2 doesn't have 'property'.
+
+
+def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
+    if (name == "thisown"):
+        return self.this.own(value)
     if (name == "this"):
         if type(value).__name__ == 'SwigPyObject':
             self.__dict__[name] = value
             return
-    method = class_type.__swig_setmethods__.get(name,None)
-    if method: return method(self,value)
-    if (not static) or hasattr(self,name):
-        self.__dict__[name] = value
+    method = class_type.__swig_setmethods__.get(name, None)
+    if method:
+        return method(self, value)
+    if (not static):
+        if _newclass:
+            object.__setattr__(self, name, value)
+        else:
+            self.__dict__[name] = value
     else:
         raise AttributeError("You cannot add attributes to %s" % self)
 
-def _swig_setattr(self,class_type,name,value):
-    return _swig_setattr_nondynamic(self,class_type,name,value,0)
 
-def _swig_getattr(self,class_type,name):
-    if (name == "thisown"): return self.this.own()
-    method = class_type.__swig_getmethods__.get(name,None)
-    if method: return method(self)
-    raise AttributeError(name)
+def _swig_setattr(self, class_type, name, value):
+    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+
+
+def _swig_getattr_nondynamic(self, class_type, name, static=1):
+    if (name == "thisown"):
+        return self.this.own()
+    method = class_type.__swig_getmethods__.get(name, None)
+    if method:
+        return method(self)
+    if (not static):
+        return object.__getattr__(self, name)
+    else:
+        raise AttributeError(name)
+
+def _swig_getattr(self, class_type, name):
+    return _swig_getattr_nondynamic(self, class_type, name, 0)
+
 
 def _swig_repr(self):
-    try: strthis = "proxy of " + self.this.__repr__()
-    except: strthis = ""
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except Exception:
+        strthis = ""
     return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
 
 try:
     _object = object
     _newclass = 1
 except AttributeError:
-    class _object : pass
+    class _object:
+        pass
     _newclass = 0
 
 
 
-def m_ones(*args):
-  return _spams_wrap.m_ones(*args)
+def m_ones(nb):
+    return _spams_wrap.m_ones(nb)
 m_ones = _spams_wrap.m_ones
 
-def skip_space(*args):
-  return _spams_wrap.skip_space(*args)
+def skip_space(s):
+    return _spams_wrap.skip_space(s)
 skip_space = _spams_wrap.skip_space
 
-def parse_line(*args):
-  return _spams_wrap.parse_line(*args)
+def parse_line(s, vresult):
+    return _spams_wrap.parse_line(s, vresult)
 parse_line = _spams_wrap.parse_line
 
-def intlist(*args):
-  return _spams_wrap.intlist(*args)
+def intlist(s):
+    return _spams_wrap.intlist(s)
 intlist = _spams_wrap.intlist
-L1COEFFS = _spams_wrap.L1COEFFS
-L2ERROR = _spams_wrap.L2ERROR
-PENALTY = _spams_wrap.PENALTY
-SPARSITY = _spams_wrap.SPARSITY
-L2ERROR2 = _spams_wrap.L2ERROR2
-PENALTY2 = _spams_wrap.PENALTY2
-FISTAMODE = _spams_wrap.FISTAMODE
-L2 = _spams_wrap.L2
-L1L2 = _spams_wrap.L1L2
-L1L2FL = _spams_wrap.L1L2FL
-L1L2MU = _spams_wrap.L1L2MU
-
-def simpleGroupTree(*args):
-  """simpleGroupTree(int degr) -> std::vector<(p.StructNodeElem<(double)>)>"""
-  return _spams_wrap.simpleGroupTree(*args)
-
-def readGroupStruct(*args):
-  """readGroupStruct(char file) -> std::vector<(p.StructNodeElem<(double)>)>"""
-  return _spams_wrap.readGroupStruct(*args)
-
-def groupStructOfString(*args):
-  """groupStructOfString(char data) -> std::vector<(p.StructNodeElem<(double)>)>"""
-  return _spams_wrap.groupStructOfString(*args)
-
 
 def sort(*args):
-  """
-    sort(Vector<(double)> v, bool mode)
-    sort(Vector<(float)> v, bool mode)
     """
-  return _spams_wrap.sort(*args)
+    sort(Vector< double > * v, bool mode)
+    sort(Vector< float > * v, bool mode)
+    """
+    return _spams_wrap.sort(*args)
 
 def mult(*args):
-  """
-    mult(Matrix<(double)> X, Matrix<(double)> Y, Matrix<(double)> XY, 
-        bool transX, bool transY, double a, 
-        double b)
-    mult(Matrix<(float)> X, Matrix<(float)> Y, Matrix<(float)> XY, 
-        bool transX, bool transY, float a, float b)
     """
-  return _spams_wrap.mult(*args)
+    mult(Matrix< double > * X, Matrix< double > * Y, Matrix< double > * XY, bool const transX, bool const transY, double const a, double const b)
+    mult(Matrix< float > * X, Matrix< float > * Y, Matrix< float > * XY, bool const transX, bool const transY, float const a, float const b)
+    """
+    return _spams_wrap.mult(*args)
 
 def AAt(*args):
-  """
-    AAt(SpMatrix<(double)> A, Matrix<(double)> B)
-    AAt(SpMatrix<(float)> A, Matrix<(float)> B)
     """
-  return _spams_wrap.AAt(*args)
+    AAt(SpMatrix< double > * A, Matrix< double > * B)
+    AAt(SpMatrix< float > * A, Matrix< float > * B)
+    """
+    return _spams_wrap.AAt(*args)
 
 def XAt(*args):
-  """
-    XAt(SpMatrix<(double)> A, Matrix<(double)> X, Matrix<(double)> XAt)
-    XAt(SpMatrix<(float)> A, Matrix<(float)> X, Matrix<(float)> XAt)
     """
-  return _spams_wrap.XAt(*args)
+    XAt(SpMatrix< double > * A, Matrix< double > * X, Matrix< double > * XAt)
+    XAt(SpMatrix< float > * A, Matrix< float > * X, Matrix< float > * XAt)
+    """
+    return _spams_wrap.XAt(*args)
 
 def applyBayerPattern(*args):
-  """
-    applyBayerPattern(Vector<(double)> v, int offset)
-    applyBayerPattern(Vector<(float)> v, int offset)
     """
-  return _spams_wrap.applyBayerPattern(*args)
+    applyBayerPattern(Vector< double > * v, int offset)
+    applyBayerPattern(Vector< float > * v, int offset)
+    """
+    return _spams_wrap.applyBayerPattern(*args)
 
 def conjugateGradient(*args):
-  """
-    conjugateGradient(Matrix<(double)> A, Vector<(double)> b, Vector<(double)> x, 
-        double tol, int itermax)
-    conjugateGradient(Matrix<(float)> A, Vector<(float)> b, Vector<(float)> x, 
-        float tol, int itermax)
     """
-  return _spams_wrap.conjugateGradient(*args)
+    conjugateGradient(Matrix< double > * A, Vector< double > * b, Vector< double > * x, double const tol, int const itermax)
+    conjugateGradient(Matrix< float > * A, Vector< float > * b, Vector< float > * x, float const tol, int const itermax)
+    """
+    return _spams_wrap.conjugateGradient(*args)
 
 def invSym(*args):
-  """
-    invSym(Matrix<(double)> A)
-    invSym(Matrix<(float)> A)
     """
-  return _spams_wrap.invSym(*args)
+    invSym(Matrix< double > * A)
+    invSym(Matrix< float > * A)
+    """
+    return _spams_wrap.invSym(*args)
 
 def normalize(*args):
-  """
-    normalize(Matrix<(double)> A)
-    normalize(Matrix<(float)> A)
     """
-  return _spams_wrap.normalize(*args)
+    normalize(Matrix< double > * A)
+    normalize(Matrix< float > * A)
+    """
+    return _spams_wrap.normalize(*args)
+
+_spams_wrap.L1COEFFS_swigconstant(_spams_wrap)
+L1COEFFS = _spams_wrap.L1COEFFS
+
+_spams_wrap.L2ERROR_swigconstant(_spams_wrap)
+L2ERROR = _spams_wrap.L2ERROR
+
+_spams_wrap.PENALTY_swigconstant(_spams_wrap)
+PENALTY = _spams_wrap.PENALTY
+
+_spams_wrap.SPARSITY_swigconstant(_spams_wrap)
+SPARSITY = _spams_wrap.SPARSITY
+
+_spams_wrap.L2ERROR2_swigconstant(_spams_wrap)
+L2ERROR2 = _spams_wrap.L2ERROR2
+
+_spams_wrap.PENALTY2_swigconstant(_spams_wrap)
+PENALTY2 = _spams_wrap.PENALTY2
+
+_spams_wrap.FISTAMODE_swigconstant(_spams_wrap)
+FISTAMODE = _spams_wrap.FISTAMODE
 
 def sparseProject(*args):
-  """
-    sparseProject(Matrix<(double)> U, Matrix<(double)> V, double thrs, 
-        int mode, double lambda1, double lambda2, double lambda3, 
-        bool pos, int numThreads)
-    sparseProject(Matrix<(float)> U, Matrix<(float)> V, float thrs, int mode, 
-        float lambda1, float lambda2, float lambda3, 
-        bool pos, int numThreads)
     """
-  return _spams_wrap.sparseProject(*args)
+    sparseProject(Matrix< double > * U, Matrix< double > * V, double const thrs, int const mode, double const lambda1, double const lambda2, double const lambda3, bool const pos, int const numThreads)
+    sparseProject(Matrix< float > * U, Matrix< float > * V, float const thrs, int const mode, float const lambda1, float const lambda2, float const lambda3, bool const pos, int const numThreads)
+    """
+    return _spams_wrap.sparseProject(*args)
 
 def lassoD(*args):
-  """
-    lassoD(Matrix<(double)> X, Matrix<(double)> D, bool return_reg_path, 
-        int L, double constraint, double lambda2, 
-        constraint_type mode, bool pos, bool ols, 
-        int numThreads, int max_length_path, bool verbose, 
-        bool cholevsky) -> SpMatrix<(double)>
-    lassoD(Matrix<(float)> X, Matrix<(float)> D, bool return_reg_path, 
-        int L, float constraint, float lambda2, 
-        constraint_type mode, bool pos, bool ols, 
-        int numThreads, int max_length_path, bool verbose, 
-        bool cholevsky) -> SpMatrix<(float)>
-    """
-  return _spams_wrap.lassoD(*args)
+    """
+    lassoD(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double >
+    lassoD(Matrix< float > * X, Matrix< float > * D, bool return_reg_path, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< float > *
+    """
+    return _spams_wrap.lassoD(*args)
 
 def lassoQq(*args):
-  """
-    lassoQq(Matrix<(double)> X, Matrix<(double)> Q, Matrix<(double)> q, 
-        bool return_reg_path, int L, double constraint, 
-        double lambda2, constraint_type mode, 
-        bool pos, bool ols, int numThreads, int max_length_path, 
-        bool verbose, bool cholevsky) -> SpMatrix<(double)>
-    lassoQq(Matrix<(float)> X, Matrix<(float)> Q, Matrix<(float)> q, 
-        bool return_reg_path, int L, float constraint, 
-        float lambda2, constraint_type mode, 
-        bool pos, bool ols, int numThreads, int max_length_path, 
-        bool verbose, bool cholevsky) -> SpMatrix<(float)>
-    """
-  return _spams_wrap.lassoQq(*args)
+    """
+    lassoQq(Matrix< double > * X, Matrix< double > * Q, Matrix< double > * q, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double >
+    lassoQq(Matrix< float > * X, Matrix< float > * Q, Matrix< float > * q, bool return_reg_path, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< float > *
+    """
+    return _spams_wrap.lassoQq(*args)
 
 def lassoMask(*args):
-  """
-    lassoMask(Matrix<(double)> X, Matrix<(double)> D, Matrix<(bool)> B, 
-        int L, double constraint, double lambda2, 
-        constraint_type mode, bool pos, int numThreads, 
-        bool verbose) -> SpMatrix<(double)>
-    lassoMask(Matrix<(float)> X, Matrix<(float)> D, Matrix<(bool)> B, 
-        int L, float constraint, float lambda2, 
-        constraint_type mode, bool pos, int numThreads, 
-        bool verbose) -> SpMatrix<(float)>
-    """
-  return _spams_wrap.lassoMask(*args)
+    """
+    lassoMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double >
+    lassoMask(Matrix< float > * X, Matrix< float > * D, Matrix< bool > * B, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< float > *
+    """
+    return _spams_wrap.lassoMask(*args)
 
 def lassoWeighted(*args):
-  """
-    lassoWeighted(Matrix<(double)> X, Matrix<(double)> D, Matrix<(double)> W, 
-        int L, double constraint, constraint_type mode, 
-        bool pos, int numThreads, bool verbose) -> SpMatrix<(double)>
-    lassoWeighted(Matrix<(float)> X, Matrix<(float)> D, Matrix<(float)> W, 
-        int L, float constraint, constraint_type mode, 
-        bool pos, int numThreads, bool verbose) -> SpMatrix<(float)>
     """
-  return _spams_wrap.lassoWeighted(*args)
+    lassoWeighted(Matrix< double > * X, Matrix< double > * D, Matrix< double > * W, int L, double const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double >
+    lassoWeighted(Matrix< float > * X, Matrix< float > * D, Matrix< float > * W, int L, float const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< float > *
+    """
+    return _spams_wrap.lassoWeighted(*args)
 
 def omp(*args):
-  """
-    omp(Matrix<(double)> X, Matrix<(double)> D, bool return_reg_path, 
-        bool given_L, Vector<(int)> L, bool given_eps, 
-        Vector<(double)> eps, bool given_Lambda, 
-        Vector<(double)> Lambda, int numThreads) -> SpMatrix<(double)>
-    omp(Matrix<(float)> X, Matrix<(float)> D, bool return_reg_path, 
-        bool given_L, Vector<(int)> L, bool given_eps, 
-        Vector<(float)> eps, bool given_Lambda, 
-        Vector<(float)> Lambda, int numThreads) -> SpMatrix<(float)>
-    """
-  return _spams_wrap.omp(*args)
+    """
+    omp(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double >
+    omp(Matrix< float > * X, Matrix< float > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< float > * eps, bool given_Lambda, Vector< float > * Lambda, int const numThreads) -> SpMatrix< float > *
+    """
+    return _spams_wrap.omp(*args)
 
 def ompMask(*args):
-  """
-    ompMask(Matrix<(double)> X, Matrix<(double)> D, Matrix<(bool)> B, 
-        bool return_reg_path, bool given_L, Vector<(int)> L, 
-        bool given_eps, Vector<(double)> eps, 
-        bool given_Lambda, Vector<(double)> Lambda, 
-        int numThreads) -> SpMatrix<(double)>
-    ompMask(Matrix<(float)> X, Matrix<(float)> D, Matrix<(bool)> B, 
-        bool return_reg_path, bool given_L, Vector<(int)> L, 
-        bool given_eps, Vector<(float)> eps, 
-        bool given_Lambda, Vector<(float)> Lambda, 
-        int numThreads) -> SpMatrix<(float)>
-    """
-  return _spams_wrap.ompMask(*args)
+    """
+    ompMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double >
+    ompMask(Matrix< float > * X, Matrix< float > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< float > * eps, bool given_Lambda, Vector< float > * Lambda, int const numThreads) -> SpMatrix< float > *
+    """
+    return _spams_wrap.ompMask(*args)
 
 def somp(*args):
-  """
-    somp(Matrix<(double)> X, Matrix<(double)> D, Vector<(int)> groups, 
-        int LL, double eps, int numThreads) -> SpMatrix<(double)>
-    somp(Matrix<(float)> X, Matrix<(float)> D, Vector<(int)> groups, 
-        int LL, float eps, int numThreads) -> SpMatrix<(float)>
     """
-  return _spams_wrap.somp(*args)
+    somp(Matrix< double > * X, Matrix< double > * D, Vector< int > * groups, int LL, double eps, int numThreads) -> SpMatrix< double >
+    somp(Matrix< float > * X, Matrix< float > * D, Vector< int > * groups, int LL, float eps, int numThreads) -> SpMatrix< float > *
+    """
+    return _spams_wrap.somp(*args)
 
 def cd(*args):
-  """
-    cd(Matrix<(double)> X, Matrix<(double)> D, SpMatrix<(double)> alpha, 
-        double lambda1, constraint_type mode, 
-        int itermax, double tol, int numThreads) -> SpMatrix<(double)>
-    cd(Matrix<(float)> X, Matrix<(float)> D, SpMatrix<(float)> alpha, 
-        float lambda1, constraint_type mode, 
-        int itermax, float tol, int numThreads) -> SpMatrix<(float)>
     """
-  return _spams_wrap.cd(*args)
+    cd(Matrix< double > * X, Matrix< double > * D, SpMatrix< double > * alpha, double lambda1, constraint_type mode, int itermax, double tol, int numThreads) -> SpMatrix< double >
+    cd(Matrix< float > * X, Matrix< float > * D, SpMatrix< float > * alpha, float lambda1, constraint_type mode, int itermax, float tol, int numThreads) -> SpMatrix< float > *
+    """
+    return _spams_wrap.cd(*args)
 
 def l1L2BCD(*args):
-  """
-    l1L2BCD(Matrix<(double)> X, Matrix<(double)> D, Matrix<(double)> alpha0, 
-        Vector<(int)> groups, double lambda1, 
-        constraint_type mode, int itermax, double tol, 
-        int numThreads)
-    l1L2BCD(Matrix<(float)> X, Matrix<(float)> D, Matrix<(float)> alpha0, 
-        Vector<(int)> groups, float lambda1, 
-        constraint_type mode, int itermax, float tol, 
-        int numThreads)
-    """
-  return _spams_wrap.l1L2BCD(*args)
+    """
+    l1L2BCD(Matrix< double > * X, Matrix< double > * D, Matrix< double > * alpha0, Vector< int > * groups, double lambda1, constraint_type mode, int itermax, double tol, int numThreads)
+    l1L2BCD(Matrix< float > * X, Matrix< float > * D, Matrix< float > * alpha0, Vector< int > * groups, float lambda1, constraint_type mode, int itermax, float tol, int numThreads)
+    """
+    return _spams_wrap.l1L2BCD(*args)
+
+_spams_wrap.L2_swigconstant(_spams_wrap)
+L2 = _spams_wrap.L2
+
+_spams_wrap.L1L2_swigconstant(_spams_wrap)
+L1L2 = _spams_wrap.L1L2
+
+_spams_wrap.L1L2FL_swigconstant(_spams_wrap)
+L1L2FL = _spams_wrap.L1L2FL
+
+_spams_wrap.L1L2MU_swigconstant(_spams_wrap)
+L1L2MU = _spams_wrap.L1L2MU
 
 def alltrainDL(*args):
-  """
-    alltrainDL(Data<(double)> X, bool in_memory, bool return_model, 
-        Matrix<(double)> m_A, Matrix<(double)> m_B, 
-        int m_iter, Matrix<(double)> D1, Vector<(double)> eta_g, 
-        SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, 
-        Vector<(int)> own_variables, 
-        Vector<(int)> N_own_variables, int num_threads, 
-        double tol, bool fixed_step, bool ista, 
-        int batch_size, int K, double lambda1, double lambda2, 
-        double lambda3, int iter, double t0, 
-        constraint_type mode, char name_regul, 
-        bool posAlpha, bool posD, bool expand, constraint_type_D modeD, 
-        bool whiten, bool clean, bool verbose, 
-        double gamma1, double gamma2, double rho, 
-        int iter_updateD, bool stochastic, 
-        int modeParam, bool batch, bool log, char logName) -> Matrix<(double)>
-    alltrainDL(Data<(float)> X, bool in_memory, bool return_model, 
-        Matrix<(float)> m_A, Matrix<(float)> m_B, int m_iter, 
-        Matrix<(float)> D1, Vector<(float)> eta_g, 
-        SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, 
-        Vector<(int)> own_variables, 
-        Vector<(int)> N_own_variables, int num_threads, 
-        float tol, bool fixed_step, bool ista, int batch_size, 
-        int K, double lambda1, double lambda2, 
-        double lambda3, int iter, double t0, 
-        constraint_type mode, char name_regul, bool posAlpha, 
-        bool posD, bool expand, constraint_type_D modeD, 
-        bool whiten, bool clean, bool verbose, 
-        double gamma1, double gamma2, float rho, 
-        int iter_updateD, bool stochastic, int modeParam, 
-        bool batch, bool log, char logName) -> Matrix<(float)>
-    """
-  return _spams_wrap.alltrainDL(*args)
+    """
+    alltrainDL(Data< double > * X, bool in_memory, bool return_model, Matrix< double > * m_A, Matrix< double > * m_B, int m_iter, Matrix< double > * D1, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, double rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< double >
+    alltrainDL(Data< float > * X, bool in_memory, bool return_model, Matrix< float > * m_A, Matrix< float > * m_B, int m_iter, Matrix< float > * D1, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, float tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, float rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< float > *
+    """
+    return _spams_wrap.alltrainDL(*args)
 
 def archetypalAnalysis(*args):
-  """
-    archetypalAnalysis(Matrix<(double)> X, int p, bool robust, double epsilon, 
-        bool computeXtX, int stepsFISTA, int stepsAS, 
-        bool randominit, int numThreads) -> Matrix<(double)>
-    archetypalAnalysis(Matrix<(float)> X, int p, bool robust, float epsilon, 
-        bool computeXtX, int stepsFISTA, int stepsAS, 
-        bool randominit, int numThreads) -> Matrix<(float)>
     """
-  return _spams_wrap.archetypalAnalysis(*args)
+    archetypalAnalysis(Matrix< double > * X, int p, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< double >
+    archetypalAnalysis(Matrix< float > * X, int p, bool robust, float epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< float > *
+    """
+    return _spams_wrap.archetypalAnalysis(*args)
 
 def archetypalAnalysisInit(*args):
-  """
-    archetypalAnalysisInit(Matrix<(double)> X, Matrix<(double)> Z0, bool robust, 
-        double epsilon, bool computeXtX, int stepsFISTA, 
-        int stepsAS, int numThreads) -> Matrix<(double)>
-    archetypalAnalysisInit(Matrix<(float)> X, Matrix<(float)> Z0, bool robust, 
-        float epsilon, bool computeXtX, int stepsFISTA, 
-        int stepsAS, int numThreads) -> Matrix<(float)>
     """
-  return _spams_wrap.archetypalAnalysisInit(*args)
+    archetypalAnalysisInit(Matrix< double > * X, Matrix< double > * Z0, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< double >
+    archetypalAnalysisInit(Matrix< float > * X, Matrix< float > * Z0, bool robust, float epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< float > *
+    """
+    return _spams_wrap.archetypalAnalysisInit(*args)
 
 def decompSimplex(*args):
-  """
-    decompSimplex(Matrix<(double)> X, Matrix<(double)> Z, bool computeXtX, 
-        int numThreads) -> SpMatrix<(double)>
-    decompSimplex(Matrix<(float)> X, Matrix<(float)> Z, bool computeXtX, 
-        int numThreads) -> SpMatrix<(float)>
     """
-  return _spams_wrap.decompSimplex(*args)
+    decompSimplex(Matrix< double > * X, Matrix< double > * Z, bool computeXtX, int numThreads) -> SpMatrix< double >
+    decompSimplex(Matrix< float > * X, Matrix< float > * Z, bool computeXtX, int numThreads) -> SpMatrix< float > *
+    """
+    return _spams_wrap.decompSimplex(*args)
 
 def fistaFlat(*args):
-  """
-    fistaFlat(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, 
-        Matrix<(double)> alpha, 
-        Vector<(int)> groups, int num_threads, int max_it, 
-        double L0, bool fixed_step, double gamma, 
-        double _lambda, double delta, double lambda2, 
-        double lambda3, double a, double b, double c, 
-        double tol, int it0, int max_iter_backtracking, 
-        bool compute_gram, bool lin_admm, bool admm, 
-        bool intercept, bool resetflow, char name_regul, 
-        char name_loss, bool verbose, bool pos, 
-        bool clever, bool log, bool ista, bool subgrad, 
-        char logName, bool is_inner_weights, 
-        Vector<(double)> inner_weights, int size_group, 
-        bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(double)>
-    fistaFlat(Matrix<(float)> X, AbstractMatrixB<(float)> D, Matrix<(float)> alpha0, 
-        Matrix<(float)> alpha, Vector<(int)> groups, 
-        int num_threads, int max_it, 
-        float L0, bool fixed_step, float gamma, float _lambda, 
-        float delta, float lambda2, float lambda3, 
-        float a, float b, float c, float tol, 
-        int it0, int max_iter_backtracking, bool compute_gram, 
-        bool lin_admm, bool admm, bool intercept, 
-        bool resetflow, char name_regul, 
-        char name_loss, bool verbose, bool pos, bool clever, 
-        bool log, bool ista, bool subgrad, char logName, 
-        bool is_inner_weights, Vector<(float)> inner_weights, 
-        int size_group, bool sqrt_step, 
-        bool transpose, int linesearch_mode) -> Matrix<(float)>
-    """
-  return _spams_wrap.fistaFlat(*args)
+    """
+    fistaFlat(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >
+    fistaFlat(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< int > * groups, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *
+    """
+    return _spams_wrap.fistaFlat(*args)
 
 def fistaTree(*args):
-  """
-    fistaTree(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, 
-        Matrix<(double)> alpha, 
-        Vector<(double)> eta_g, SpMatrix<(bool)> groups, 
-        Vector<(int)> own_variables, Vector<(int)> N_own_variables, 
-        int num_threads, int max_it, 
-        double L0, bool fixed_step, double gamma, 
-        double _lambda, double delta, double lambda2, 
-        double lambda3, double a, double b, double c, 
-        double tol, int it0, int max_iter_backtracking, 
-        bool compute_gram, bool lin_admm, bool admm, 
-        bool intercept, bool resetflow, char name_regul, 
-        char name_loss, bool verbose, bool pos, 
-        bool clever, bool log, bool ista, bool subgrad, 
-        char logName, bool is_inner_weights, 
-        Vector<(double)> inner_weights, int size_group, 
-        bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(double)>
-    fistaTree(Matrix<(float)> X, AbstractMatrixB<(float)> D, Matrix<(float)> alpha0, 
-        Matrix<(float)> alpha, Vector<(float)> eta_g, 
-        SpMatrix<(bool)> groups, 
-        Vector<(int)> own_variables, Vector<(int)> N_own_variables, 
-        int num_threads, int max_it, 
-        float L0, bool fixed_step, float gamma, float _lambda, 
-        float delta, float lambda2, float lambda3, 
-        float a, float b, float c, float tol, 
-        int it0, int max_iter_backtracking, bool compute_gram, 
-        bool lin_admm, bool admm, bool intercept, 
-        bool resetflow, char name_regul, char name_loss, 
-        bool verbose, bool pos, bool clever, 
-        bool log, bool ista, bool subgrad, char logName, 
-        bool is_inner_weights, Vector<(float)> inner_weights, 
-        int size_group, bool sqrt_step, 
-        bool transpose, int linesearch_mode) -> Matrix<(float)>
-    """
-  return _spams_wrap.fistaTree(*args)
+    """
+    fistaTree(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >
+    fistaTree(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *
+    """
+    return _spams_wrap.fistaTree(*args)
 
 def fistaGraph(*args):
-  """
-    fistaGraph(Matrix<(double)> X, AbstractMatrixB<(double)> D, Matrix<(double)> alpha0, 
-        Matrix<(double)> alpha, 
-        Vector<(double)> eta_g, SpMatrix<(bool)> groups, 
-        SpMatrix<(bool)> groups_var, int num_threads, 
-        int max_it, double L0, bool fixed_step, 
-        double gamma, double _lambda, double delta, 
-        double lambda2, double lambda3, double a, double b, 
-        double c, double tol, int it0, int max_iter_backtracking, 
-        bool compute_gram, bool lin_admm, 
-        bool admm, bool intercept, bool resetflow, 
-        char name_regul, char name_loss, bool verbose, 
-        bool pos, bool clever, bool log, bool ista, 
-        bool subgrad, char logName, bool is_inner_weights, 
-        Vector<(double)> inner_weights, 
-        int size_group, bool sqrt_step, bool transpose, 
-        int linesearch_mode) -> Matrix<(double)>
-    fistaGraph(Matrix<(float)> X, AbstractMatrixB<(float)> D, Matrix<(float)> alpha0, 
-        Matrix<(float)> alpha, Vector<(float)> eta_g, 
-        SpMatrix<(bool)> groups, 
-        SpMatrix<(bool)> groups_var, int num_threads, 
-        int max_it, float L0, bool fixed_step, float gamma, 
-        float _lambda, float delta, float lambda2, 
-        float lambda3, float a, float b, float c, 
-        float tol, int it0, int max_iter_backtracking, 
-        bool compute_gram, bool lin_admm, bool admm, 
-        bool intercept, bool resetflow, char name_regul, 
-        char name_loss, bool verbose, bool pos, 
-        bool clever, bool log, bool ista, bool subgrad, 
-        char logName, bool is_inner_weights, 
-        Vector<(float)> inner_weights, int size_group, 
-        bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix<(float)>
-    """
-  return _spams_wrap.fistaGraph(*args)
+    """
+    fistaGraph(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >
+    fistaGraph(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *
+    """
+    return _spams_wrap.fistaGraph(*args)
 
 def proximalFlat(*args):
-  """
-    proximalFlat(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(int)> groups, 
-        int num_threads, double lambda1, 
-        double lambda2, double lambda3, bool intercept, 
-        bool resetflow, char name_regul, bool verbose, 
-        bool pos, bool clever, bool eval, 
-        int size_group, bool transpose) -> Vector<(double)>
-    proximalFlat(Matrix<(float)> alpha0, Matrix<(float)> alpha, Vector<(int)> groups, 
-        int num_threads, float lambda1, 
-        float lambda2, float lambda3, bool intercept, 
-        bool resetflow, char name_regul, bool verbose, 
-        bool pos, bool clever, bool eval, int size_group, 
-        bool transpose) -> Vector<(float)>
-    """
-  return _spams_wrap.proximalFlat(*args)
+    """
+    proximalFlat(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >
+    proximalFlat(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< int > * groups, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *
+    """
+    return _spams_wrap.proximalFlat(*args)
 
 def proximalTree(*args):
-  """
-    proximalTree(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(double)> eta_g, 
-        SpMatrix<(bool)> groups, 
-        Vector<(int)> own_variables, Vector<(int)> N_own_variables, 
-        int num_threads, double lambda1, 
-        double lambda2, double lambda3, bool intercept, 
-        bool resetflow, char name_regul, bool verbose, 
-        bool pos, bool clever, bool eval, int size_group, 
-        bool transpose) -> Vector<(double)>
-    proximalTree(Matrix<(float)> alpha0, Matrix<(float)> alpha, Vector<(float)> eta_g, 
-        SpMatrix<(bool)> groups, Vector<(int)> own_variables, 
-        Vector<(int)> N_own_variables, 
-        int num_threads, float lambda1, 
-        float lambda2, float lambda3, bool intercept, 
-        bool resetflow, char name_regul, bool verbose, 
-        bool pos, bool clever, bool eval, int size_group, 
-        bool transpose) -> Vector<(float)>
-    """
-  return _spams_wrap.proximalTree(*args)
+    """
+    proximalTree(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >
+    proximalTree(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *
+    """
+    return _spams_wrap.proximalTree(*args)
 
 def proximalGraph(*args):
-  """
-    proximalGraph(Matrix<(double)> alpha0, Matrix<(double)> alpha, Vector<(double)> eta_g, 
-        SpMatrix<(bool)> groups, 
-        SpMatrix<(bool)> groups_var, int num_threads, 
-        double lambda1, double lambda2, double lambda3, 
-        bool intercept, bool resetflow, char name_regul, 
-        bool verbose, bool pos, bool clever, 
-        bool eval, int size_group, bool transpose) -> Vector<(double)>
-    proximalGraph(Matrix<(float)> alpha0, Matrix<(float)> alpha, Vector<(float)> eta_g, 
-        SpMatrix<(bool)> groups, SpMatrix<(bool)> groups_var, 
-        int num_threads, 
-        float lambda1, float lambda2, float lambda3, 
-        bool intercept, bool resetflow, char name_regul, 
-        bool verbose, bool pos, bool clever, bool eval, 
-        int size_group, bool transpose) -> Vector<(float)>
-    """
-  return _spams_wrap.proximalGraph(*args)
+    """
+    proximalGraph(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >
+    proximalGraph(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *
+    """
+    return _spams_wrap.proximalGraph(*args)
+
+def simpleGroupTree(degr):
+    """simpleGroupTree(int * degr) -> std::vector< StructNodeElem< double > * > *"""
+    return _spams_wrap.simpleGroupTree(degr)
+
+def readGroupStruct(file):
+    """readGroupStruct(char const * file) -> std::vector< StructNodeElem< double > * > *"""
+    return _spams_wrap.readGroupStruct(file)
+
+def groupStructOfString(data):
+    """groupStructOfString(char const * data) -> std::vector< StructNodeElem< double > * > *"""
+    return _spams_wrap.groupStructOfString(data)
 
 def graphOfGroupStruct(*args):
-  """
-    graphOfGroupStruct(std::vector<(p.StructNodeElem<(double)>)> gstruct) -> Vector<(double)>
-    graphOfGroupStruct(std::vector<(p.StructNodeElem<(float)>)> gstruct) -> Vector<(float)>
     """
-  return _spams_wrap.graphOfGroupStruct(*args)
+    graphOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> Vector< double >
+    graphOfGroupStruct(std::vector< StructNodeElem< float > * > * gstruct) -> Vector< float > *
+    """
+    return _spams_wrap.graphOfGroupStruct(*args)
 
 def treeOfGroupStruct(*args):
-  """
-    treeOfGroupStruct(std::vector<(p.StructNodeElem<(double)>)> gstruct) -> int
-    treeOfGroupStruct(std::vector<(p.StructNodeElem<(float)>)> gstruct, Vector<(float)> peta_g) -> int
     """
-  return _spams_wrap.treeOfGroupStruct(*args)
+    treeOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> int
+    treeOfGroupStruct(std::vector< StructNodeElem< float > * > * gstruct, Vector< float > ** peta_g) -> int
+    """
+    return _spams_wrap.treeOfGroupStruct(*args)
 
 def im2col_sliding(*args):
-  """
-    im2col_sliding(Matrix<(double)> A, Matrix<(double)> B, int m, int n, 
-        bool RGB)
-    im2col_sliding(Matrix<(float)> A, Matrix<(float)> B, int m, int n, 
-        bool RGB)
     """
-  return _spams_wrap.im2col_sliding(*args)
+    im2col_sliding(Matrix< double > * A, Matrix< double > * B, int m, int n, bool RGB)
+    im2col_sliding(Matrix< float > * A, Matrix< float > * B, int m, int n, bool RGB)
+    """
+    return _spams_wrap.im2col_sliding(*args)
+# This file is compatible with both classic and new-style classes.
+
 
